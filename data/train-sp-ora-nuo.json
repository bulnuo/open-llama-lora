[
  {
    "number": 0,
    "task": "Write a stored procedure to get the name, position and team of a hockey player of a given number.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the name, position and team of a hockey player of a given number.",
    "input": "CREATE OR REPLACE PROCEDURE get_hockey_player_info(_in IN NUMBER, _name OUT VARCHAR2, _position OUT VARCHAR2, _team OUT VARCHAR2) IS BEGIN SELECT Name, Position, Team INTO _name, _position, _team FROM Hockey WHERE Number = _in; END;",
    "output": "CREATE OR REPLACE PROCEDURE get_hockey_player_info(_in INTEGER) AS VAR _name STRING, _position STRING, _team STRING; _name, _position, _team = (SELECT Name, Position, Team FROM Hockey WHERE Number = _in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 1,
    "task": "Create a stored procedure to get the total number of goals by a player in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the total number of goals by a player in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE total_goals_by_player_in_year(_in IN VARCHAR2, _year_in IN INTEGER, _goals OUT INTEGER) IS BEGIN SELECT sum(goals) INTO _goals FROM scoring WHERE playerID = _in AND year = _year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE total_goals_by_player_in_year(_in STRING, _year_in INTEGER) AS VAR _goals INTEGER = (SELECT sum(goals) FROM scoring WHERE playerID = _in AND year = _year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 2,
    "task": "Write a stored procedure to get the height and weight of a player given playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the height and weight of a player given playerID.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_dimensions(_in IN VARCHAR2, _height OUT INTEGER, _weight OUT INTEGER) IS BEGIN SELECT height, weight INTO _height, _weight FROM players WHERE playerID = _in; END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_dimensions(_in STRING) AS VAR _height INTEGER, _weight INTEGER; _height, _weight = (SELECT height, weight FROM players WHERE playerID = _in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 3,
    "task": "Create a stored procedure to update the height and weight of a player using playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to update the height and weight of a player using playerID.",
    "input": "CREATE OR REPLACE PROCEDURE update_player_dimensions(_id_in IN VARCHAR2, _height_in IN INTEGER, _weight_in IN INTEGER) IS BEGIN UPDATE players SET height = _height_in, weight = _weight_in WHERE playerID = _id_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE update_player_dimensions(_id_in STRING, _height_in INTEGER, _weight_in INTEGER) AS UPDATE players SET height = _height_in, weight = _weight_in WHERE playerID = _id_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 4,
    "task": "Create a stored procedure to get the number of games played by a player in all the years.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the number of games played by a player in all the years.",
    "input": "CREATE OR REPLACE PROCEDURE total_games_played_by_player(_in IN VARCHAR2, _games OUT INTEGER) IS BEGIN SELECT sum(gamesPlayed) INTO _games FROM scoring WHERE playerID = _in; END;",
    "output": "CREATE OR REPLACE PROCEDURE total_games_played_by_player(_in STRING) AS VAR _games INTEGER = (SELECT sum(gamesPlayed) FROM scoring WHERE playerID = _in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 5,
    "task": "Write a stored procedure to get the total number of wins for a team in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the total number of wins for a team in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE total_wins_by_team_in_year(_in IN VARCHAR2, _year_in IN INTEGER, _wins OUT INTEGER) IS BEGIN SELECT wins INTO _wins FROM teams WHERE teamID = _in AND year = _year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE total_wins_by_team_in_year(_in STRING, _year_in INTEGER) AS VAR _wins INTEGER = (SELECT wins FROM teams WHERE teamID = _in AND year = _year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 6,
    "task": "Create a stored procedure to get the total number of goals and assists by a player in all the years.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the total number of goals and assists by a player in all the years.",
    "input": "CREATE OR REPLACE PROCEDURE total_goals_and_assists_by_player(_in IN VARCHAR2, _goals OUT INTEGER, _assists OUT INTEGER) IS BEGIN SELECT sum(goals), sum(assists) INTO _goals, _assists FROM scoring WHERE playerID = _in; END;",
    "output": "CREATE OR REPLACE PROCEDURE total_goals_and_assists_by_player(_in STRING) AS VAR _goals INTEGER, _assists INTEGER; _goals, _assists = (SELECT sum(goals), sum(assists) FROM scoring WHERE playerID = _in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 7,
    "task": "Create a stored procedure to update the number of wins for a team in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to update the number of wins for a team in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE update_wins_by_team_in_year(_id_in IN VARCHAR2, _year_in IN INTEGER, _wins_in IN INTEGER) IS BEGIN UPDATE teams SET wins = _wins_in WHERE teamID = _id_in AND year = _year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE update_wins_by_team_in_year(_id_in STRING, _year_in INTEGER, _wins_in INTEGER) AS UPDATE teams SET wins = _wins_in WHERE teamID = _id_in AND year = _year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 8,
    "task": "Write a stored procedure to get the average weight of all players.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the average weight of all players.",
    "input": "CREATE OR REPLACE PROCEDURE get_average_weight_of_players(_avg_weight OUT NUMBER) IS BEGIN SELECT AVG(weight) INTO _avg_weight FROM players; END;",
    "output": "CREATE OR REPLACE PROCEDURE get_average_weight_of_players AS VAR _avg_weight FLOAT = (SELECT AVG(weight) FROM players); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 9,
    "task": "Create a stored procedure to get the number of ties for a team in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the number of ties for a team in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE total_ties_by_team_in_year(_in IN VARCHAR2, _year_in IN INTEGER, _ties OUT INTEGER) IS BEGIN SELECT ties INTO _ties FROM teams WHERE teamID = _in AND year = _year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE total_ties_by_team_in_year(_in STRING, _year_in INTEGER) AS VAR _ties INTEGER = (SELECT ties FROM teams WHERE teamID = _in AND year = _year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 10,
    "task": "Write a stored procedure in NuoDB SQL to get hockey player's full name given playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL to get hockey player's full name given playerID.",
    "input": "CREATE OR REPLACE PROCEDURE get_full_name(playerID_in IN VARCHAR2, full_name OUT VARCHAR2) IS BEGIN SELECT CONCAT(firstName, ' ', lastName) INTO full_name FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_full_name(in playerID_in String) AS VAR full_name String; full_name = (SELECT CONCAT(firstName, ' ', lastName) FROM players WHERE playerID = playerID_in); THROW full_name; END_PROCEDURE;"
  },
  {
    "number": 11,
    "task": "Write a NuoDB SQL Stored Procedure to get total career goals of a player given playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to get total career goals of a player given playerID.",
    "input": "CREATE OR REPLACE PROCEDURE get_total_goals(playerID_in IN VARCHAR2, total_goals OUT NUMBER) IS BEGIN SELECT SUM(goals) INTO total_goals FROM scoring WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_total_goals(in playerID_in String) AS VAR total_goals Integer; total_goals = (SELECT SUM(goals) FROM scoring WHERE playerID = playerID_in); THROW total_goals; END_PROCEDURE;"
  },
  {
    "number": 12,
    "task": "Create a stored procedure in NuoDB SQL that returns player's position from the 'players' table given playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure in NuoDB SQL that returns player's position from the 'players' table given playerID.",
    "input": "CREATE OR REPLACE PROCEDURE get_position(playerID_in IN VARCHAR2, position OUT VARCHAR2) IS BEGIN SELECT position INTO position FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_position(in playerID_in String) AS VAR position String; position = (SELECT position FROM players WHERE playerID = playerID_in); THROW position; END_PROCEDURE;"
  },
  {
    "number": 13,
    "task": "Write a stored procedure to get the birth date of a player in 'YYYY-MM-DD' format given playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the birth date of a player in 'YYYY-MM-DD' format given playerID.",
    "input": "CREATE OR REPLACE PROCEDURE get_birth_date(playerID_in IN VARCHAR2, birth_date OUT VARCHAR2) IS BEGIN SELECT TO_CHAR(birthDay || '-' || birthMon || '-' || birthYear, 'YYYY-MM-DD') INTO birth_date FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_birth_date(in playerID_in String) AS VAR birth_date String; birth_date = (SELECT CONCAT(birthYear, '-', birthMon, '-', birthDay) FROM players WHERE playerID = playerID_in); THROW birth_date; END_PROCEDURE;"
  },
  {
    "number": 14,
    "task": "Write a stored procedure to get total games played by a player in a given year, take playerID and year as arguments.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get total games played by a player in a given year, take playerID and year as arguments.",
    "input": "CREATE OR REPLACE PROCEDURE get_games_played(playerID_in IN VARCHAR2, year_in IN NUMBER, games_played OUT NUMBER) IS BEGIN SELECT SUM(gamesPlayed) INTO games_played FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_games_played(in playerID_in String, in year_in Integer) AS VAR games_played Integer; games_played = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW games_played; END_PROCEDURE;"
  },
  {
    "number": 15,
    "task": "Write a stored procedure to check if a player was active in a given year by examining scoring data.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to check if a player was active in a given year by examining scoring data.",
    "input": "CREATE OR REPLACE PROCEDURE was_active(playerID_in IN VARCHAR2, year_in IN NUMBER, active OUT NUMBER) IS BEGIN SELECT CASE WHEN COUNT(1) > 0 THEN 1 ELSE 0 END INTO active FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE was_active(in playerID_in String, in year_in Integer) AS VAR active Boolean; active = (SELECT COUNT(1) > 0 FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW active; END_PROCEDURE;"
  },
  {
    "number": 16,
    "task": "Create a stored procedure that calculates player's penalized minutes per game played in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates player's penalized minutes per game played in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE get_penalty_rate(playerID_in IN VARCHAR2, year_in IN NUMBER, penalty_rate OUT NUMBER) IS BEGIN SELECT SUM(penaltyMinutes) / SUM(gamesPlayed) INTO penalty_rate FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_penalty_rate(in playerID_in String, in year_in Integer) AS VAR penalty_rate Float; penalty_rate = (SELECT SUM(penaltyMinutes) / SUM(gamesPlayed) FROM scoring WHERE playerID = player_ID_in AND year = year_in); THROW penalty_rate; END_PROCEDURE;"
  },
  {
    "number": 17,
    "task": "Create a NuoDB Stored Procedure to find the birth country of the player by given playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB Stored Procedure to find the birth country of the player by given playerID.",
    "input": "CREATE OR REPLACE PROCEDURE get_birth_country(playerID_in IN VARCHAR2, birth_country OUT VARCHAR2) IS BEGIN SELECT birthCountry INTO birth_country FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_birth_country(in playerID_in String) AS VAR birth_country String; birth_country = (SELECT birthCountry FROM players WHERE playerID = playerID_in); THROW birth_country; END_PROCEDURE;"
  },
  {
    "number": 18,
    "task": "Write a stored procedure to find out if a player is a part of certain team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find out if a player is a part of certain team.",
    "input": "CREATE OR REPLACE PROCEDURE is_in_team(playerID_in IN VARCHAR2, teamID_in IN VARCHAR2, is_in_team OUT NUMBER) IS BEGIN SELECT CASE WHEN COUNT(1) > 0 THEN 1 ELSE 0 END INTO is_in_team FROM scoring WHERE playerID = playerID_in AND teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE is_in_team(in playerID_in String, in teamID_in String) AS VAR is_in_team Boolean; is_in_team = (SELECT COUNT(1) > 0 FROM scoring WHERE playerID = playerID_in AND teamID = teamID_in); THROW is_in_team; END_PROCEDURE;"
  },
  {
    "number": 19,
    "task": "Create a procedure that returns the year when a player first started in NHL.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure that returns the year when a player first started in NHL.",
    "input": "CREATE OR REPLACE PROCEDURE get_firstNHL_year(playerID_in IN VARCHAR2, firstNHL_year OUT NUMBER) IS BEGIN SELECT firstNHL INTO firstNHL_year FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_firstNHL_year(in playerID_in String) AS VAR firstNHL_year Integer; firstNHL_year = (SELECT firstNHL FROM players WHERE playerID = playerID_in); THROW firstNHL_year; END_PROCEDURE;"
  },
  {
    "number": 20,
    "task": "Create a stored procedure that calculates and returns a player's career length in NHL.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates and returns a player's career length in NHL.",
    "input": "CREATE OR REPLACE PROCEDURE get_career_length(playerID_in IN VARCHAR2, career_length OUT NUMBER) IS BEGIN SELECT lastNHL - firstNHL INTO career_length FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_career_length(in playerID_in String) AS VAR career_length Integer; career_length = (SELECT lastNHL - firstNHL FROM players WHERE playerID = playerID_in); THROW career_length; END_PROCEDURE;"
  },
  {
    "number": 21,
    "task": "Write a stored procedure to calculate the average number of goals per game played by a player in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to calculate the average number of goals per game played by a player in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE get_average_goals(playerID_in IN VARCHAR2, year_in IN NUMBER, avg_goals OUT NUMBER) IS BEGIN SELECT SUM(goals) / SUM(gamesPlayed) INTO avg_goals FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_average_goals(in playerID_in String, in year_in Integer) AS VAR avg_goals Float; avg_goals = (SELECT SUM(goals) / SUM(gamesPlayed) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW avg_goals; END_PROCEDURE;"
  },
  {
    "number": 22,
    "task": "Write a stored procedure to calculate a player's assists per game in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to calculate a player's assists per game in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE calculate_assists_rate(playerID_in IN VARCHAR2, year_in IN NUMBER, assists_rate OUT NUMBER) IS BEGIN SELECT SUM(assists) / SUM(gamesPlayed) INTO assists_rate FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE calculate_assists_rate(in playerID_in String, in year_in Integer) AS VAR assists_rate Float; assists_rate = (SELECT SUM(assists) / SUM(gamesPlayed) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW assists_rate; END_PROCEDURE;"
  },
  {
    "number": 23,
    "task": "Create a stored procedure that returns the number of different teams a player has played for in his career.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the number of different teams a player has played for in his career.",
    "input": "CREATE OR REPLACE PROCEDURE count_teams(playerID_in IN VARCHAR2, num_teams OUT NUMBER) IS BEGIN SELECT COUNT(DISTINCT teamID) INTO num_teams FROM scoring WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE count_teams(in playerID_in String) AS VAR num_teams Integer; num_teams = (SELECT COUNT(DISTINCT teamID) FROM scoring WHERE playerID = playerID_in); THROW num_teams; END_PROCEDURE;"
  },
  {
    "number": 24,
    "task": "Write a stored procedure to find out if a player has played for a specific team in his career.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find out if a player has played for a specific team in his career.",
    "input": "CREATE OR REPLACE PROCEDURE has_played_for(playerID_in IN VARCHAR2, teamID_in IN VARCHAR2, has_played OUT NUMBER) IS BEGIN SELECT CASE WHEN COUNT(1) > 0 THEN 1 ELSE 0 END INTO has_played FROM scoring WHERE playerID = playerID_in AND teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE has_played_for(in playerID_in String, in teamID_in String) AS VAR has_played Boolean; has_played = (SELECT COUNT(1) > 0 FROM scoring WHERE playerID = playerID_in AND teamID = teamID_in); THROW has_played; END_PROCEDURE;"
  },
  {
    "number": 25,
    "task": "Write a stored procedure to Calculate player's average weight over years.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to Calculate player's average weight over years.",
    "input": "CREATE OR REPLACE PROCEDURE get_average_weight(playerID_in IN VARCHAR2, avg_weight OUT NUMBER) IS BEGIN SELECT AVG(weight) INTO avg_weight FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_average_weight(in playerID_in String) AS VAR avg_weight Float; avg_weight = (SELECT AVG(weight) FROM players WHERE playerID = playerID_in); THROW avg_weight; END_PROCEDURE;"
  },
  {
    "number": 26,
    "task": "How to create a NuoDB SQL stored procedure that retrieves the average weight of players on a specified hockey team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL stored procedure that retrieves the average weight of players on a specified hockey team?",
    "input": "CREATE OR REPLACE PROCEDURE average_weight(teamId_in IN VARCHAR2, avg_weight OUT NUMBER) IS BEGIN SELECT AVG(players.weight) INTO avg_weight FROM players INNER JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamId_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE average_weight(teamId_in String) AS VAR avg_weight INTEGER = (SELECT AVG(weight) FROM players INNER JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamId_in); THROW avg_weight; END_PROCEDURE;"
  },
  {
    "number": 27,
    "task": "How to create a NuoDB SQL stored procedure that counts the number of players for a specific team who started playing hockey in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL stored procedure that counts the number of players for a specific team who started playing hockey in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE count_players_start_year(teamId_in IN VARCHAR2, start_year_in IN NUMBER, count_players OUT NUMBER) IS BEGIN SELECT COUNT() INTO count_players FROM players INNER JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamId_in AND players.firstNHL = start_year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE count_players_start_year(teamId_in String, start_year_in Integer) AS VAR count_players INTEGER = (SELECT COUNT() FROM players INNER JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamId_in AND players.firstNHL = start_year_in); THROW count_players; END_PROCEDURE;"
  },
  {
    "number": 28,
    "task": "How to create a NuoDB SQL stored procedure that calculates the total number of goals a player scored during a specific season?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL stored procedure that calculates the total number of goals a player scored during a specific season?",
    "input": "CREATE OR REPLACE PROCEDURE total_goals(playerId_in IN VARCHAR2, year_in IN NUMBER, total_goals OUT NUMBER) IS BEGIN SELECT SUM(goals) INTO total_goals FROM scoring WHERE playerID = playerId_in AND year = year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE total_goals(playerId_in String, year_in Integer) AS VAR total_goals INTEGER = (SELECT SUM(goals) FROM scoring WHERE playerID = playerId_in AND year = year_in); THROW total_goals; END_PROCEDURE;"
  },
  {
    "number": 29,
    "task": "How to create a NuoDB SQL stored procedure that retrieves the number of players born in a specific country?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL stored procedure that retrieves the number of players born in a specific country?",
    "input": "CREATE OR REPLACE PROCEDURE player_count_country(country_in IN VARCHAR2, player_count OUT NUMBER) IS BEGIN SELECT COUNT() INTO player_count FROM players WHERE birthCountry = country_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE player_count_country(country_in String) AS VAR player_count INTEGER = (SELECT COUNT() FROM players WHERE birthCountry = country_in); THROW player_count; END_PROCEDURE;"
  },
  {
    "number": 30,
    "task": "How can you create a stored procedure in NuoDB to return the name of a player based on their number in the hockey table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure in NuoDB to return the name of a player based on their number in the hockey table?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerNameByNumber(playerNumber_in IN NUMBER, playerName OUT VARCHAR2) IS BEGIN SELECT Name INTO playerName FROM hockey WHERE Number = playerNumber_in; END;",
    "output": "CREATE PROCEDURE getPlayerNameByNumber(IN playerNumber_in Integer) AS VAR playerName String = (SELECT Name FROM hockey WHERE Number = playerNumber_in); THROW playerName; END_PROCEDURE;"
  },
  {
    "number": 31,
    "task": "How to write a stored procedure in NuoDB to get the average weight of players from a specific country?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure in NuoDB to get the average weight of players from a specific country?",
    "input": "CREATE OR REPLACE PROCEDURE getAveragePlayerWeightByCountry(countryName_in IN VARCHAR2, avgWeight OUT NUMBER) IS BEGIN SELECT AVG(weight) INTO avgWeight FROM players WHERE birthCountry = countryName_in; END;",
    "output": "CREATE PROCEDURE getAveragePlayerWeightByCountry(IN countryName_in String) AS VAR avgWeight Integer = (SELECT AVG(weight) FROM players WHERE birthCountry = countryName_in); THROW avgWeight; END_PROCEDURE;"
  },
  {
    "number": 32,
    "task": "How can you create a stored procedure in NuoDB to return the total number of games played by a player based on their playerID in the scoring table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure in NuoDB to return the total number of games played by a player based on their playerID in the scoring table?",
    "input": "CREATE OR REPLACE PROCEDURE getTotalGamesPlayedByPlayerId(playerId_in IN VARCHAR2, totalGames OUT NUMBER) IS BEGIN SELECT SUM(gamesPlayed) INTO totalGames FROM scoring WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE getTotalGamesPlayedByPlayerId(IN playerId_in String) AS VAR totalGames Integer = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = playerId_in); THROW totalGames; END_PROCEDURE;"
  },
  {
    "number": 33,
    "task": "How to write a stored procedure to return the team name where player with specified playerID played at?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure to return the team name where player with specified playerID played at?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamsByPlayerId(playerId_in IN VARCHAR2, teamName OUT VARCHAR2) IS BEGIN SELECT teamID INTO teamName FROM scoring WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE getTeamsByPlayerId(IN playerId_in String) AS VAR teamName String = (SELECT teamID FROM scoring WHERE playerID = playerId_in); THROW teamName; END_PROCEDURE;"
  },
  {
    "number": 34,
    "task": "How can you create a stored procedure that gives the position of a given playerID in the scoring table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure that gives the position of a given playerID in the scoring table?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerPositionByPlayerId(playerId_in IN VARCHAR2, position OUT VARCHAR2) IS BEGIN SELECT position INTO position FROM scoring WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE getPlayerPositionByPlayerId(IN playerId_in String) AS VAR position String = (SELECT position FROM scoring WHERE playerID = playerId_in); THROW position; END_PROCEDURE;"
  },
  {
    "number": 35,
    "task": "How to write a stored procedure that returns the number of wins by a specific team in the teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure that returns the number of wins by a specific team in the teams table?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamWinsByTeamId(teamId_in IN VARCHAR2, wins OUT NUMBER) IS BEGIN SELECT wins INTO wins FROM teams WHERE teamID = teamId_in; END;",
    "output": "CREATE PROCEDURE getTeamWinsByTeamId(IN teamId_in String) AS VAR wins Integer = (SELECT wins FROM teams WHERE teamID = teamId_in); THROW wins; END_PROCEDURE;"
  },
  {
    "number": 36,
    "task": "How can you create a stored procedure to get the rank of a team for a specific year in the teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure to get the rank of a team for a specific year in the teams table?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamRankByYearAndTeamId(year_in IN NUMBER, teamId_in IN VARCHAR2, rank OUT NUMBER) IS BEGIN SELECT rank INTO rank FROM teams WHERE year = year_in AND teamID = teamId_in; END;",
    "output": "CREATE PROCEDURE getTeamRankByYearAndTeamId(IN year_in Integer, IN teamId_in String) AS VAR rank Integer = (SELECT rank FROM teams WHERE year = year_in AND teamID = teamId_in); THROW rank; END_PROCEDURE;"
  },
  {
    "number": 37,
    "task": "How to write a stored procedure to get the firstNHL year of a player by playerID from players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure to get the firstNHL year of a player by playerID from players table?",
    "input": "CREATE OR REPLACE PROCEDURE getFirstNHLYearByPlayerId(playerId_in IN VARCHAR2, firstYear OUT NUMBER) IS BEGIN SELECT firstNHL INTO firstYear FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE getFirstNHLYearByPlayerId(IN playerId_in String) AS VAR firstYear Integer = (SELECT firstNHL FROM players WHERE playerID = playerId_in); THROW firstYear; END_PROCEDURE;"
  },
  {
    "number": 38,
    "task": "How can you create a stored procedure to get the lastNHL year of a player by playerID from players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure to get the lastNHL year of a player by playerID from players table?",
    "input": "CREATE OR REPLACE PROCEDURE getLastNHLYearByPlayerId(playerId_in IN VARCHAR2, lastYear OUT NUMBER) IS BEGIN SELECT lastNHL INTO lastYear FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE getLastNHLYearByPlayerId(IN playerId_in String) AS VAR lastYear Integer = (SELECT lastNHL FROM players WHERE playerID = playerId_in); THROW lastYear; END_PROCEDURE;"
  },
  {
    "number": 39,
    "task": "How to write a stored procedure to get the height of a player by playerID from players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure to get the height of a player by playerID from players table?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerHeightByPlayerId(playerId_in IN VARCHAR2, height OUT NUMBER) IS BEGIN SELECT height INTO height FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE getPlayerHeightByPlayerId(IN playerId_in String) AS VAR height Integer = (SELECT height FROM players WHERE playerID = playerId_in); THROW height; END_PROCEDURE;"
  },
  {
    "number": 40,
    "task": "How can you create a stored procedure that fetches the name of all teams a specific playerID has played for?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure that fetches the name of all teams a specific playerID has played for?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerTeams(playerId_in IN VARCHAR2, teamsList OUT VARCHAR2) IS BEGIN SELECT teamID INTO teamsList FROM scoring WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE getPlayerTeams(IN playerId_in String) AS VAR teamsList String = (SELECT teamID FROM scoring WHERE playerID = playerId_in); THROW teamsList; END_PROCEDURE;"
  },
  {
    "number": 41,
    "task": "How to write a stored procedure that fetches goals scored by a given playerID for a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure that fetches goals scored by a given playerID for a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerGoals(playerId_in IN VARCHAR2, year_in IN NUMBER, goals OUT NUMBER) IS BEGIN SELECT goals INTO goals FROM scoring WHERE playerID = playerId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE getPlayerGoals(IN playerId_in String, IN year_in Integer) AS VAR goals Integer = (SELECT goals FROM scoring WHERE playerID = playerId_in AND year = year_in); THROW goals; END_PROCEDURE;"
  },
  {
    "number": 42,
    "task": "How can you create a stored procedure that fetches assists made by a given playerID for a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure that fetches assists made by a given playerID for a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerAssists(playerId_in IN VARCHAR2, year_in IN NUMBER, assists OUT NUMBER) IS BEGIN SELECT assists INTO assists FROM scoring WHERE playerID = playerId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE getPlayerAssists(IN playerId_in String, IN year_in Integer) AS VAR assists Integer = (SELECT assists FROM scoring WHERE playerID = playerId_in AND year = year_in); THROW assists; END_PROCEDURE;"
  },
  {
    "number": 43,
    "task": "How to write a stored procedure that fetches the birth country of a player by their playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure that fetches the birth country of a player by their playerID?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerBirthCountry(playerId_in IN VARCHAR2, birthCountry OUT VARCHAR2) IS BEGIN SELECT birthCountry INTO birthCountry FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE getPlayerBirthCountry(IN playerId_in String) AS VAR birthCountry String = (SELECT birthCountry FROM players WHERE playerID = playerId_in); THROW birthCountry; END_PROCEDURE;"
  },
  {
    "number": 44,
    "task": "How can you create a stored procedure that fetches the birth city and state of a player by their playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure that fetches the birth city and state of a player by their playerID?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerBirthCityState(playerId_in IN VARCHAR2, birthPlace OUT VARCHAR2) IS BEGIN SELECT birthCity || ', ' || birthState INTO birthPlace FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE getPlayerBirthCityState(IN playerId_in String) AS VAR birthCity String = (SELECT birthCity FROM players WHERE playerID = playerId_in), birthState String = (SELECT birthState FROM players WHERE playerID = playerId_in); THROW birthCity || ', ' || birthState ; END_PROCEDURE;"
  },
  {
    "number": 45,
    "task": "How to write a stored procedure that fetches the positions a player with a given playerID has played for?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure that fetches the positions a player with a given playerID has played for?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerPositions(playerId_in IN VARCHAR2, positions OUT VARCHAR2) IS BEGIN SELECT DISTINCT position INTO positions FROM scoring WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE getPlayerPositions(IN playerId_in String) AS VAR positions String = (SELECT DISTINCT position FROM scoring WHERE playerID = playerId_in); THROW positions; END_PROCEDURE;"
  },
  {
    "number": 46,
    "task": "How can you create a stored procedure that fetches the penalty minutes of a player by their playerID for a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure that fetches the penalty minutes of a player by their playerID for a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerPenaltyMinutes(playerId_in IN VARCHAR2, year_in IN NUMBER, penaltyMinutes OUT NUMBER) IS BEGIN SELECT penaltyMinutes INTO penaltyMinutes FROM scoring WHERE playerID = playerId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE getPlayerPenaltyMinutes(IN playerId_in String, IN year_in Integer) AS VAR penaltyMinutes Integer = (SELECT penaltyMinutes FROM scoring WHERE playerID = playerId_in AND year = year_in); THROW penaltyMinutes; END_PROCEDURE;"
  },
  {
    "number": 47,
    "task": "How to write a procedure that updates the weight of a player by their playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a procedure that updates the weight of a player by their playerID?",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerWeight(playerId_in IN VARCHAR2, weight_in IN NUMBER) IS BEGIN UPDATE players SET weight=weight_in WHERE playerID=playerId_in; END;",
    "output": "CREATE PROCEDURE updatePlayerWeight(IN playerId_in String, IN weight_in Integer) AS UPDATE players SET weight=weight_in WHERE playerID=playerId_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 48,
    "task": "How can you create a stored procedure that updates the position of a player for a specific year by their playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure that updates the position of a player for a specific year by their playerID?",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerPosition(playerId_in IN VARCHAR2, position_in IN VARCHAR2, year_in IN NUMBER) IS BEGIN UPDATE scoring SET position=position_in WHERE playerID=playerId_in AND year=year_in; END;",
    "output": "CREATE PROCEDURE updatePlayerPosition(IN playerId_in String, IN position_in String, IN year_in Integer) AS UPDATE scoring SET position=position_in WHERE playerID=playerId_in AND year=year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 49,
    "task": "How to write a procedure that updates the team of a player for a specific year by their playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a procedure that updates the team of a player for a specific year by their playerID?",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerTeam(playerId_in IN VARCHAR2, teamId_in IN VARCHAR2, year_in IN NUMBER) IS BEGIN UPDATE scoring SET teamID=teamId_in WHERE playerID=playerId_in AND year=year_in; END;",
    "output": "CREATE PROCEDURE updatePlayerTeam(IN playerId_in String, IN teamId_in String, IN year_in Integer) AS UPDATE scoring SET teamID=teamId_in WHERE playerID=playerId_in AND year=year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 50,
    "task": "Generate a stored procedure that retrieves the first and last name of a player by their player's ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a stored procedure that retrieves the first and last name of a player by their player's ID.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_name(playerID_in IN VARCHAR2, fullName OUT VARCHAR2) IS BEGIN SELECT firstName || ' ' || lastName INTO fullName FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_player_name(IN playerID_in STRING) AS VAR firstName STRING, lastName STRING; firstName, lastName = (SELECT firstName, lastName FROM players WHERE playerID = playerID_in); THROW firstName || ' ' || lastName; END_PROCEDURE;"
  },
  {
    "number": 51,
    "task": "Set up a stored procedure to find a player's height and weight using their ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Set up a stored procedure to find a player's height and weight using their ID.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_height_weight(playerID_in IN VARCHAR2, playerDetails OUT VARCHAR2) IS BEGIN SELECT height || ' ' || weight INTO playerDetails FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_player_height_weight(IN playerID_in STRING) AS VAR playerHeight INTEGER, playerWeight INTEGER; playerHeight, playerWeight = (SELECT height, weight FROM players WHERE playerID = playerID_in); THROW playerHeight || ' ' || playerWeight; END_PROCEDURE;"
  },
  {
    "number": 52,
    "task": "Create a stored procedure that finds a team's rank and the number of games they played, given the team's ID and the year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that finds a team's rank and the number of games they played, given the team's ID and the year.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_rank_games(teamID_in IN VARCHAR2, year_in IN NUMBER, teamDetails OUT VARCHAR2) IS BEGIN SELECT rank || ' ' || games INTO teamDetails FROM teams WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_team_rank_games(IN teamID_in STRING, IN year_in INTEGER) AS VAR teamRank INTEGER, teamGames INTEGER; teamRank, teamGames = (SELECT rank, games FROM teams WHERE teamID = teamID_in AND year = year_in); THROW teamRank || ' ' || teamGames; END_PROCEDURE;"
  },
  {
    "number": 53,
    "task": "Build a stored procedure that retrieves the number of goals and assists a player made in a given year, using their player's ID, team's ID and position.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Build a stored procedure that retrieves the number of goals and assists a player made in a given year, using their player's ID, team's ID and position.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_goals_assists(playerID_in IN VARCHAR2, year_in IN NUMBER, teamID_in IN VARCHAR2, position_in IN VARCHAR2, playerStats OUT VARCHAR2) IS BEGIN SELECT goals || ' ' || assists INTO playerStats FROM scoring WHERE playerID = playerID_in AND year = year_in AND teamID = teamID_in AND position = position_in; END;",
    "output": "CREATE PROCEDURE get_player_goals_assists(IN playerID_in STRING, IN year_in INTEGER, IN teamID_in STRING, IN position_in STRING) AS VAR playerGoals INTEGER, playerAssists INTEGER; playerGoals, playerAssists = (SELECT goals, assists FROM scoring WHERE playerID = playerID_in AND year = year_in AND teamID = teamID_in AND position = position_in); THROW playerGoals || ' ' || playerAssists; END_PROCEDURE;"
  },
  {
    "number": 54,
    "task": "Develop a stored procedure that retrieves a player's birth date as year, month, and day using their player's ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Develop a stored procedure that retrieves a player's birth date as year, month, and day using their player's ID.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birthdate(playerID_in IN VARCHAR2, birthDate OUT VARCHAR2) IS BEGIN SELECT birthYear || '-' || birthMon || '-' || birthDay INTO birthDate FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_player_birthdate(IN playerID_in STRING) AS VAR birthYear INTEGER, birthMon INTEGER, birthDay INTEGER; birthYear, birthMon, birthDay = (SELECT birthYear, birthMon, birthDay FROM players WHERE playerID = playerID_in); THROW birthYear || '-' || birthMon || '-' || birthDay; END_PROCEDURE;"
  },
  {
    "number": 55,
    "task": "Set up a stored procedure that retrieves the total number of games, wins, losses and ties for a specific team in a certain year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Set up a stored procedure that retrieves the total number of games, wins, losses and ties for a specific team in a certain year.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_record(teamID_in IN VARCHAR2, year_in IN NUMBER, teamRecord OUT VARCHAR2) IS BEGIN SELECT games || ', ' || wins || ', ' || losses || ', ' || ties INTO teamRecord FROM teams WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_team_record(IN teamID_in STRING, IN year_in INTEGER) AS VAR teamGames INTEGER, teamWins INTEGER, teamLosses INTEGER, teamTies INTEGER; teamGames, teamWins, teamLosses, teamTies = (SELECT games, wins, losses, ties FROM teams WHERE teamID = teamID_in AND year = year_in); THROW teamGames || ', ' || teamWins || ', ' || teamLosses || ', ' || teamTies; END_PROCEDURE;"
  },
  {
    "number": 56,
    "task": "Create a stored procedure that returns the number of penalty minutes a player has acquired in a given year playing for a certain team in a defined position.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the number of penalty minutes a player has acquired in a given year playing for a certain team in a defined position.",
    "input": "CREATE OR REPLACE PROCEDURE get_penalty_minutes(playerID_in IN VARCHAR2, year_in IN NUMBER, stint_in IN NUMBER, teamID_in IN VARCHAR2, position_in IN VARCHAR2, penaltyMinutes OUT NUMBER) IS BEGIN SELECT penaltyMinutes INTO penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in AND position = position_in; END;",
    "output": "CREATE PROCEDURE get_penalty_minutes(IN playerID_in STRING, IN year_in INTEGER, IN stint_in INTEGER, IN teamID_in STRING, IN position_in STRING) AS VAR penaltyMinutes INTEGER; penaltyMinutes = (SELECT penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in AND position = position_in); THROW penaltyMinutes; END_PROCEDURE;"
  },
  {
    "number": 57,
    "task": "Create a stored procedure to fetch player’s entire information when specific playerID is provided.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to fetch player’s entire information when specific playerID is provided.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_info(playerID_in IN VARCHAR2, playerInfo OUT VARCHAR2) IS BEGIN SELECT firstName || ',' || lastName || ',' || height || ',' || weight || ',' || firstNHL || ',' || lastNHL || ',' || position || ',' || birthYear || ',' || birthMon || ',' || birthDay || ',' || birthCountry || ',' || birthState || ',' || birthCity INTO playerInfo FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_player_info(IN playerID_in STRING) AS VAR firstName STRING, lastName STRING, height INTEGER, weight INTEGER, firstNHL INTEGER, lastNHL INTEGER, position STRING, birthYear INTEGER, birthMon INTEGER, birthDay INTEGER, birthCountry STRING, birthState STRING, birthCity STRING; firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity = (SELECT firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity FROM players WHERE playerID = playerID_in); THROW firstName || ',' || lastName || ',' || height || ',' || weight || ',' || firstNHL || ',' || lastNHL || ',' || position || ',' || birthYear || ',' || birthMon || ',' || birthDay || ',' || birthCountry || ',' || birthState || ',' || birthCity; END_PROCEDURE;"
  },
  {
    "number": 58,
    "task": "Write a stored procedure to fetch a team’s complete information from the 'teams' table using teamID and year as parameters.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to fetch a team’s complete information from the 'teams' table using teamID and year as parameters.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_info(teamID_in IN VARCHAR2, year_in IN NUMBER, teamInfo OUT VARCHAR2) IS BEGIN SELECT name || ',' || conferenceID || ',' || divisionID || ',' || rank || ',' || playoff || ',' || games || ',' || wins || ',' || losses || ',' || ties || ',' || overtimeLosses INTO teamInfo FROM teams WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_team_info(IN teamID_in STRING, IN year_in INTEGER) AS VAR teamName STRING, conferenceID STRING, divisionID STRING, rank INTEGER, playoff STRING, games INTEGER, wins INTEGER, losses INTEGER, ties INTEGER, overtimeLosses INTEGER; teamName, conferenceID, divisionID, rank, playoff, games, wins, losses, ties, overtimeLosses = (SELECT name, conferenceID, divisionID, rank, playoff, games, wins, losses, ties, overtimeLosses FROM teams WHERE teamID = teamID_in AND year = year_in); THROW teamName || ',' || conferenceID || ',' || divisionID || ',' || rank || ',' || playoff || ',' || games || ',' || wins || ',' || losses || ',' || ties || ',' || overtimeLosses; END_PROCEDURE;"
  },
  {
    "number": 59,
    "task": "Set up a stored procedure to retrieve all information of a player's scoring progress in a stint for a particular team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Set up a stored procedure to retrieve all information of a player's scoring progress in a stint for a particular team.",
    "input": "CREATE OR REPLACE PROCEDURE get_scoring_info(playerID_in IN VARCHAR2, year_in IN NUMBER, stint_in IN NUMBER, teamID_in IN VARCHAR2, position_in IN VARCHAR2, scoringInfo OUT VARCHAR2) IS BEGIN SELECT gamesPlayed || ', ' || goals || ', ' || assists || ', ' || penaltyMinutes INTO scoringInfo FROM scoring WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in AND position = position_in; END;",
    "output": "CREATE PROCEDURE get_scoring_info(IN playerID_in STRING, IN year_in INTEGER, IN stint_in INTEGER, IN teamID_in STRING, IN position_in STRING) AS VAR gamesPlayed INTEGER, goals INTEGER, assists INTEGER, penaltyMinutes INTEGER; gamesPlayed, goals, assists, penaltyMinutes = (SELECT gamesPlayed, goals, assists, penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in AND position = position_in); THROW gamesPlayed || ', ' || goals || ', ' || assists || ', ' || penaltyMinutes; END_PROCEDURE;"
  },
  {
    "number": 60,
    "task": "Construct a stored procedure that gets the height and weight of a player by their first name, using a wildcard to allow search by partial name.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Construct a stored procedure that gets the height and weight of a player by their first name, using a wildcard to allow search by partial name.",
    "input": "CREATE OR REPLACE PROCEDURE get_height_weight_by_name(firstName_in IN VARCHAR2, height OUT NUMBER, weight OUT NUMBER) IS BEGIN SELECT height, weight INTO height, weight FROM players WHERE firstName LIKE firstName_in || '%'; END;",
    "output": "CREATE PROCEDURE get_height_weight_by_name(IN firstName_in STRING) AS VAR height INTEGER, weight INTEGER; height, weight = (SELECT height, weight FROM players WHERE firstName LIKE firstName_in || '%'); THROW height || ', ' || weight; END_PROCEDURE;"
  },
  {
    "number": 61,
    "task": "Write a stored procedure to retrieve the name, position, and team of a Hockey player using the unique ID of the player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to retrieve the name, position, and team of a Hockey player using the unique ID of the player.",
    "input": "CREATE OR REPLACE PROCEDURE get_hockey_player_details(id_in IN NUMBER, playerName OUT VARCHAR2, playerPosition OUT VARCHAR2, playerTeam OUT VARCHAR2) IS BEGIN SELECT Name, Position, Team INTO playerName, playerPosition, playerTeam FROM Hockey WHERE Id = id_in; END;",
    "output": "CREATE PROCEDURE get_hockey_player_details(IN id_in BIGINT) AS VAR playerName STRING, playerPosition STRING, playerTeam STRING; playerName, playerPosition, playerTeam = (SELECT Name, Position, Team FROM Hockey WHERE Id = id_in); THROW playerName || ',' || playerPosition || ',' || playerTeam; END_PROCEDURE;"
  },
  {
    "number": 62,
    "task": "Create a stored procedure to find a player's first NHL year and the last NHL year using their player's ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find a player's first NHL year and the last NHL year using their player's ID.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_NHL_years(playerID_in IN VARCHAR2, firstNHL OUT NUMBER, lastNHL OUT NUMBER) IS BEGIN SELECT firstNHL, lastNHL INTO firstNHL, lastNHL FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_player_NHL_years(IN playerID_in STRING) AS VAR firstNHL INTEGER, lastNHL INTEGER; firstNHL, lastNHL = (SELECT firstNHL, lastNHL FROM players WHERE playerID = playerID_in); THROW firstNHL || ', ' || lastNHL; END_PROCEDURE;"
  },
  {
    "number": 63,
    "task": "Generate a stored procedure that retrieves the team's conference and division IDs given the team's ID and the year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a stored procedure that retrieves the team's conference and division IDs given the team's ID and the year.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_conference_division(teamID_in IN VARCHAR2, year_in IN NUMBER, conferenceID OUT VARCHAR2, divisionID OUT VARCHAR2) IS BEGIN SELECT conferenceID, divisionID INTO conferenceID, divisionID FROM teams WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_team_conference_division(IN teamID_in STRING, IN year_in INTEGER) AS VAR conferenceID STRING, divisionID STRING; conferenceID, divisionID = (SELECT conferenceID, divisionID FROM teams WHERE teamID = teamID_in AND year = year_in); THROW conferenceID || ', ' || divisionID; END_PROCEDURE;"
  },
  {
    "number": 64,
    "task": "Set up a stored procedure to get the birthplace (country, state, city) of a player using their player's ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Set up a stored procedure to get the birthplace (country, state, city) of a player using their player's ID.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birthplace(playerID_in IN VARCHAR2, birthCountry OUT VARCHAR2, birthState OUT VARCHAR2, birthCity OUT VARCHAR2) IS BEGIN SELECT birthCountry, birthState, birthCity INTO birthCountry, birthState, birthCity FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE get_player_birthplace(IN playerID_in STRING) AS VAR birthCountry STRING, birthState STRING, birthCity STRING; birthCountry, birthState, birthCity = (SELECT birthCountry, birthState, birthCity FROM players WHERE playerID = playerID_in); THROW birthCountry || ', ' || birthState || ', ' || birthCity; END_PROCEDURE;"
  },
  {
    "number": 65,
    "task": "Create a stored procedure that fetches the number of games played, goals scored and assists made by a player in a specific position for a team in a designated year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that fetches the number of games played, goals scored and assists made by a player in a specific position for a team in a designated year.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_performance(playerID_in IN VARCHAR2, year_in IN NUMBER, stint_in IN NUMBER, teamID_in IN VARCHAR2, position_in IN VARCHAR2, gamesPlayed OUT NUMBER, goals OUT NUMBER, assists OUT NUMBER) IS BEGIN SELECT gamesPlayed, goals, assists INTO gamesPlayed, goals, assists FROM scoring WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in AND position = position_in; END;",
    "output": "CREATE PROCEDURE get_player_performance(IN playerID_in STRING, IN year_in INTEGER, IN stint_in INTEGER, IN teamID_in STRING, IN position_in STRING) AS VAR gamesPlayed INTEGER, goals INTEGER, assists INTEGER; gamesPlayed, goals, assists = (SELECT gamesPlayed, goals, assists FROM scoring WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in AND position = position_in); THROW gamesPlayed || ', ' || goals || ', ' || assists; END_PROCEDURE;"
  },
  {
    "number": 66,
    "task": "Create a stored procedure to insert a new record into the 'teams' table. The procedure should take 'year', 'teamID', 'name', 'conferenceID', 'divisionID', 'rank', 'games', 'wins', 'losses' and 'ties' as input parameters.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to insert a new record into the 'teams' table. The procedure should take 'year', 'teamID', 'name', 'conferenceID', 'divisionID', 'rank', 'games', 'wins', 'losses' and 'ties' as input parameters.",
    "input": "CREATE OR REPLACE PROCEDURE insertTeamsRecord(year_in IN NUMBER, teamID_in IN VARCHAR2, name_in IN VARCHAR2, conferenceID_in IN VARCHAR2, divisionID_in IN VARCHAR2, rank_in IN NUMBER, games_in IN NUMBER, wins_in IN NUMBER, losses_in IN NUMBER, ties_in IN NUMBER) IS BEGIN INSERT INTO teams(year, teamID, name, conferenceID, divisionID, rank, games, wins, losses, ties) VALUES(year_in, teamID_in, name_in, conferenceID_in, divisionID_in, rank_in, games_in, wins_in, losses_in, ties_in); COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE insertTeamsRecord(year_in integer, teamID_in String, name_in String, conferenceID_in String, divisionID_in String, rank_in integer, games_in integer, wins_in integer, losses_in integer, ties_in integer) AS INSERT INTO teams(year, teamID, name, conferenceID, divisionID, rank, games, wins, losses, ties) VALUES(year_in, teamID_in, name_in, conferenceID_in, divisionID_in, rank_in, games_in, wins_in, losses_in, ties_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 67,
    "task": "Create a stored procedure to delete a record in the 'scoring' table using 'playerID', 'year', 'stint', 'teamID' and 'position' as input parameters.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to delete a record in the 'scoring' table using 'playerID', 'year', 'stint', 'teamID' and 'position' as input parameters.",
    "input": "CREATE OR REPLACE PROCEDURE deleteScoringRecord(playerID_in IN VARCHAR2, year_in IN NUMBER, stint_in IN NUMBER, teamID_in IN VARCHAR2, position_in IN VARCHAR2) IS BEGIN DELETE FROM scoring WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in AND position = position_in; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE deleteScoringRecord(playerID_in String, year_in integer, stint_in integer, teamID_in String, position_in String) AS DELETE FROM scoring WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in AND position = position_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 68,
    "task": "Create a stored procedure to retrieve the height and weight of a player using 'playerID' as an input parameter.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to retrieve the height and weight of a player using 'playerID' as an input parameter.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerHeightWeight(playerID_in IN VARCHAR2, height OUT NUMBER, weight OUT NUMBER) IS BEGIN SELECT height,weight INTO height,weight FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerHeightWeight(playerID_in String) AS VAR height integer, weight integer; height,weight = (SELECT height,weight FROM players WHERE playerID = playerID_in); THROW height || ' ' || weight; END_PROCEDURE;"
  },
  {
    "number": 69,
    "task": "Create a stored procedure that calculates the average height of all the players from a specific birthCountry as input.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the average height of all the players from a specific birthCountry as input.",
    "input": "CREATE OR REPLACE PROCEDURE calculateAverageHeight(birthCountry_in IN VARCHAR2, avgHeight OUT NUMBER) IS BEGIN SELECT AVG(height) INTO avgHeight FROM players WHERE birthCountry = birthCountry_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE calculateAverageHeight(birthCountry_in String) AS VAR avgHeight INTEGER = (SELECT AVG(height) FROM players WHERE birthCountry = birthCountry_in); THROW avgHeight; END_PROCEDURE;"
  },
  {
    "number": 68,
    "task": "Create a stored procedure to retrieve the height and weight of a player using 'playerID' as an input parameter.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to retrieve the height and weight of a player using 'playerID' as an input parameter.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerHeightWeight(playerID_in IN VARCHAR2, height OUT NUMBER, weight OUT NUMBER) IS BEGIN SELECT height,weight INTO height,weight FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerHeightWeight(playerID_in String) AS VAR height integer, weight integer; height,weight = (SELECT height,weight FROM players WHERE playerID = playerID_in); THROW height || ' ' || weight; END_PROCEDURE;"
  },
  {
    "number": 69,
    "task": "Create a stored procedure that calculates the average height of all the players from a specific birthCountry as input.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the average height of all the players from a specific birthCountry as input.",
    "input": "CREATE OR REPLACE PROCEDURE calculateAverageHeight(birthCountry_in IN VARCHAR2, avgHeight OUT NUMBER) IS BEGIN SELECT AVG(height) INTO avgHeight FROM players WHERE birthCountry = birthCountry_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE calculateAverageHeight(birthCountry_in String) AS VAR avgHeight INTEGER = (SELECT AVG(height) FROM players WHERE birthCountry = birthCountry_in); THROW avgHeight; END_PROCEDURE;"
  },
  {
    "number": 70,
    "task": "Create a stored procedure to insert a new record into 'Hockey' table. The procedure should take 'Number', 'Name', 'Position', and 'Team' as input parameters.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to insert a new record into 'Hockey' table. The procedure should take 'Number', 'Name', 'Position', and 'Team' as input parameters.",
    "input": "CREATE OR REPLACE PROCEDURE insertHockeyRecord(Number_in IN NUMBER, Name_in IN VARCHAR2, Position_in IN VARCHAR2, Team_in IN VARCHAR2) IS BEGIN INSERT INTO Hockey(Number, Name, Position, Team) VALUES(Number_in, Name_in, Position_in, Team_in); COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE insertHockeyRecord(Number_in Integer, Name_in String, Position_in String, Team_in String) AS INSERT INTO Hockey(Number, Name, Position, Team) VALUES(Number_in, Name_in, Position_in, Team_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 71,
    "task": "Create a stored procedure to delete a record from 'Hockey' table using 'Id' as an input parameter.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to delete a record from 'Hockey' table using 'Id' as an input parameter.",
    "input": "CREATE OR REPLACE PROCEDURE deleteHockeyRecord(Id_in IN NUMBER) IS BEGIN DELETE FROM Hockey WHERE Id = Id_in; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE deleteHockeyRecord(Id_in BIGINT) AS DELETE FROM Hockey WHERE Id = Id_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 72,
    "task": "Create a stored procedure to retrieve the details of a player from 'Hockey' table using 'Number' as an input parameter.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to retrieve the details of a player from 'Hockey' table using 'Number' as an input parameter.",
    "input": "CREATE OR REPLACE PROCEDURE getHockeyPlayerDetails(Number_in IN NUMBER, Id OUT NUMBER, Name OUT VARCHAR2, Position OUT VARCHAR2, Team OUT VARCHAR2) IS BEGIN SELECT Id, Name, Position, Team INTO Id, Name, Position, Team FROM Hockey WHERE Number = Number_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getHockeyPlayerDetails(Number_in Integer) AS VAR Id BIGINT, Name String, Position String, Team String; Id, Name, Position, Team = (SELECT Id, Name, Position, Team FROM Hockey WHERE Number = Number_in); THROW Id || ' ' || Name || ' ' || Position || ' ' || Team; END_PROCEDURE;"
  },
  {
    "number": 73,
    "task": "Create a stored procedure that counts the number of teams in a given year. Input parameter is 'year'.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that counts the number of teams in a given year. Input parameter is 'year'.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamCountByYear(year_in IN NUMBER, teamCount OUT NUMBER) IS BEGIN SELECT COUNT(*) INTO teamCount FROM teams WHERE year = year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getTeamCountByYear(year_in integer) AS VAR teamCount INTEGER = (SELECT COUNT(*) FROM teams WHERE year = year_in); THROW teamCount; END_PROCEDURE;"
  },
  {
    "number": 74,
    "task": "Create a stored procedure to insert a new record into 'scoring' table. The procedure should take 'playerID', 'year', 'stint', 'teamID', 'position', 'gamesPlayed', 'goals', 'assists' and 'penaltyMinutes' as input parameters.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to insert a new record into 'scoring' table. The procedure should take 'playerID', 'year', 'stint', 'teamID', 'position', 'gamesPlayed', 'goals', 'assists' and 'penaltyMinutes' as input parameters.",
    "input": "CREATE OR REPLACE PROCEDURE insertScoringRecord(playerID_in IN VARCHAR2, year_in IN NUMBER, stint_in IN NUMBER, teamID_in IN VARCHAR2, position_in IN VARCHAR2, gamesPlayed_in IN NUMBER, goals_in IN NUMBER, assists_in IN NUMBER, penaltyMinutes_in IN NUMBER) IS BEGIN INSERT INTO scoring(playerID, year, stint, teamID, position, gamesPlayed, goals, assists, penaltyMinutes) VALUES(playerID_in, year_in, stint_in, teamID_in, position_in, gamesPlayed_in, goals_in, assists_in, penaltyMinutes_in); COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE insertScoringRecord(playerID_in String, year_in integer, stint_in integer, teamID_in String, position_in String, gamesPlayed_in integer, goals_in integer, assists_in integer, penaltyMinutes_in integer) AS INSERT INTO scoring(playerID, year, stint, teamID, position, gamesPlayed, goals, assists, penaltyMinutes) VALUES(playerID_in, year_in, stint_in, teamID_in, position_in, gamesPlayed_in, goals_in, assists_in, penaltyMinutes_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 75,
    "task": "Create a stored procedure to retrieve the total goals scored by a player in a specific year from 'scoring' table. The procedure should take 'playerID' and 'year' as input parameters.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to retrieve the total goals scored by a player in a specific year from 'scoring' table. The procedure should take 'playerID' and 'year' as input parameters.",
    "input": "CREATE OR REPLACE PROCEDURE getTotalGoals(playerID_in IN VARCHAR2, year_in IN NUMBER, totalGoals OUT NUMBER) IS BEGIN SELECT SUM(goals) INTO totalGoals FROM scoring WHERE playerID = playerID_in and year = year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getTotalGoals(playerID_in String, year_in integer) AS VAR totalGoals INTEGER = (SELECT SUM(goals) FROM scoring\tWHERE playerID = playerID_in and year = year_in); THROW totalGoals; END_PROCEDURE;"
  },
  {
    "number": 76,
    "task": "Create a stored procedure to insert a new record into 'players' table. The procedure should take 'playerID', 'firstName', 'lastName', 'height', 'weight', 'firstNHL', 'lastNHL', 'position', 'birthYear', 'birthMon', 'birthDay', 'birthCountry', 'birthState' and 'birthCity' as input parameters.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to insert a new record into 'players' table. The procedure should take 'playerID', 'firstName', 'lastName', 'height', 'weight', 'firstNHL', 'lastNHL', 'position', 'birthYear', 'birthMon', 'birthDay', 'birthCountry', 'birthState' and 'birthCity' as input parameters.",
    "input": "CREATE OR REPLACE PROCEDURE insertPlayersRecord(playerID_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2, height_in IN NUMBER, weight_in IN NUMBER, firstNHL_in IN NUMBER, lastNHL_in IN NUMBER, position_in IN VARCHAR2, birthYear_in IN NUMBER, birthMon_in IN NUMBER, birthDay_in IN NUMBER, birthCountry_in IN VARCHAR2, birthState_in IN VARCHAR2, birthCity_in IN VARCHAR2) IS BEGIN INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES(playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE insertPlayersRecord(playerID_in String, firstName_in String, lastName_in String, height_in integer, weight_in integer, firstNHL_in integer, lastNHL_in integer, position_in String, birthYear_in integer, birthMon_in integer, birthDay_in integer, birthCountry_in String, birthState_in String, birthCity_in String) AS INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES(playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 77,
    "task": "Create a stored procedure to delete a record from 'players' table using 'playerID' as an input parameter.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to delete a record from 'players' table using 'playerID' as an input parameter.",
    "input": "CREATE OR REPLACE PROCEDURE deletePlayersRecord(playerID_in IN VARCHAR2) IS BEGIN DELETE FROM players WHERE playerID = playerID_in; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE deletePlayersRecord(playerID_in String) AS DELETE FROM players WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 78,
    "task": "Create a stored procedure to retrieve the birth details of a player from 'players' table using 'playerID' as an Input parameter.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to retrieve the birth details of a player from 'players' table using 'playerID' as an Input parameter.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerBirthDetails(playerID_in IN VARCHAR2, birthYear OUT NUMBER, birthMon OUT NUMBER, birthDay OUT NUMBER, birthCountry OUT VARCHAR2, birthState OUT VARCHAR2, birthCity OUT VARCHAR2) IS BEGIN SELECT birthYear, birthMon, birthDay, birthCountry, birthState, birthCity INTO birthYear, birthMon, birthDay, birthCountry, birthState, birthCity FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerBirthDetails(playerID_in String) AS VAR birthYear integer, birthMon integer, birthDay integer, birthCountry String, birthState String, birthCity String; birthYear, birthMon, birthDay, birthCountry, birthState, birthCity = (SELECT birthYear, birthMon, birthDay, birthCountry, birthState, birthCity FROM players WHERE playerID = playerID_in); THROW birthYear || ' ' || birthMon || ' ' || birthDay || ' ' || birthCountry || ' ' || birthState || ' ' || birthCity; END_PROCEDURE;"
  },
  {
    "number": 79,
    "task": "How can you create a stored procedure to select a player's name, team and the team's conference based on the playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure to select a player's name, team and the team's conference based on the playerID?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerInfo(playerID_in IN VARCHAR2, playerName OUT VARCHAR2, playerTeam OUT VARCHAR2, teamConference OUT VARCHAR2) AS BEGIN SELECT p.lastName, t.name, t.conferenceID INTO playerName, playerTeam, teamConference FROM players p JOIN scoring s ON p.playerID = s.playerID JOIN teams t ON s.teamID = t.teamID WHERE p.playerID = playerID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerInfo(playerID_in String) AS VAR playerName String, playerTeam String, teamConference String; playerName, playerTeam, teamConference = (SELECT p.lastName, t.name, t.conferenceID FROM players p JOIN scoring s ON p.playerID = s.playerID JOIN teams t ON s.teamID = t.teamID WHERE p.playerID = playerID_in); THROW 'Player ' || playerName || ' plays for ' || playerTeam || ' in the ' || teamConference ||' conference.'; END_PROCEDURE;"
  },
  {
    "number": 80,
    "task": "How do you create a stored procedure to get all player info who was born on a particular date?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to get all player info who was born on a particular date?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerByBirthDate(birthYear_in IN NUMBER, birthMon_in IN NUMBER, birthDay_in IN NUMBER, playerName OUT VARCHAR2) AS BEGIN SELECT p.firstName || ' ' || p.lastName INTO playerName FROM players p WHERE p.birthYear = birthYear_in AND p.birthMon = birthMon_in AND p.birthDay = birthDay_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerByBirthDate(birthYear_in INTEGER, birthMon_in INTEGER, birthDay_in INTEGER) AS VAR playerName String; playerName = (SELECT p.firstName || ' ' || p.lastName FROM players p WHERE p.birthYear = birthYear_in AND p.birthMon = birthMon_in AND p.birthDay = birthDay_in); THROW playerName; END_PROCEDURE;"
  },
  {
    "number": 81,
    "task": "How can you create a stored procedure that updates a player's height?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure that updates a player's height?",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerHeight(playerID_in IN VARCHAR2, newHeight_in IN NUMBER) IS currentHeight NUMBER; BEGIN SELECT p.height INTO currentHeight FROM players p WHERE p.playerID = playerID_in; UPDATE players SET height = newHeight_in WHERE playerID = playerID_in; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerHeight(playerID_in String, newHeight_in INTEGER) AS VAR currentHeight INTEGER; currentHeight = (SELECT p.height FROM players p WHERE p.playerID = playerID_in); UPDATE players SET height = newHeight_in WHERE playerID = playerID_in; THROW 'Height was updated from ' || CAST(currentHeight AS String) || ' to ' || CAST(newHeight_in AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 82,
    "task": "How can you create a stored procedure to delete a player by ID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure to delete a player by ID?",
    "input": "CREATE OR REPLACE PROCEDURE deletePlayer(playerID_in IN VARCHAR2) IS BEGIN DELETE FROM players WHERE playerID = playerID_in; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE deletePlayer(playerID_in String) AS DELETE FROM players WHERE playerID = playerID_in; THROW 'Player ' || playerID_in || ' was deleted.'; END_PROCEDURE;"
  },
  {
    "number": 83,
    "task": "How do you create a stored procedure to get team's win and loss record for a particular year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to get team's win and loss record for a particular year?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamRecord(teamID_in IN VARCHAR2, year_in IN NUMBER, wins OUT NUMBER, losses OUT NUMBER) IS BEGIN SELECT t.wins, t.losses INTO wins, losses FROM teams t WHERE t.year = year_in AND t.teamID = teamID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getTeamRecord(teamID_in String, year_in INTEGER) AS VAR wins INTEGER, losses INTEGER; wins, losses = (SELECT t.wins, t.losses FROM teams t WHERE t.year = year_in AND t.teamID = teamID_in); THROW 'Team ' || teamID_in || ' had ' || CAST(wins AS String) || ' wins and ' || CAST(losses AS String) || ' losses in ' || CAST(year_in AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 84,
    "task": "How do you create a stored procedure that returns the highest goal scorer of a particular year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure that returns the highest goal scorer of a particular year?",
    "input": "CREATE OR REPLACE PROCEDURE getHighestGoalScorer(year_in IN NUMBER, playerID OUT VARCHAR2, maxGoals OUT NUMBER) IS BEGIN SELECT s.playerID, MAX(s.goals) INTO playerID, maxGoals FROM scoring s WHERE s.year = year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getHighestGoalScorer(year_in INTEGER) AS VAR playerID String, maxGoals INTEGER; playerID, maxGoals = (SELECT s.playerID, MAX(s.goals) FROM scoring s WHERE s.year = year_in); THROW 'Player ' || playerID || ' scored the most goals in ' || CAST(year_in AS String) || ' with ' || CAST(maxGoals AS String) || ' goals.'; END_PROCEDURE;"
  },
  {
    "number": 85,
    "task": "How to create a stored procedure that returns the total goals scored by a particular team in a particular year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the total goals scored by a particular team in a particular year?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamGoals(teamID_in IN VARCHAR2, year_in IN NUMBER, totalGoals OUT NUMBER) IS BEGIN SELECT SUM(s.goals) INTO totalGoals FROM scoring s WHERE s.year = year_in AND s.teamID = teamID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getTeamGoals(teamID_in String, year_in INTEGER) AS VAR totalGoals INTEGER; totalGoals = (SELECT SUM(s.goals) FROM scoring s WHERE s.year = year_in AND s.teamID = teamID_in); THROW 'The team ' || teamID_in || ' scored a total of ' || CAST(totalGoals AS String) || ' goals in ' || CAST(year_in AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 86,
    "task": "How do you create a stored procedure to update a player's lastNHL year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to update a player's lastNHL year?",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerLastNHL(playerID_in IN VARCHAR2, lastNHL_in IN NUMBER) IS currentLastNHL NUMBER; BEGIN SELECT p.lastNHL INTO currentLastNHL FROM players p WHERE p.playerID = playerID_in; UPDATE players SET lastNHL = lastNHL_in WHERE playerID = playerID_in; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerLastNHL(playerID_in String, lastNHL_in INTEGER) AS VAR currentLastNHL INTEGER; currentLastNHL = (SELECT p.lastNHL FROM players p WHERE p.playerID = playerID_in); UPDATE players SET lastNHL = lastNHL_in WHERE playerID = playerID_in; THROW 'Last NHL year was updated from ' || CAST(currentLastNHL AS String) || ' to ' || CAST(lastNHL_in AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 87,
    "task": "How can you create a stored procedure to select a team's total games played in a particular year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure to select a team's total games played in a particular year?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamGamesPlayed(teamID_in IN VARCHAR2, year_in IN NUMBER, gamesPlayed OUT NUMBER) IS BEGIN SELECT t.games INTO gamesPlayed FROM teams t WHERE t.year = year_in AND t.teamID = teamID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getTeamGamesPlayed(teamID_in String, year_in INTEGER) AS VAR gamesPlayed INTEGER; gamesPlayed = (SELECT t.games FROM teams t WHERE t.year = year_in AND t.teamID = teamID_in); THROW 'Team ' || teamID_in || ' played ' || CAST(gamesPlayed AS String) || ' games in ' || CAST(year_in AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 88,
    "task": "How do you create a stored procedure that returns the most recent team a player played for?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure that returns the most recent team a player played for?",
    "input": "CREATE OR REPLACE PROCEDURE getLastTeam(playerID_in IN VARCHAR2, lastTeam OUT VARCHAR2, lastYear OUT NUMBER) IS BEGIN SELECT s.teamID, MAX(s.year) INTO lastTeam, lastYear FROM scoring s WHERE s.playerID = playerID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getLastTeam(playerID_in String) AS VAR lastTeam String, lastYear INTEGER; lastTeam, lastYear = (SELECT s.teamID, MAX(s.year) FROM scoring s WHERE s.playerID = playerID_in); THROW 'The last team ' || playerID_in || ' played for was ' || lastTeam || ' in ' || CAST(lastYear AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 89,
    "task": "How to create a stored procedure that returns the total number of teams in a particular year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the total number of teams in a particular year?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamCount(year_in IN NUMBER, teamCount OUT NUMBER) IS BEGIN SELECT COUNT(*) INTO teamCount FROM teams WHERE year = year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getTeamCount(year_in INTEGER) AS VAR count INTEGER; count = (SELECT COUNT(*) FROM teams WHERE year = year_in); THROW 'There were ' || CAST(count AS String) || ' teams in ' || CAST(year_in AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 90,
    "task": "How do you create a stored procedure to get player's first and last year in NHL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to get player's first and last year in NHL?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerNHLYears(playerID_in IN VARCHAR2, firstYear OUT NUMBER, lastYear OUT NUMBER) IS BEGIN SELECT p.firstNHL, p.lastNHL INTO firstYear, lastYear FROM players p WHERE p.playerID = playerID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerNHLYears(playerID_in String) AS VAR firstYear INTEGER, lastYear INTEGER; firstYear, lastYear = (SELECT p.firstNHL, p.lastNHL FROM players p WHERE p.playerID = playerID_in); THROW 'Player ' || playerID_in || ' first played in the NHL in ' || CAST(firstYear AS String) || ' and last played in ' || CAST(lastYear AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 91,
    "task": "How can you create a stored procedure to get a player's firstNHL year and birthYear?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure to get a player's firstNHL year and birthYear?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerFirstNHLYearAndBirthYear(playerID_in IN VARCHAR2, firstNHLYear OUT NUMBER, birthYear OUT NUMBER) IS BEGIN SELECT p.firstNHL, p.birthYear INTO firstNHLYear, birthYear FROM players p WHERE p.playerID = playerID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerFirstNHLYearAndBirthYear(playerID_in String) AS VAR firstNHLYear INTEGER, birthYear INTEGER; firstNHLYear, birthYear = (SELECT p.firstNHL, p.birthYear FROM players p WHERE p.playerID = playerID_in); THROW 'Player ' || playerID_in || ' was born in ' || CAST(birthYear AS String) || ' and first played in the NHL in ' || CAST(firstNHLYear AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 92,
    "task": "How you create a stored procedure to insert new player into the players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How you create a stored procedure to insert new player into the players table?",
    "input": "CREATE OR REPLACE PROCEDURE insertPlayer(playerId_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2, height_in IN NUMBER, weight_in IN NUMBER, firstNHL_in IN NUMBER, lastNHL_in IN NUMBER, position_in IN VARCHAR2, birthYear_in IN NUMBER, birthMon_in IN NUMBER, birthDay_in IN NUMBER, birthCountry_in IN VARCHAR2, birthState_in IN VARCHAR2, birthCity_in IN VARCHAR2) IS BEGIN INSERT INTO players VALUES (playerId_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE insertPlayer(playerId_in String, firstName_in String, lastName_in String, height_in INTEGER, weight_in INTEGER, firstNHL_in INTEGER, lastNHL_in INTEGER, position_in String, birthYear_in INTEGER, birthMon_in INTEGER, birthDay_in INTEGER, birthCountry_in String, birthState_in String, birthCity_in String) AS INSERT INTO players VALUES (playerId_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); THROW 'Player ' || firstName_in || ' ' || lastName_in || ' was added.'; END_PROCEDURE;"
  },
  {
    "number": 93,
    "task": "How do you create a stored procedure to delete all players from a specific country?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to delete all players from a specific country?",
    "input": "CREATE OR REPLACE PROCEDURE deletePlayersByCountry(birthCountry_in IN VARCHAR2) IS BEGIN DELETE FROM players WHERE birthCountry = birthCountry_in; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE deletePlayersByCountry(birthCountry_in String) AS DELETE FROM players WHERE birthCountry = birthCountry_in; THROW 'All players from ' || birthCountry_in || ' were deleted.'; END_PROCEDURE;"
  },
  {
    "number": 94,
    "task": "How can you create a stored procedure to update a team's win count for a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure to update a team's win count for a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE updateTeamWins(teamID_in IN VARCHAR2, year_in IN NUMBER, newWins_in IN NUMBER) IS BEGIN UPDATE teams SET wins = newWins_in WHERE year = year_in AND teamID = teamID_in; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE updateTeamWins(teamID_in String, year_in INTEGER, newWins_in INTEGER) AS VAR currentWins INTEGER; currentWins = (SELECT t.wins FROM teams t WHERE t.year = year_in AND t.teamID = teamID_in); UPDATE teams SET wins = newWins_in WHERE year = year_in AND teamID = teamID_in; THROW 'Win count was updated from ' || CAST(currentWins AS String) || ' to ' || CAST(newWins_in AS String) || ' for team ' || teamID_in || ' in year ' || CAST(year_in AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 95,
    "task": "How can you create a stored procedure that returns the total points (goals + assists) scored by a particular player in a particular year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure that returns the total points (goals + assists) scored by a particular player in a particular year?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerPoints(playerID_in IN VARCHAR2, year_in IN NUMBER, totalPoints OUT NUMBER) IS BEGIN SELECT s.goals + s.assists INTO totalPoints FROM scoring s WHERE s.playerID = playerID_in AND s.year = year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerPoints(playerID_in String, year_in INTEGER) AS VAR totalPoints INTEGER; totalPoints = (SELECT s.goals + s.assists FROM scoring s WHERE s.playerID = playerID_in AND s.year = year_in); THROW 'Player ' || playerID_in || ' scored a total of ' || CAST(totalPoints AS String) || ' points in ' || CAST(year_in AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 96,
    "task": "How can you create a stored procedure to update a player's weight?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure to update a player's weight?",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerWeight(playerID_in IN VARCHAR2, newWeight_in IN NUMBER) IS currentWeight NUMBER; BEGIN SELECT weight INTO currentWeight FROM players WHERE playerID = playerID_in; UPDATE players SET weight = newWeight_in WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Weight was updated from ' || TO_CHAR(currentWeight) || ' to ' || TO_CHAR(newWeight_in) || '.'); END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerWeight(playerID_in String, newWeight_in INTEGER) AS VAR currentWeight INTEGER; currentWeight = (SELECT p.weight FROM players p WHERE p.playerID = playerID_in); UPDATE players SET weight = newWeight_in WHERE playerID = playerID_in; THROW 'Weight was updated from ' || CAST(currentWeight AS String) || ' to ' || CAST(newWeight_in AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 97,
    "task": "How do you create a stored procedure to get tallest player in a particular year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to get tallest player in a particular year?",
    "input": "CREATE OR REPLACE PROCEDURE getTallestPlayer(year_in IN NUMBER) IS playerID VARCHAR2(100); maxHeight NUMBER; BEGIN SELECT playerID, MAX(height) INTO playerID, maxHeight FROM players JOIN scoring ON players.playerID = scoring.playerID WHERE year = year_in GROUP BY players.playerID; DBMS_OUTPUT.PUT_LINE('Player ' || playerID || ' was the tallest player in ' || TO_CHAR(year_in) || ' with a height of ' || TO_CHAR(maxHeight) || '.'); END;",
    "output": "CREATE OR REPLACE PROCEDURE getTallestPlayer(year_in INTEGER) AS VAR playerID String, maxHeight INTEGER; playerID, maxHeight = (SELECT p.playerID, MAX(p.height) FROM players p JOIN scoring s ON p.playerID = s.playerID WHERE s.year = year_in); THROW 'Player ' || playerID || ' was the tallest player in ' || CAST(year_in AS String) || ' with a height of ' || CAST(maxHeight AS String) || '.'; END_PROCEDURE;"
  },
  {
    "number": 98,
    "task": "How can you generate a stored procedure to return the total number of goals and assists by a player in a particular year from the scoring table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you generate a stored procedure to return the total number of goals and assists by a player in a particular year from the scoring table?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerScoreForYear(playerID_in IN VARCHAR2, year_in IN NUMBER) IS total_goals NUMBER; total_assists NUMBER; BEGIN SELECT goals, assists INTO total_goals, total_assists FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total Goals: ' || TO_CHAR(total_goals) || ', Total Assists: ' || TO_CHAR(total_assists)); END;",
    "output": "CREATE PROCEDURE getPlayerScoreForYear(IN playerID_in STRING, IN year_in INTEGER) AS VAR total_goals INTEGER, total_assists INTEGER; total_goals, total_assists = (SELECT goals, assists FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total Goals: ' || total_goals || ', Total Assists: ' || total_assists; END_PROCEDURE;"
  },
  {
    "number": 99,
    "task": "How to write a stored procedure to get the team name from the conference & division rankings?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure to get the team name from the conference & division rankings?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamByRank(conferenceID_in IN VARCHAR2, divisionID_in IN VARCHAR2) IS team_name VARCHAR2(100); BEGIN SELECT name INTO team_name FROM teams WHERE conferenceID = conferenceID_in AND divisionID = divisionID_in; DBMS_OUTPUT.PUT_LINE('Team Name: ' || team_name); END;",
    "output": "CREATE PROCEDURE getTeamByRank(IN conferenceID_in STRING, IN divisionID_in STRING) AS VAR team_name STRING; team_name = (SELECT name FROM teams WHERE conferenceID = conferenceID_in AND divisionID = divisionID_in); THROW 'Team Name: ' || team_name; END_PROCEDURE;"
  },
  {
    "number": 100,
    "task": "How do you create a stored procedure to get the information (height, weight, height and position) of a player in a specific team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to get the information (height, weight, height and position) of a player in a specific team?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerInfoInTeam(teamID_in IN VARCHAR2) IS player_info VARCHAR2(200); BEGIN SELECT firstName || ' ' || lastName || ', ' || position || ', ' || TO_CHAR(height) || 'cm, ' || TO_CHAR(weight) || 'kg' INTO player_info FROM players WHERE playerID IN (SELECT playerID FROM teams WHERE teamID = teamID_in); DBMS_OUTPUT.PUT_LINE('Player Info: ' || player_info); END;",
    "output": "CREATE PROCEDURE getPlayerInfoInTeam(IN teamID_in STRING) AS VAR player_info STRING; player_info = (SELECT CONCAT(firstName, ' ', lastName, ', ', position, ', ', height, 'cm, ', weight, 'kg') FROM players WHERE playerID IN (SELECT playerID FROM teams WHERE teamID = teamID_in)); THROW 'Player Info: ' || player_info; END_PROCEDURE;"
  },
  {
    "number": 101,
    "task": "Write a stored procedure to return the joint information of a player and the teams he has played for.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to return the joint information of a player and the teams he has played for.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerAndTeams(playerID_in IN VARCHAR2) IS player_teams VARCHAR2(200); BEGIN SELECT p.firstName || ' ' || p.lastName || ', ' || t.name INTO player_teams FROM players p JOIN teams t ON p.playerID = t.teamID WHERE p.playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Player and Teams: ' || player_teams); END;",
    "output": "CREATE PROCEDURE getPlayerAndTeams(IN playerID_in STRING) AS VAR player_teams STRING; player_teams = (SELECT CONCAT(p.firstName, ' ', p.lastName, ', ', t.name) FROM players p JOIN teams t ON p.playerID = t.teamID WHERE p.playerID = playerID_in); THROW 'Player and Teams: ' || player_teams; END_PROCEDURE;"
  },
  {
    "number": 102,
    "task": "How to write a stored procedure to get the team details of a player who scored the most goals in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure to get the team details of a player who scored the most goals in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE getTopScorerTeam(year_in IN NUMBER) IS top_scorer_team VARCHAR2(100); BEGIN SELECT name INTO top_scorer_team FROM teams WHERE teamID IN (SELECT teamID FROM scoring WHERE year = year_in AND goals = (SELECT MAX(goals) FROM scoring WHERE year = year_in)); DBMS_OUTPUT.PUT_LINE('Top Scorer Team: ' || top_scorer_team); END;",
    "output": "CREATE PROCEDURE getTopScorerTeam(IN year_in INTEGER) AS VAR top_scorer_team STRING; top_scorer_team = (SELECT t.name FROM teams t WHERE t.teamID = (SELECT s.teamID FROM scoring s WHERE s.year = year_in ORDER BY s.goals DESC LIMIT 1)); THROW 'Top Scorer Team: ' || top_scorer_team; END_PROCEDURE;"
  },
  {
    "number": 103,
    "task": "How to write a stored procedure to update the height and weight of a player from the players table and return the updated data?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure to update the height and weight of a player from the players table and return the updated data?",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerHeightWeight(playerID_in IN VARCHAR2, height_in IN NUMBER, weight_in IN NUMBER) IS updated_info VARCHAR2(100); BEGIN UPDATE players SET height = height_in, weight = weight_in WHERE playerID = playerID_in; SELECT firstName || ' ' || lastName || ', ' || TO_CHAR(height) || 'cm, ' || TO_CHAR(weight) || 'kg' INTO updated_info FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Updated Info: ' || updated_info); END;",
    "output": "CREATE PROCEDURE updatePlayerHeightWeight(IN playerID_in STRING, IN height_in INTEGER, IN weight_in INTEGER) AS UPDATE players SET height = height_in, weight = weight_in WHERE playerID = playerID_in; VAR updated_info STRING; updated_info = (SELECT CONCAT(firstName, ' ', lastName, ', ', height, 'cm, ', weight, 'kg') FROM players WHERE playerID = playerID_in); THROW 'Updated Info: ' || updated_info; END_PROCEDURE;"
  },
  {
    "number": 104,
    "task": "How do you create a stored procedure to get the total wins of a team in a specific year and return the result?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to get the total wins of a team in a specific year and return the result?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamWins(teamID_in IN VARCHAR2, year_in IN NUMBER) IS total_wins NUMBER; BEGIN SELECT wins INTO total_wins FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Total Wins: ' || TO_CHAR(total_wins)); END;",
    "output": "CREATE PROCEDURE getTeamWins(IN teamID_in STRING, IN year_in INTEGER) AS VAR total_wins INTEGER; total_wins = (SELECT wins FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'Total Wins: ' || total_wins; END_PROCEDURE;"
  },
  {
    "number": 105,
    "task": "How to write a stored procedure to get the position of a player from the Hockey table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure to get the position of a player from the Hockey table?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerPosition(id_in IN NUMBER) IS player_position VARCHAR2(100); BEGIN SELECT Position INTO player_position FROM Hockey WHERE Id = id_in; DBMS_OUTPUT.PUT_LINE('Player Position: ' || player_position); END;",
    "output": "CREATE PROCEDURE getPlayerPosition(IN id_in BIGINT) AS VAR player_position STRING; player_position = (SELECT Position FROM Hockey WHERE Id = id_in); THROW 'Player Position: ' || player_position; END_PROCEDURE;"
  },
  {
    "number": 106,
    "task": "Write a stored procedure to return the list of players who were born in a particular country.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to return the list of players who were born in a particular country.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerByBirthCountry(country_in IN VARCHAR2) IS CURSOR player_cursor IS SELECT firstName, lastName FROM players WHERE birthCountry = country_in; player_row player_cursor%ROWTYPE; BEGIN OPEN player_cursor; LOOP FETCH player_cursor INTO player_row; EXIT WHEN player_cursor%NOTFOUND; DBMS_OUTPUT.PUT_LINE('Player List: ' || player_row.firstName || ' ' || player_row.lastName); END LOOP; CLOSE player_cursor; END;",
    "output": "CREATE PROCEDURE getPlayerByBirthCountry(IN country_in STRING) AS VAR player_list STRING; player_list = (SELECT CONCAT(firstName, ' ', lastName) FROM players WHERE birthCountry = country_in); THROW 'Player List: ' || player_list; END_PROCEDURE;"
  },
  {
    "number": 107,
    "task": "Write a stored procedure to get the player who has played the most number of games in a single year and return the playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the player who has played the most number of games in a single year and return the playerID.",
    "input": "CREATE OR REPLACE PROCEDURE getMostPlayedPlayer(year_in IN NUMBER) IS most_played_player VARCHAR2(100); BEGIN SELECT playerID INTO most_played_player FROM scoring WHERE year = year_in AND gamesPlayed = (SELECT MAX(gamesPlayed) FROM scoring WHERE year = year_in); DBMS_OUTPUT.PUT_LINE('Most Games Played By: ' || most_played_player); END;",
    "output": "CREATE PROCEDURE getMostPlayedPlayer(IN year_in INTEGER) AS VAR most_played_player STRING; most_played_player = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY gamesPlayed DESC LIMIT 1); THROW 'Most Games Played By: ' || most_played_player; END_PROCEDURE;"
  },
  {
    "number": 108,
    "task": "How do you create a stored procedure to return the number of ties a team had in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to return the number of ties a team had in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamTies(year_in IN NUMBER, teamID_in IN VARCHAR2) IS team_ties NUMBER; BEGIN SELECT ties INTO team_ties FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Number Of Ties: ' || TO_CHAR(team_ties)); END;",
    "output": "CREATE PROCEDURE getTeamTies(IN year_in INTEGER, IN teamID_in STRING) AS VAR team_ties INTEGER; team_ties = (SELECT ties FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'Number Of Ties: ' || team_ties; END_PROCEDURE;"
  },
  {
    "number": 109,
    "task": "Write a stored procedure to return whether a team reached the playoffs in a particular year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to return whether a team reached the playoffs in a particular year.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamPlayoff(year_in IN NUMBER, teamID_in IN VARCHAR2) IS team_playoff VARCHAR2(10); BEGIN SELECT playoff INTO team_playoff FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Playoff: ' || team_playoff); END;",
    "output": "CREATE PROCEDURE getTeamPlayoff(IN year_in INTEGER, IN teamID_in STRING) AS VAR team_playoff STRING; team_playoff = (SELECT playoff FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'Playoff: ' || team_playoff; END_PROCEDURE;"
  },
  {
    "number": 110,
    "task": "How to write a stored procedure to get the full name of a player with the most assists in a given year from the scoring table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure to get the full name of a player with the most assists in a given year from the scoring table?",
    "input": "CREATE OR REPLACE PROCEDURE getTopAssistingPlayer(year_in IN NUMBER) IS top_assisting_player VARCHAR2(100); BEGIN SELECT p.firstName || ' ' || p.lastName INTO top_assisting_player FROM players p WHERE p.playerID IN (SELECT s.playerID FROM scoring s WHERE s.year = year_in AND s.assists = (SELECT MAX(s.assists) FROM scoring s WHERE s.year = year_in)); DBMS_OUTPUT.PUT_LINE('Top Assisting Player: ' || top_assisting_player); END;",
    "output": "CREATE PROCEDURE getTopAssistingPlayer(IN year_in INTEGER) AS VAR top_assisting_player STRING; top_assisting_player = (SELECT CONCAT(p.firstName, ' ', p.lastName) FROM players p WHERE p.playerID = (SELECT s.playerID FROM scoring s WHERE s.year = year_in ORDER BY s.assists DESC LIMIT 1)); THROW 'Top Assisting Player: ' || top_assisting_player; END_PROCEDURE;"
  },
  {
    "number": 111,
    "task": "Write a stored procedure to get the birth year, birth month and birth day of a player using playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the birth year, birth month and birth day of a player using playerID.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerBirthDate(playerID_in IN VARCHAR2) IS birth_date VARCHAR2(10); BEGIN SELECT birthYear || '-' || birthMon || '-' || birthDay INTO birth_date FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Birth Date: ' || birth_date); END;",
    "output": "CREATE PROCEDURE getPlayerBirthDate(IN playerID_in STRING) AS VAR birth_date STRING; birth_date = (SELECT CONCAT(birthYear, '-', birthMon, '-', birthDay) FROM players WHERE playerID = playerID_in); THROW 'Birth Date: ' || birth_date; END_PROCEDURE;"
  },
  {
    "number": 112,
    "task": "How do you create a stored procedure to return the total losses of a team in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to return the total losses of a team in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamLosses(teamID_in IN VARCHAR2, year_in IN NUMBER) IS total_losses NUMBER; BEGIN SELECT losses INTO total_losses FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Total Losses: ' || TO_CHAR(total_losses)); END;",
    "output": "CREATE PROCEDURE getTeamLosses(IN teamID_in STRING, IN year_in INTEGER) AS VAR total_losses INTEGER; total_losses = (SELECT losses FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'Total Losses: ' || total_losses; END_PROCEDURE;"
  },
  {
    "number": 113,
    "task": "How do you create a SQL stored procedure in NuoDB which takes a player's ID as input and returns the player's first and last name?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a SQL stored procedure in NuoDB which takes a player's ID as input and returns the player's first and last name?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_name(player_id_in IN VARCHAR2) IS firstname VARCHAR2(50); lastname VARCHAR2(50); BEGIN SELECT firstName, lastName INTO firstname, lastname FROM players WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Firstname: ' || firstname || ', Lastname: ' || lastname); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_name(player_id_in String) AS VAR firstname String, lastname String; firstname, lastname = (SELECT firstName, lastName FROM players WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 114,
    "task": "Create a NuoDB Stored Procedure that takes a player's ID and returns the total number of games they have played.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB Stored Procedure that takes a player's ID and returns the total number of games they have played.",
    "input": "CREATE OR REPLACE PROCEDURE get_total_games(player_id_in IN VARCHAR2) IS total_games NUMBER; BEGIN SELECT SUM(gamesPlayed) INTO total_games FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Total Games: ' || TO_CHAR(total_games)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_total_games(player_id_in String) AS VAR total_games Integer; total_games = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 115,
    "task": "Create a NuoDB SQL Stored Procedure that takes a team's ID and returns the team's total wins.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that takes a team's ID and returns the team's total wins.",
    "input": "CREATE OR REPLACE PROCEDURE get_total_wins(team_id_in IN VARCHAR2) IS total_wins NUMBER; BEGIN SELECT SUM(wins) INTO total_wins FROM teams WHERE teamID = team_id_in; DBMS_OUTPUT.PUT_LINE('Total Wins: ' || TO_CHAR(total_wins)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_total_wins(team_id_in String) AS VAR total_wins Integer; total_wins = (SELECT SUM(wins) FROM teams WHERE teamID = team_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 116,
    "task": "How do you create a SQL stored procedure in NuoDB that returns the weight of a player given their player ID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a SQL stored procedure in NuoDB that returns the weight of a player given their player ID?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_weight(player_id_in IN VARCHAR2) IS player_weight NUMBER; BEGIN SELECT weight INTO player_weight FROM players WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Weight: ' || TO_CHAR(player_weight)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_weight(player_id_in String) AS VAR player_weight Integer; player_weight = (SELECT weight FROM players WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 117,
    "task": "Write a SQL stored procedure in NuoDB that receives a team's ID and returns the total number of games they have lost.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL stored procedure in NuoDB that receives a team's ID and returns the total number of games they have lost.",
    "input": "CREATE OR REPLACE PROCEDURE get_total_losses(team_id_in IN VARCHAR2) IS total_losses NUMBER; BEGIN SELECT SUM(losses) INTO total_losses FROM teams WHERE teamID = team_id_in; DBMS_OUTPUT.PUT_LINE('Total Losses: ' || TO_CHAR(total_losses)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_total_losses(team_id_in String) AS VAR total_losses Integer; total_losses = (SELECT SUM(losses) FROM teams WHERE teamID = team_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 118,
    "task": "How do you create a SQL stored procedure in NuoDB that returns the height of a player given their player ID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a SQL stored procedure in NuoDB that returns the height of a player given their player ID?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_height(player_id_in IN VARCHAR2) IS player_height NUMBER; BEGIN SELECT height INTO player_height FROM players WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Height: ' || TO_CHAR(player_height)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_height(player_id_in String) AS VAR player_height Integer; player_height = (SELECT height FROM players WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 119,
    "task": "Write a NuoDB SQL Stored Procedure that receives a year and returns all the team IDs of teams that played in that year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that receives a year and returns all the team IDs of teams that played in that year.",
    "input": "CREATE OR REPLACE PROCEDURE get_teams_by_year(year_in IN NUMBER) IS CURSOR team_ids IS SELECT teamID FROM teams WHERE year = year_in; team_id VARCHAR2(50); BEGIN OPEN team_ids; LOOP FETCH team_ids INTO team_id; EXIT WHEN team_ids%NOTFOUND; DBMS_OUTPUT.PUT_LINE('Team ID: ' || team_id); END LOOP; CLOSE team_ids; END;",
    "output": "CREATE OR REPLACE PROCEDURE get_teams_by_year(year_in Integer) AS VAR team_ids String; team_ids = (SELECT teamID FROM teams WHERE year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 120,
    "task": "Create a NuoDB Stored Procedure that receives a player's ID and returns their birth year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB Stored Procedure that receives a player's ID and returns their birth year.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birthyear(player_id_in IN VARCHAR2) IS birth_year NUMBER; BEGIN SELECT birthYear INTO birth_year FROM players WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Birth Year: ' || TO_CHAR(birth_year)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_birthyear(player_id_in String) AS VAR birth_year Integer; birth_year = (SELECT birthYear FROM players WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 121,
    "task": "Create a SQL stored procedure in NuoDB which takes an input of team ID and returns the average weight of players in that team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a SQL stored procedure in NuoDB which takes an input of team ID and returns the average weight of players in that team.",
    "input": "CREATE OR REPLACE PROCEDURE get_avg_weight_team(team_id_in IN VARCHAR2) IS avg_weight NUMBER; BEGIN SELECT AVG(players.weight) INTO avg_weight FROM players JOIN scoring ON players.playerid = scoring.playerid WHERE scoring.teamID = team_id_in; DBMS_OUTPUT.PUT_LINE('Average Weight: ' || TO_CHAR(avg_weight)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_avg_weight_team(team_id_in String) AS VAR avg_weight FLOAT; avg_weight = (SELECT AVG(players.weight) FROM players JOIN scoring ON players.playerid = scoring.playerid WHERE scoring.teamID = team_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 122,
    "task": "Write a NuoDB SQL Stored Procedure that receives a player's ID and returns the total goals they have scored.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that receives a player's ID and returns the total goals they have scored.",
    "input": "CREATE OR REPLACE PROCEDURE get_total_goals(player_id_in IN VARCHAR2) IS total_goals NUMBER; BEGIN SELECT SUM(goals) INTO total_goals FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Total Goals: ' || TO_CHAR(total_goals)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_total_goals(player_id_in String) AS VAR total_goals Integer; total_goals = (SELECT SUM(goals) FROM scoring WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 123,
    "task": "Write a NuoDB SQL Stored Procedure that gets a player's ID and returns their birthplace (Country, State, City).",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that gets a player's ID and returns their birthplace (Country, State, City).",
    "input": "CREATE OR REPLACE PROCEDURE get_birth_place(player_id_in IN VARCHAR2) IS birth_country VARCHAR2(255); birth_state VARCHAR2(255); birth_city VARCHAR2(255); BEGIN SELECT birthCountry, birthState, birthCity INTO birth_country, birth_state, birth_city FROM players WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Birth Country: ' || birth_country || ', Birth State: ' || birth_state || ', Birth City: ' || birth_city); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_birth_place(player_id_in String) AS VAR birth_country String, birth_state String, birth_city String; birth_country, birth_state, birth_city = (SELECT birthCountry, birthState, birthCity FROM players WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 124,
    "task": "Create a NuoDB SQL Stored Procedure that takes a player's ID and returns the total assists they have made.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that takes a player's ID and returns the total assists they have made.",
    "input": "CREATE OR REPLACE PROCEDURE get_total_assists(player_id_in IN VARCHAR2) IS total_assists NUMBER; BEGIN SELECT SUM(assists) INTO total_assists FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Total Assists: ' || TO_CHAR(total_assists)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_total_assists(player_id_in String) AS VAR total_assists Integer; total_assists = (SELECT SUM(assists) FROM scoring WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 125,
    "task": "Write a NuoDB SQL Stored Procedure that receives a player's ID and returns their highest scoring year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that receives a player's ID and returns their highest scoring year.",
    "input": "CREATE OR REPLACE PROCEDURE get_highest_scoring_year(player_id_in IN VARCHAR2) IS highest_year NUMBER; BEGIN SELECT MAX(year) INTO highest_year FROM (SELECT year, SUM(goals) total_goals FROM scoring WHERE playerID = player_id_in GROUP BY year) ORDER BY total_goals DESC; DBMS_OUTPUT.PUT_LINE('Highest Scoring Year: ' || TO_CHAR(highest_year)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_highest_scoring_year(player_id_in String) AS VAR highest_year Integer; highest_year = (SELECT year FROM scoring WHERE playerID = player_id_in ORDER BY goals DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 126,
    "task": "Create a NuoDB SQL Stored Procedure that takes a player's ID and returns their lowest scoring year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that takes a player's ID and returns their lowest scoring year.",
    "input": "CREATE OR REPLACE PROCEDURE get_lowest_scoring_year(player_id_in IN VARCHAR2) IS lowest_year NUMBER; BEGIN SELECT MIN(year) INTO lowest_year FROM (SELECT year, SUM(goals) total_goals FROM scoring WHERE playerID = player_id_in GROUP BY year) ORDER BY total_goals ASC; DBMS_OUTPUT.PUT_LINE('Lowest Scoring Year: ' || TO_CHAR(lowest_year)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_lowest_scoring_year(player_id_in String) AS VAR lowest_year Integer; lowest_year = (SELECT year FROM scoring WHERE playerID = player_id_in ORDER BY goals ASC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 127,
    "task": "Create a SQL stored procedure in NuoDB to obtain a team's best year in terms of victories given its ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a SQL stored procedure in NuoDB to obtain a team's best year in terms of victories given its ID.",
    "input": "CREATE OR REPLACE PROCEDURE get_best_year_team(team_id_in IN VARCHAR2) IS best_year NUMBER; BEGIN SELECT MAX(year) INTO best_year FROM teams WHERE teamID = team_id_in AND wins = (SELECT MAX(wins) FROM teams WHERE teamID = team_id_in); DBMS_OUTPUT.PUT_LINE('Best Year: ' || TO_CHAR(best_year)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_best_year_team(team_id_in String) AS VAR best_year Integer; best_year = (SELECT year FROM teams WHERE teamID = team_id_in ORDER BY wins DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 128,
    "task": "Write a SQL stored procedure in NuoDB to get a team's worst year based on losses given its team ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL stored procedure in NuoDB to get a team's worst year based on losses given its team ID.",
    "input": "CREATE OR REPLACE PROCEDURE get_worst_year_team(team_id_in IN VARCHAR2) IS worst_year NUMBER; BEGIN SELECT MAX(year) INTO worst_year FROM teams WHERE teamID = team_id_in AND losses = (SELECT MAX(losses) FROM teams WHERE teamID = team_id_in); DBMS_OUTPUT.PUT_LINE('Worst Year: ' || TO_CHAR(worst_year)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_worst_year_team(team_id_in String) AS VAR worst_year Integer; worst_year = (SELECT year FROM teams WHERE teamID = team_id_in ORDER BY losses DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 129,
    "task": "Create a Stored Procedure in NuoDB that receives a player's ID and returns their years of NHL experience.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a Stored Procedure in NuoDB that receives a player's ID and returns their years of NHL experience.",
    "input": "CREATE OR REPLACE PROCEDURE get_nhl_experience(player_id_in IN VARCHAR2) IS nhl_years NUMBER; BEGIN SELECT (lastNHL - firstNHL) INTO nhl_years FROM players WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('NHL Experience: ' || TO_CHAR(nhl_years)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_nhl_experience(player_id_in String) AS VAR nhl_years Integer; nhl_years = (SELECT (lastNHL - firstNHL) as years_in_NHL FROM players WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 130,
    "task": "Write a NuoDB SQL Stored Procedure that receives a player's ID and generates a string with their full name (first name + last name).",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that receives a player's ID and generates a string with their full name (first name + last name).",
    "input": "CREATE OR REPLACE PROCEDURE get_full_name(player_id_in IN VARCHAR2) IS full_name VARCHAR2(255); BEGIN SELECT firstName || ' ' || lastName INTO full_name FROM players WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Full Name: ' || full_name); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_full_name(player_id_in String) AS VAR full_name String; full_name = (SELECT firstName || ' ' || lastName FROM players WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 131,
    "task": "Create a Stored Procedure in NuoDB that takes as input a player's ID and returns a string stating their total penalty minutes.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a Stored Procedure in NuoDB that takes as input a player's ID and returns a string stating their total penalty minutes.",
    "input": "CREATE OR REPLACE PROCEDURE get_penalty_minutes(player_id_in IN VARCHAR2) IS penalty_mins NUMBER; BEGIN SELECT SUM(penaltyMinutes) INTO penalty_mins FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Total Penalty Minutes: ' || TO_CHAR(penalty_mins)); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_penalty_minutes(player_id_in String) AS VAR penalty_mins Integer; penalty_mins = (SELECT SUM(penaltyMinutes) FROM scoring WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 132,
    "task": "Create a stored procedure that returns the player's first name, last name, and number of goals using playerID as input parameter.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the player's first name, last name, and number of goals using playerID as input parameter.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerDetails(_in_playerID IN VARCHAR2) IS firstName VARCHAR2(255); lastName VARCHAR2(255); totalGoals NUMBER; BEGIN SELECT firstName, lastName, SUM(goals) INTO firstName, lastName, totalGoals FROM players JOIN scoring ON players.playerID = scoring.playerID WHERE players.playerID = _in_playerID GROUP BY firstName, lastName; DBMS_OUTPUT.PUT_LINE(firstName || ' ' || lastName || ' scored ' || TO_CHAR(totalGoals) || ' goals.'); END;",
    "output": "CREATE PROCEDURE getPlayerDetails(_in_playerID String) AS VAR firstName String, lastName String, totalGoals integer; firstName, lastName, totalGoals = (SELECT firstName, lastName, SUM(goals) FROM players JOIN scoring ON players.playerID = scoring.playerID WHERE players.playerID = _in_playerID GROUP BY firstName, lastName); THROW firstName || ' ' || lastName || ' scored ' || totalGoals || ' goals.'; END_PROCEDURE;"
  },
  {
    "number": 133,
    "task": "Create a stored procedure that returns player's full name and his team playing in presently",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns player's full name and his team playing in presently",
    "input": "CREATE OR REPLACE PROCEDURE getCurrentTeam(_in_playerID IN VARCHAR2) IS firstName VARCHAR2(255); lastName VARCHAR2(255); team VARCHAR2(255); BEGIN SELECT firstName, lastName, Team INTO firstName, lastName, team FROM players JOIN Hockey ON players.playerID = Hockey.Id WHERE players.playerID = _in_playerID; DBMS_OUTPUT.PUT_LINE(firstName || ' ' || lastName || ' plays for ' || team || '.'); END;",
    "output": "CREATE PROCEDURE getCurrentTeam(_in_playerID String) AS VAR firstName String, lastName String, team String; firstName, lastName, team = (SELECT firstName, lastName, Team FROM players JOIN Hockey ON players.playerID = Hockey.Id WHERE players.playerID = _in_playerID); THROW firstName || ' ' || lastName || ' plays for ' || team || '.'; END_PROCEDURE;"
  },
  {
    "number": 134,
    "task": "Create a stored procedure that calculates and returns the player's average weight on a yearly basis using playerID as input parameter.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates and returns the player's average weight on a yearly basis using playerID as input parameter.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerAverageWeight(_in_playerID IN VARCHAR2) IS averageWeight NUMBER; BEGIN SELECT AVG(weight) INTO averageWeight FROM players WHERE playerID = _in_playerID GROUP BY Year; DBMS_OUTPUT.PUT_LINE('The average weight of player ' || _in_playerID || ' is ' || TO_CHAR(averageWeight) || '.'); END;",
    "output": "CREATE PROCEDURE getPlayerAverageWeight(_in_playerID String) AS VAR averageWeight double; averageWeight = (SELECT AVG(weight) FROM players WHERE playerID = _in_playerID GROUP BY Year); THROW 'The average weight of player ' || _in_playerID || ' is ' || averageWeight || '.'; END_PROCEDURE;"
  },
  {
    "number": 135,
    "task": "Create a stored procedure that returns player's full name and his first year in NHL",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns player's full name and his first year in NHL",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerFirstYear(_in_playerID IN VARCHAR2) IS firstName VARCHAR2(255); lastName VARCHAR2(255); firstYear NUMBER; BEGIN SELECT firstName, lastName, firstNHL INTO firstName, lastName, firstYear FROM players WHERE playerID = _in_playerID; DBMS_OUTPUT.PUT_LINE(firstName || ' ' || lastName || ' started playing in NHL in ' || TO_CHAR(firstYear) || '.'); END;",
    "output": "CREATE PROCEDURE getPlayerFirstYear(_in_playerID String) AS VAR firstName String, lastName String, firstYear integer; firstName, lastName, firstYear = (SELECT firstName, lastName, firstNHL FROM players WHERE playerID = _in_playerID); THROW firstName || ' ' || lastName || ' started playing in NHL in ' || firstYear || '.'; END_PROCEDURE;"
  },
  {
    "number": 136,
    "task": "Create a stored procedure that returns the total penalty minutes a player has earned using playerID as input parameter.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the total penalty minutes a player has earned using playerID as input parameter.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerPenalties(_in_playerID IN VARCHAR2) IS penaltyMinutes NUMBER; BEGIN SELECT SUM(penaltyMinutes) INTO penaltyMinutes FROM scoring WHERE playerID = _in_playerID GROUP BY playerID; DBMS_OUTPUT.PUT_LINE('Player ' || _in_playerID || ' has total ' || TO_CHAR(penaltyMinutes) || ' penalty minutes.'); END;",
    "output": "CREATE PROCEDURE getPlayerPenalties(_in_playerID String) AS VAR penaltyMinutes integer; penaltyMinutes = (SELECT SUM(penaltyMinutes) FROM scoring WHERE playerID = _in_playerID GROUP BY playerID); THROW 'Player ' || _in_playerID || ' has total ' || penaltyMinutes || ' penalty minutes.'; END_PROCEDURE;"
  },
  {
    "number": 137,
    "task": "Create a stored procedure that returns the most losing team for a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the most losing team for a given year.",
    "input": "CREATE OR REPLACE PROCEDURE getMostLosingTeam(_in_year IN NUMBER) IS mostLosingTeam VARCHAR2(255); BEGIN SELECT teamID INTO mostLosingTeam FROM (SELECT teamID FROM teams WHERE year = _in_year ORDER BY losses DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('The most losing team for the year ' || TO_CHAR(_in_year) || ' is ' || mostLosingTeam || '.'); END;",
    "output": "CREATE PROCEDURE getMostLosingTeam(_in_year integer) AS VAR mostLosingTeam String; mostLosingTeam = (SELECT teamID FROM teams WHERE year = _in_year ORDER BY losses DESC LIMIT 1); THROW 'The most losing team for the year ' || _in_year || ' is ' || mostLosingTeam || '.'; END_PROCEDURE;"
  },
  {
    "number": 138,
    "task": "Create a stored procedure that returns the total number of games a player has played using playerID as input parameter.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the total number of games a player has played using playerID as input parameter.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerGames(_in_playerID IN VARCHAR2) IS totalGames NUMBER; BEGIN SELECT SUM(gamesPlayed) INTO totalGames FROM scoring WHERE playerID = _in_playerID GROUP BY playerID; DBMS_OUTPUT.PUT_LINE('Player ' || _in_playerID || ' has played ' || TO_CHAR(totalGames) || ' games.'); END;",
    "output": "CREATE PROCEDURE getPlayerGames(_in_playerID String) AS VAR totalGames integer; totalGames = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = _in_playerID GROUP BY playerID); THROW 'Player ' || _in_playerID || ' has played ' || totalGames || ' games.'; END_PROCEDURE;"
  },
  {
    "number": 138,
    "task": "Create a stored procedure that returns the total number of games a player has played using playerID as input parameter.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the total number of games a player has played using playerID as input parameter.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerGames(_in_playerID IN VARCHAR2) IS totalGames NUMBER; BEGIN SELECT SUM(gamesPlayed) INTO totalGames FROM scoring WHERE playerID = _in_playerID GROUP BY playerID; DBMS_OUTPUT.PUT_LINE('Player ' || _in_playerID || ' has played ' || TO_CHAR(totalGames) || ' games.'); END;",
    "output": "CREATE PROCEDURE getPlayerGames(_in_playerID String) AS VAR totalGames integer; totalGames = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = _in_playerID GROUP BY playerID); THROW 'Player ' || _in_playerID || ' has played ' || totalGames || ' games.'; END_PROCEDURE;"
  },
  {
    "number": 139,
    "task": "Create a stored procedure that returns the heaviest player for a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the heaviest player for a given year.",
    "input": "CREATE OR REPLACE PROCEDURE getHeaviestPlayer(_in_year IN NUMBER) IS heaviestPlayer VARCHAR2(255); BEGIN SELECT playerID INTO heaviestPlayer FROM (SELECT playerID FROM players WHERE firstNHL <= _in_year AND lastNHL >= _in_year ORDER BY weight DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('The heaviest player for the year ' || TO_CHAR(_in_year) || ' is ' || heaviestPlayer || '.'); END;",
    "output": "CREATE PROCEDURE getHeaviestPlayer(_in_year integer) AS VAR heaviestPlayer String; heaviestPlayer = (SELECT playerID FROM players WHERE firstNHL <= _in_year AND lastNHL >= _in_year ORDER BY weight DESC LIMIT 1); THROW 'The heaviest player for the year ' || _in_year || ' is ' || heaviestPlayer || '.'; END_PROCEDURE;"
  },
  {
    "number": 140,
    "task": "Create a stored procedure that returns the most scoring team for a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the most scoring team for a given year.",
    "input": "CREATE OR REPLACE PROCEDURE getMostScoringTeam(_in_year IN NUMBER) IS mostScoringTeam VARCHAR2(255); BEGIN SELECT teamID INTO mostScoringTeam FROM (SELECT teamID FROM scoring WHERE Year = _in_year GROUP BY teamID ORDER BY SUM(goals) DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('The most scoring team for the year ' || TO_CHAR(_in_year) || ' is ' || mostScoringTeam || '.'); END;",
    "output": "CREATE PROCEDURE getMostScoringTeam(_in_year integer) AS VAR mostScoringTeam String; mostScoringTeam = (SELECT teamID FROM scoring WHERE Year = _in_year GROUP BY teamID ORDER BY SUM(goals) DESC LIMIT 1); THROW 'The most scoring team for the year ' || _in_year || ' is ' || mostScoringTeam || '.'; END_PROCEDURE;"
  },
  {
    "number": 141,
    "task": "Create a stored procedure that returns the player who has played the highest number of games in  a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the player who has played the highest number of games in  a given year.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerMostGames(_in_year IN NUMBER) IS playerID VARCHAR2(255); BEGIN SELECT playerID INTO playerID FROM (SELECT playerID FROM scoring WHERE year = _in_year GROUP BY playerID ORDER BY SUM(gamesPlayed) DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('Player ' || playerID || ' has played the most games in the year ' || TO_CHAR(_in_year) || '.'); END;",
    "output": "CREATE PROCEDURE getPlayerMostGames(_in_year integer) AS VAR playerID String; playerID = (SELECT playerID FROM scoring WHERE year = _in_year GROUP BY playerID ORDER BY SUM(gamesPlayed) DESC LIMIT 1); THROW 'Player ' || playerID || ' has played the most games in the year ' || _in_year || '.'; END_PROCEDURE;"
  },
  {
    "number": 142,
    "task": "Create a stored procedure that returns the player who has the most assists for a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the player who has the most assists for a given year.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerMostAssists(_in_year IN NUMBER) IS playerID VARCHAR2(255); BEGIN SELECT playerID INTO playerID FROM (SELECT playerID FROM scoring WHERE year = _in_year GROUP BY playerID ORDER BY SUM(assists) DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('Player ' || playerID || ' has the most assists in the year ' || TO_CHAR(_in_year) || '.'); END;",
    "output": "CREATE PROCEDURE getPlayerMostAssists(_in_year integer) AS VAR playerID String; playerID = (SELECT playerID FROM scoring WHERE year = _in_year GROUP BY playerID ORDER BY SUM(assists) DESC LIMIT 1); THROW 'Player ' || playerID || ' has the most assists in the year ' || _in_year || '.'; END_PROCEDURE;"
  },
  {
    "number": 143,
    "task": "Create a stored procedure that returns the team which got the most penalties for a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the team which got the most penalties for a given year.",
    "input": "CREATE OR REPLACE PROCEDURE getMostPenalizedTeam(_in_year IN NUMBER) IS penalizedTeam VARCHAR2(255); BEGIN SELECT teamID INTO penalizedTeam FROM (SELECT teamID FROM scoring WHERE year = _in_year GROUP BY teamID ORDER BY SUM(penaltyMinutes) DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('The most penalized team for the year ' || TO_CHAR(_in_year) || ' is ' || penalizedTeam || '.'); END;",
    "output": "CREATE PROCEDURE getMostPenalizedTeam(_in_year integer) AS VAR penalizedTeam String; penalizedTeam = (SELECT teamID FROM scoring WHERE year = _in_year GROUP BY teamID ORDER BY SUM(penaltyMinutes) DESC LIMIT 1); THROW 'The most penalized team for the year ' || _in_year || ' is ' || penalizedTeam || '.'; END_PROCEDURE;"
  },
  {
    "number": 144,
    "task": "Create a stored procedure that returns whether a team has made it to the playoffs in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns whether a team has made it to the playoffs in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamPlayoffStatus(_in_teamID IN VARCHAR2, _in_year IN NUMBER) IS teamStatus VARCHAR2(255); BEGIN SELECT CASE WHEN playoff != '' THEN 'Yes' ELSE 'No' END INTO teamStatus FROM teams WHERE teamID = _in_teamID AND year = _in_year; DBMS_OUTPUT.PUT_LINE('Did team ' || _in_teamID || ' make it to the playoffs in ' || TO_CHAR(_in_year) || '? ' || teamStatus || '.'); END;",
    "output": "CREATE PROCEDURE getTeamPlayoffStatus(_in_teamID String, _in_year integer) AS VAR teamStatus string; teamStatus = (SELECT CASE WHEN playoff != '' THEN 'Yes' ELSE 'No' END FROM teams WHERE teamID = _in_teamID AND year = _in_year); THROW 'Did team ' || _in_teamID || ' make it to the playoffs in ' || _in_year || '? ' || teamStatus || '.'; END_PROCEDURE;"
  },
  {
    "number": 145,
    "task": "Create a stored procedure that returns the team with the least losses in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the team with the least losses in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE getLeastLosingTeam(_in_year IN NUMBER) IS leastLosingTeam VARCHAR2(255); BEGIN SELECT teamID INTO leastLosingTeam FROM (SELECT teamID FROM teams WHERE year = _in_year ORDER BY losses ASC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('The team with the least losses for year ' || TO_CHAR(_in_year) || ' is ' || leastLosingTeam || '.'); END;",
    "output": "CREATE PROCEDURE getLeastLosingTeam(_in_year integer) AS VAR leastLosingTeam String; leastLosingTeam = (SELECT teamID FROM teams WHERE year = _in_year ORDER BY losses ASC LIMIT 1); THROW 'The team with the least losses for year ' || _in_year || ' is ' || leastLosingTeam || '.'; END_PROCEDURE;"
  },
  {
    "number": 146,
    "task": "Write a Stored Procedure to return the name of the hockey player with a given number.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure to return the name of the hockey player with a given number.",
    "input": "CREATE OR REPLACE PROCEDURE getHockeyPlayerNameById_in(id_in IN NUMBER) IS playerName VARCHAR2(255); BEGIN SELECT Name INTO playerName FROM Hockey WHERE Id = id_in; DBMS_OUTPUT.PUT_LINE(playerName); END;",
    "output": "CREATE PROCEDURE getHockeyPlayerNameById_in(IN id_in BIGINT) AS VAR playerName STRING = (SELECT Name FROM Hockey WHERE Id = id_in); THROW playerName; END_PROCEDURE;"
  },
  {
    "number": 147,
    "task": "Create a Stored Procedure to update the position of a hockey player using playerId as an input",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a Stored Procedure to update the position of a hockey player using playerId as an input",
    "input": "CREATE OR REPLACE PROCEDURE updatePositionById_in(id_in IN NUMBER, newPosition_in IN VARCHAR2) IS BEGIN UPDATE Hockey SET Position = newPosition_in WHERE id = id_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE updatePositionById_in(IN id_in BIGINT, IN newPosition_in STRING) AS UPDATE Hockey SET Position = newPosition_in WHERE id = id_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 148,
    "task": "Write a Stored Procedure that returns the total number of players in a given hockey team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure that returns the total number of players in a given hockey team.",
    "input": "CREATE OR REPLACE PROCEDURE countPlayersByTeam_in(team_in IN VARCHAR2) IS countPlayers NUMBER; BEGIN SELECT COUNT(Id) INTO countPlayers FROM Hockey WHERE Team = team_in; DBMS_OUTPUT.PUT_LINE(countPlayers); END;",
    "output": "CREATE PROCEDURE countPlayersByTeam_in(IN team_in STRING) AS VAR countPlayers BIGINT = (SELECT COUNT(Id) FROM Hockey WHERE Team = team_in); THROW countPlayers; END_PROCEDURE;"
  },
  {
    "number": 149,
    "task": "Design a Stored Procedure to calculate the average height of all players in the 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a Stored Procedure to calculate the average height of all players in the 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE calculateAveragePlayerHeight IS averageHeight NUMBER; BEGIN SELECT AVG(height) INTO averageHeight FROM players; DBMS_OUTPUT.PUT_LINE(averageHeight); END;",
    "output": "CREATE PROCEDURE calculateAveragePlayerHeight() AS VAR averageHeight FLOAT = (SELECT AVG(height) FROM players); THROW averageHeight; END_PROCEDURE;"
  },
  {
    "number": 150,
    "task": "Write a Stored Procedure that returns the player with the most goals in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure that returns the player with the most goals in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE findTopScorerByYear_in(year_in IN NUMBER) IS topScorerId VARCHAR2(255); BEGIN SELECT playerID INTO topScorerId FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE(topScorerId); END;",
    "output": "CREATE PROCEDURE findTopScorerByYear_in(IN year_in INTEGER) AS VAR topScorerId STRING = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC LIMIT 1); THROW topScorerId; END_PROCEDURE;"
  },
  {
    "number": 151,
    "task": "Create a Stored Procedure to add a new player into the 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a Stored Procedure to add a new player into the 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE insertNewPlayer_in(id_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2, height_in IN NUMBER, weight_in IN NUMBER, firstNHL_in IN NUMBER, lastNHL_in IN NUMBER, position_in IN VARCHAR2, birthYear_in IN NUMBER, birthMon_in IN NUMBER, birtDay_in IN NUMBER, birthCountry_in IN VARCHAR2, birthState_in IN VARCHAR2, birthCity_in IN VARCHAR2) IS BEGIN INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES(id_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birtDay_in, birthCountry_in, birthState_in, birthCity_in); DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE insertNewPlayer_in(IN id_in STRING, IN firstName_in STRING, IN lastName_in STRING, IN height_in INTEGER, IN weight_in INTEGER, IN firstNHL_in INTEGER, IN lastNHL_in INTEGER, IN position_in STRING, IN birthYear_in INTEGER, IN birthMon_in INTEGER, IN birtDay_in INTEGER, IN birthCountry_in STRING, IN birthState_in STRING, IN birthCity_in STRING) AS INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES(id_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birtDay_in, birthCountry_in, birthState_in, birthCity_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 152,
    "task": "Design a Stored Procedure to update the conference of a team in the 'teams' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a Stored Procedure to update the conference of a team in the 'teams' table.",
    "input": "CREATE OR REPLACE PROCEDURE updateTeamConference_in(year_in IN NUMBER, teamId_in IN VARCHAR2, newConference_in IN VARCHAR2) IS BEGIN UPDATE teams SET conferenceID = newConference_in WHERE year = year_in AND teamID = teamId_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE updateTeamConference_in(IN year_in INTEGER, IN teamId_in STRING, IN newConference_in STRING) AS UPDATE teams SET conferenceID = newConference_in WHERE year = year_in AND teamID = teamId_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 153,
    "task": "Write a Stored Procedure that deletes a player from the 'players' table using the playerID as input.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure that deletes a player from the 'players' table using the playerID as input.",
    "input": "CREATE OR REPLACE PROCEDURE deletePlayerById_in(playerId_in IN VARCHAR2) IS BEGIN DELETE FROM players WHERE playerID = playerId_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE deletePlayerById_in(IN playerId_in STRING) AS DELETE FROM players WHERE playerID = playerId_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 154,
    "task": "Create a Stored Procedure to count the total games played by a player in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a Stored Procedure to count the total games played by a player in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE countGamesPlayedByPlayer_in(playerId_in IN VARCHAR2, year_in IN NUMBER) IS countGames NUMBER; BEGIN SELECT gamesPlayed INTO countGames FROM scoring WHERE playerID = playerId_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(countGames); END;",
    "output": "CREATE PROCEDURE countGamesPlayedByPlayer_in(IN playerId_in STRING, IN year_in INTEGER) AS VAR countGames INTEGER = (SELECT gamesPlayed FROM scoring WHERE playerID = playerId_in AND year = year_in); THROW countGames; END_PROCEDURE;"
  },
  {
    "number": 155,
    "task": "Write a Stored Procedure to find the team who ranks the highest in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure to find the team who ranks the highest in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE findTopRankedTeamByYear_in(year_in IN NUMBER) IS topRankedTeamId VARCHAR2(255); BEGIN SELECT teamID INTO topRankedTeamId FROM (SELECT teamID FROM teams WHERE year = year_in ORDER BY rank) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE(topRankedTeamId); END;",
    "output": "CREATE PROCEDURE findTopRankedTeamByYear_in(IN year_in INTEGER) AS VAR topRankedTeamId STRING = (SELECT teamID FROM teams WHERE year = year_in ORDER BY rank LIMIT 1); THROW topRankedTeamId; END_PROCEDURE;"
  },
  {
    "number": 156,
    "task": "Write a Stored Procedure to find the youngest player in 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure to find the youngest player in 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE findYoungestPlayer() IS youngestPlayerId VARCHAR2(255); BEGIN SELECT playerID INTO youngestPlayerId FROM (SELECT playerID FROM players ORDER BY birthYear DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE(youngestPlayerId); END;",
    "output": "CREATE PROCEDURE findYoungestPlayer() AS VAR youngestPlayerId STRING = (SELECT playerID FROM players ORDER BY birthYear DESC LIMIT 1); THROW youngestPlayerId; END_PROCEDURE;"
  },
  {
    "number": 157,
    "task": "Create a Stored Procedure that updates the jersey number of a player in the Hockey table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a Stored Procedure that updates the jersey number of a player in the Hockey table.",
    "input": "CREATE OR REPLACE PROCEDURE updateJerseyNumber_in(id_in IN NUMBER, newNumber_in IN NUMBER) IS BEGIN UPDATE Hockey SET Number = newNumber_in WHERE id = id_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE updateJerseyNumber_in(IN id_in BIGINT, IN newNumber_in INTEGER) AS UPDATE Hockey SET Number = newNumber_in WHERE id = id_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 158,
    "task": "Write a Stored Procedure to find the oldest player in 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure to find the oldest player in 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE findOldestPlayer() IS oldestPlayerId VARCHAR2(255); BEGIN SELECT playerID INTO oldestPlayerId FROM (SELECT playerID FROM players ORDER BY birthYear ASC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE(oldestPlayerId); END;",
    "output": "CREATE PROCEDURE findOldestPlayer() AS VAR oldestPlayerId STRING = (SELECT playerID FROM players ORDER BY birthYear ASC LIMIT 1); THROW oldestPlayerId; END_PROCEDURE;"
  },
  {
    "number": 159,
    "task": "Create a Stored Procedure to count the total number of teams in the 'teams' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a Stored Procedure to count the total number of teams in the 'teams' table.",
    "input": "CREATE OR REPLACE PROCEDURE countTotalTeams() IS countTeams NUMBER; BEGIN SELECT COUNT(teamID) INTO countTeams FROM teams; DBMS_OUTPUT.PUT_LINE(countTeams); END;",
    "output": "CREATE PROCEDURE countTotalTeams() AS VAR countTeams BIGINT = (SELECT COUNT(teamID) FROM teams); THROW countTeams; END_PROCEDURE;"
  },
  {
    "number": 160,
    "task": "Write a Stored Procedure that returns the total goals scored by a team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure that returns the total goals scored by a team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE findTotalGoalsScored_in(year_in IN NUMBER, teamId_in IN VARCHAR2) IS totalGoals NUMBER; BEGIN SELECT SUM(goals) INTO totalGoals FROM scoring WHERE teamID = teamId_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(totalGoals); END;",
    "output": "CREATE PROCEDURE findTotalGoalsScored_in(IN year_in INTEGER, IN teamId_in STRING) AS VAR totalGoals INTEGER = (SELECT SUM(goals) FROM scoring WHERE teamID = teamId_in AND year = year_in); THROW totalGoals; END_PROCEDURE;"
  },
  {
    "number": 161,
    "task": "Design a Stored Procedure to update the lastNHL field of a player in the 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a Stored Procedure to update the lastNHL field of a player in the 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerLastNHL_in(playerId_in IN VARCHAR2, newLastNHL_in IN NUMBER) IS BEGIN UPDATE players SET lastNHL = newLastNHL_in WHERE playerID = playerId_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE updatePlayerLastNHL_in(IN playerId_in STRING, IN newLastNHL_in INTEGER) AS UPDATE players SET lastNHL = newLastNHL_in WHERE playerID = playerId_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 162,
    "task": "Create a Stored Procedure to add a new team into the 'teams' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a Stored Procedure to add a new team into the 'teams' table.",
    "input": "CREATE OR REPLACE PROCEDURE insertNewTeam_in(year_in IN NUMBER, teamId_in IN VARCHAR2, name_in IN VARCHAR2, conferenceId_in IN VARCHAR2, divisionId_in IN VARCHAR2, rank_in IN NUMBER, playoff_in IN VARCHAR2, games_in IN NUMBER, wins_in IN NUMBER, losses_in IN NUMBER, ties_in IN NUMBER, overtimeLosses_in IN NUMBER) IS BEGIN INSERT INTO teams(year, teamID, name, conferenceID, divisionID, rank, playoff, games, wins, losses, ties, overtimeLosses) VALUES(year_in, teamId_in, name_in, conferenceId_in, divisionId_in, rank_in, playoff_in, games_in, wins_in, losses_in, ties_in, overtimeLosses_in); DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE insertNewTeam_in(IN year_in INTEGER, IN teamId_in STRING, IN name_in STRING, IN conferenceId_in STRING, IN divisionId_in STRING, IN rank_in INTEGER, IN playoff_in STRING, IN games_in INTEGER, IN wins_in INTEGER, IN losses_in INTEGER, IN ties_in INTEGER, IN overtimeLosses_in INTEGER) AS INSERT INTO teams(year, teamID, name, conferenceID, divisionID, rank, playoff, games, wins, losses, ties, overtimeLosses) VALUES(year_in, teamId_in, name_in, conferenceId_in, divisionId_in, rank_in, playoff_in, games_in, wins_in, losses_in, ties_in, overtimeLosses_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 163,
    "task": "Write a Stored Procedure that deletes a team from the 'teams' table using the teamID and year as inputs.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure that deletes a team from the 'teams' table using the teamID and year as inputs.",
    "input": "CREATE OR REPLACE PROCEDURE deleteTeam_byYearTeamId_in(year_in IN NUMBER, teamId_in IN VARCHAR2) IS BEGIN DELETE FROM teams WHERE year = year_in AND teamID = teamId_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE deleteTeam_byYearTeamId_in(IN year_in INTEGER, IN teamId_in STRING) AS DELETE FROM teams WHERE year = year_in AND teamID = teamId_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 164,
    "task": "Design a Stored Procedure to update the birthCountry of a player in the 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a Stored Procedure to update the birthCountry of a player in the 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerBirthCountry_in(playerId_in IN VARCHAR2, newBirthCountry_in IN VARCHAR2) IS BEGIN UPDATE players SET birthCountry = newBirthCountry_in WHERE playerID = playerId_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE updatePlayerBirthCountry_in(IN playerId_in STRING, IN newBirthCountry_in STRING) AS UPDATE players SET birthCountry = newBirthCountry_in WHERE playerID = playerId_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 165,
    "task": "Create a stored procedure to find a hockey player based on their number.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find a hockey player based on their number.",
    "input": "CREATE OR REPLACE PROCEDURE findPlayer(number_in IN NUMBER) IS name VARCHAR2(255); BEGIN SELECT Name INTO name FROM Hockey WHERE Number = number_in; DBMS_OUTPUT.PUT_LINE(name); END;",
    "output": "CREATE OR REPLACE PROCEDURE findPlayer(number_in INTEGER) AS VAR name STRING; name = (SELECT Name FROM Hockey WHERE Number = number_in); THROW name; END_PROCEDURE;"
  },
  {
    "number": 166,
    "task": "Create a stored procedure to count the number of players in a specific position.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to count the number of players in a specific position.",
    "input": "CREATE OR REPLACE PROCEDURE countPosition(position_in IN VARCHAR2) IS count NUMBER; BEGIN SELECT COUNT(*) INTO count FROM Hockey WHERE Position = position_in; DBMS_OUTPUT.PUT_LINE(count); END;",
    "output": "CREATE OR REPLACE PROCEDURE countPosition(position_in STRING) AS VAR count INTEGER; count = (SELECT count(*) FROM Hockey WHERE Position = position_in); THROW count; END_PROCEDURE;"
  },
  {
    "number": 167,
    "task": "Create a stored procedure to find the team of a player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the team of a player.",
    "input": "CREATE OR REPLACE PROCEDURE findTeam(name_in IN VARCHAR2) IS team VARCHAR2(255); BEGIN SELECT Team INTO team FROM Hockey WHERE Name = name_in; DBMS_OUTPUT.PUT_LINE(team); END;",
    "output": "CREATE OR REPLACE PROCEDURE findTeam(name_in STRING) AS VAR team STRING; team = (SELECT Team FROM Hockey WHERE Name = name_in); THROW team; END_PROCEDURE;"
  },
  {
    "number": 168,
    "task": "How to find how many games a player has played in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to find how many games a player has played in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE findGamesPlayed(playerID_in IN VARCHAR2, year_in IN NUMBER) IS gamesPlayed NUMBER; BEGIN SELECT gamesPlayed INTO gamesPlayed FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(gamesPlayed); END;",
    "output": "CREATE OR REPLACE PROCEDURE findGamesPlayed(playerID_in STRING, year_in INTEGER) AS VAR gamesPlayed INTEGER; gamesPlayed = (SELECT gamesPlayed FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW gamesPlayed; END_PROCEDURE;"
  },
  {
    "number": 169,
    "task": "Create a stored procedure to find the number of goals scored by a player in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the number of goals scored by a player in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE findGoals(playerID_in IN VARCHAR2, year_in IN NUMBER) IS goals NUMBER; BEGIN SELECT goals INTO goals FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(goals); END;",
    "output": "CREATE OR REPLACE PROCEDURE findGoals(playerID_in STRING, year_in INTEGER) AS VAR goals INTEGER; goals = (SELECT goals FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW goals; END_PROCEDURE;"
  },
  {
    "number": 170,
    "task": "Create a stored procedure to find the total minutes of penalty by a player in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the total minutes of penalty by a player in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE findPenaltyMinutes(playerID_in IN VARCHAR2, year_in IN NUMBER) IS penaltyMinutes NUMBER; BEGIN SELECT penaltyMinutes INTO penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(penaltyMinutes); END;",
    "output": "CREATE OR REPLACE PROCEDURE findPenaltyMinutes(playerID_in STRING, year_in INTEGER) AS VAR penaltyMinutes INTEGER; penaltyMinutes = (SELECT penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW penaltyMinutes; END_PROCEDURE;"
  },
  {
    "number": 171,
    "task": "Create a stored procedure to count the number of players in a specific team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to count the number of players in a specific team.",
    "input": "CREATE OR REPLACE PROCEDURE countTeamMembers(team_in IN VARCHAR2) IS count NUMBER; BEGIN SELECT COUNT(*) INTO count FROM Hockey WHERE Team = team_in; DBMS_OUTPUT.PUT_LINE(count); END;",
    "output": "CREATE OR REPLACE PROCEDURE countTeamMembers(team_in STRING) AS VAR count INTEGER; count = (SELECT count(*) FROM Hockey WHERE Team = team_in); THROW count; END_PROCEDURE;"
  },
  {
    "number": 172,
    "task": "Create a Stored Procedure to count the number of teams in a conference in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a Stored Procedure to count the number of teams in a conference in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE countTeamsInConference(conferenceID_in IN VARCHAR2, year_in IN NUMBER) IS count NUMBER; BEGIN SELECT COUNT(DISTINCT teamID) INTO count FROM teams WHERE conferenceID = conferenceID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(count); END;",
    "output": "CREATE OR REPLACE PROCEDURE countTeamsInConference(conferenceID_in STRING, year_in INTEGER) AS VAR count INTEGER; count = (SELECT count(distinct teamID) FROM teams WHERE conferenceID = conferenceID_in AND year = year_in); THROW count; END_PROCEDURE;"
  },
  {
    "number": 173,
    "task": "Write a Stored Procedure to count the number of ties by a particular team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure to count the number of ties by a particular team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE countTies(teamID_in IN VARCHAR2, year_in IN NUMBER) IS ties NUMBER; BEGIN SELECT ties INTO ties FROM teams WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(ties); END;",
    "output": "CREATE OR REPLACE PROCEDURE countTies(teamID_in STRING, year_in INTEGER) AS VAR ties INTEGER; ties = (SELECT ties FROM teams WHERE teamID = teamID_in AND year = year_in); THROW ties; END_PROCEDURE;"
  },
  {
    "number": 174,
    "task": "How to find the number of wins by a specific team in a year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to find the number of wins by a specific team in a year?",
    "input": "CREATE OR REPLACE PROCEDURE countWins(teamID_in IN VARCHAR2, year_in IN NUMBER) IS wins NUMBER; BEGIN SELECT wins INTO wins FROM teams WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(wins); END;",
    "output": "CREATE OR REPLACE PROCEDURE countWins(teamID_in STRING, year_in INTEGER) AS VAR wins INTEGER; wins = (SELECT wins FROM teams WHERE teamID = teamID_in AND year = year_in); THROW wins; END_PROCEDURE;"
  },
  {
    "number": 175,
    "task": "Write a Stored Procedure to find the ranking of a team in a specified year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure to find the ranking of a team in a specified year.",
    "input": "CREATE OR REPLACE PROCEDURE findRank(teamID_in IN VARCHAR2, year_in IN NUMBER) IS rank NUMBER; BEGIN SELECT rank INTO rank FROM teams WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(rank); END;",
    "output": "CREATE OR REPLACE PROCEDURE findRank(teamID_in STRING, year_in INTEGER) AS VAR rank INTEGER; rank = (SELECT rank FROM teams WHERE teamID = teamID_in AND year = year_in); THROW rank; END_PROCEDURE;"
  },
  {
    "number": 176,
    "task": "Write a Stored Procedure to find the number of assists by a player in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure to find the number of assists by a player in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE findAssists(playerID_in IN VARCHAR2, year_in IN NUMBER) IS assists NUMBER; BEGIN SELECT assists INTO assists FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(assists); END;",
    "output": "CREATE OR REPLACE PROCEDURE findAssists(playerID_in STRING, year_in INTEGER) AS VAR assists INTEGER; assists = (SELECT assists FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW assists; END_PROCEDURE;"
  },
  {
    "number": 177,
    "task": "Create a stored procedure to find the first year a player played in the NHL.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the first year a player played in the NHL.",
    "input": "CREATE OR REPLACE PROCEDURE findFirstNHLYear(playerID_in IN VARCHAR2) IS firstNHL NUMBER; BEGIN SELECT firstNHL INTO firstNHL FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(firstNHL); END;",
    "output": "CREATE OR REPLACE PROCEDURE findFirstNHLYear(playerID_in STRING) AS VAR firstNHL INTEGER; firstNHL = (SELECT firstNHL FROM players WHERE playerID = playerID_in); THROW firstNHL; END_PROCEDURE;"
  },
  {
    "number": 178,
    "task": "Write a Stored Procedure to find the last year a player played in the NHL.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure to find the last year a player played in the NHL.",
    "input": "CREATE OR REPLACE PROCEDURE findLastNHLYear(playerID_in IN VARCHAR2) IS lastNHL NUMBER; BEGIN SELECT lastNHL INTO lastNHL FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(lastNHL); END;",
    "output": "CREATE OR REPLACE PROCEDURE findLastNHLYear(playerID_in STRING) AS VAR lastNHL INTEGER; lastNHL = (SELECT lastNHL FROM players WHERE playerID = playerID_in); THROW lastNHL; END_PROCEDURE;"
  },
  {
    "number": 179,
    "task": "Create a Stored Procedure to find the birth city of a player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a Stored Procedure to find the birth city of a player.",
    "input": "CREATE OR REPLACE PROCEDURE findBirthCity(playerID_in IN VARCHAR2) IS birthCity VARCHAR2(255); BEGIN SELECT birthCity INTO birthCity FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(birthCity); END;",
    "output": "CREATE OR REPLACE PROCEDURE findBirthCity(playerID_in STRING) AS VAR birthCity STRING; birthCity = (SELECT birthCity FROM players WHERE playerID = playerID_in); THROW birthCity; END_PROCEDURE;"
  },
  {
    "number": 180,
    "task": "Write a Stored Procedure to find the birth country of a player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure to find the birth country of a player.",
    "input": "CREATE OR REPLACE PROCEDURE findBirthCountry(playerID_in IN VARCHAR2) IS birthCountry VARCHAR2(255); BEGIN SELECT birthCountry INTO birthCountry FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(birthCountry); END;",
    "output": "CREATE OR REPLACE PROCEDURE findBirthCountry(playerID_in STRING) AS VAR birthCountry STRING; birthCountry = (SELECT birthCountry FROM players WHERE playerID = playerID_in); THROW birthCountry; END_PROCEDURE;"
  },
  {
    "number": 181,
    "task": "Create a Stored Procedure to find the position of a player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a Stored Procedure to find the position of a player.",
    "input": "CREATE OR REPLACE PROCEDURE findPosition(playerID_in IN VARCHAR2) IS position VARCHAR2(255); BEGIN SELECT position INTO position FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(position); END;",
    "output": "CREATE OR REPLACE PROCEDURE findPosition(playerID_in STRING) AS VAR position STRING; position = (SELECT position FROM players WHERE playerID = playerID_in); THROW position; END_PROCEDURE;"
  },
  {
    "number": 182,
    "task": "How to find the weight of a player using a stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to find the weight of a player using a stored procedure?",
    "input": "CREATE OR REPLACE PROCEDURE findWeight(playerID_in IN VARCHAR2) IS weight NUMBER; BEGIN SELECT weight INTO weight FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(weight); END;",
    "output": "CREATE OR REPLACE PROCEDURE findWeight(playerID_in STRING) AS VAR weight INTEGER; weight = (SELECT weight FROM players WHERE playerID = playerID_in); THROW weight; END_PROCEDURE;"
  },
  {
    "number": 183,
    "task": "How do you create a stored procedure that fetches player details using their id?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure that fetches player details using their id?",
    "input": "CREATE OR REPLACE PROCEDURE fetch_player_by_id(playerId_in IN VARCHAR2) IS player_detail_string VARCHAR2(255); BEGIN SELECT firstName || ' ' || lastName || ', ' || position INTO player_detail_string FROM players WHERE playerID = playerId_in; DBMS_OUTPUT.PUT_LINE(player_detail_string); END;",
    "output": "CREATE OR REPLACE PROCEDURE fetch_player_by_id(IN playerId_in STRING) AS VAR player_detail_string STRING; player_detail_string = (SELECT firstName || ' ' || lastName || ', ' || position FROM players WHERE playerID = playerId_in); THROW player_detail_string; END_PROCEDURE;"
  },
  {
    "number": 184,
    "task": "How to create a procedure returning a team based on the team's year and id?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a procedure returning a team based on the team's year and id?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_by_year_id(year_in IN NUMBER, teamID_in IN VARCHAR2) IS team_name VARCHAR2(255); BEGIN SELECT name INTO team_name FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE(team_name); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_team_by_year_id(IN year_in INTEGER, IN teamID_in STRING) AS VAR team_name STRING; team_name = (SELECT name FROM teams WHERE year = year_in AND teamID = teamID_in); THROW team_name; END_PROCEDURE;"
  },
  {
    "number": 185,
    "task": "How to create a stored procedure to return the total assists by a player in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to return the total assists by a player in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE total_assists_by_player_year(playerID_in IN VARCHAR2, year_in IN NUMBER) IS total_assists NUMBER; BEGIN SELECT sum(assists) INTO total_assists FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE total_assists_by_player_year(IN playerID_in STRING, IN year_in INTEGER) AS VAR total_assists INTEGER; total_assists = (SELECT sum(assists) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW total_assists; END_PROCEDURE;"
  },
  {
    "number": 186,
    "task": "How to create a stored procedure to calculate a team's total wins in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to calculate a team's total wins in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE calculate_wins_by_team_year(teamId_in IN VARCHAR2, year_in IN NUMBER) IS total_wins NUMBER; BEGIN SELECT wins INTO total_wins FROM teams WHERE year = year_in AND teamID = teamId_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE calculate_wins_by_team_year(IN teamId_in STRING, IN year_in INTEGER) AS VAR total_wins INTEGER; total_wins = (SELECT wins FROM teams WHERE year = year_in AND teamID = teamId_in); THROW total_wins; END_PROCEDURE;"
  },
  {
    "number": 187,
    "task": "How to create a procedure that fetches a player height and weight using a player id?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a procedure that fetches a player height and weight using a player id?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_details_by_id(playerId_in IN VARCHAR2) IS player_details VARCHAR2(100); BEGIN SELECT height || ' ' || weight INTO player_details FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_details_by_id(IN playerId_in STRING) AS VAR player_details STRING; player_details = (SELECT height || ' ' || weight FROM players WHERE playerID = playerId_in); THROW player_details; END_PROCEDURE;"
  },
  {
    "number": 188,
    "task": "How to create a stored procedure to get the birth year, month, and date of a player using the player id?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to get the birth year, month, and date of a player using the player id?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birth_info_by_id(playerId_in IN VARCHAR2) IS birth_info VARCHAR2(100); BEGIN SELECT birthYear || '-' || birthMon || '-' || birthDay INTO birth_info FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_birth_info_by_id(IN playerId_in STRING) AS VAR birth_info STRING; birth_info = (SELECT birthYear || '-' || birthMon || '-' || birthDay FROM players WHERE playerID = playerId_in); THROW birth_info; END_PROCEDURE;"
  },
  {
    "number": 189,
    "task": "How to create a stored procedure to return the total goals by a player in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to return the total goals by a player in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE total_goals_by_player_year(playerID_in IN VARCHAR2, year_in IN NUMBER) IS total_goals NUMBER; BEGIN SELECT sum(goals) INTO total_goals FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE total_goals_by_player_year(IN playerID_in STRING, IN year_in INTEGER) AS VAR total_goals INTEGER; total_goals = (SELECT sum(goals) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW total_goals; END_PROCEDURE;"
  },
  {
    "number": 190,
    "task": "How do you create a stored procedure that calculates the average height of all players?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure that calculates the average height of all players?",
    "input": "CREATE OR REPLACE PROCEDURE calculate_avg_height IS avg_height NUMBER; BEGIN SELECT avg(height) INTO avg_height FROM players; END;",
    "output": "CREATE OR REPLACE PROCEDURE calculate_avg_height() AS VAR avg_height DOUBLE; avg_height = (SELECT avg(height) FROM players); THROW avg_height; END_PROCEDURE;"
  },
  {
    "number": 191,
    "task": "How to create a procedure to fetch total teams created in a particular year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a procedure to fetch total teams created in a particular year?",
    "input": "CREATE OR REPLACE PROCEDURE fetch_total_teams_in_year(year_in IN NUMBER) IS total_teams NUMBER; BEGIN SELECT count(*) INTO total_teams FROM teams WHERE year = year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE fetch_total_teams_in_year(IN year_in INTEGER) AS VAR total_teams INTEGER; total_teams = (SELECT count(*) FROM teams WHERE year = year_in); THROW total_teams; END_PROCEDURE;"
  },
  {
    "number": 192,
    "task": "How to create a stored procedure that calculates the average weight of all players?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that calculates the average weight of all players?",
    "input": "CREATE OR REPLACE PROCEDURE calculate_avg_weight IS avg_weight NUMBER; BEGIN SELECT avg(weight) INTO avg_weight FROM players; END;",
    "output": "CREATE PROCEDURE calculate_avg_weight() AS VAR avg_weight DOUBLE; avg_weight = (SELECT avg(weight) FROM players); THROW avg_weight; END_PROCEDURE;"
  },
  {
    "number": 193,
    "task": "How do you create a stored procedure to count the total number of teams?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to count the total number of teams?",
    "input": "CREATE OR REPLACE PROCEDURE count_total_teams IS total_teams NUMBER; BEGIN SELECT count(*) INTO total_teams FROM teams; END;",
    "output": "CREATE OR REPLACE PROCEDURE count_total_teams() AS VAR total_teams INTEGER; total_teams = (SELECT count(*) FROM teams); THROW total_teams; END_PROCEDURE;"
  },
  {
    "number": 194,
    "task": "How to create a procedure to get total losses by a team in a particular year using team id?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a procedure to get total losses by a team in a particular year using team id?",
    "input": "CREATE OR REPLACE PROCEDURE get_losses_by_team_year(teamId_in IN VARCHAR2, year_in IN NUMBER) IS total_losses NUMBER; BEGIN SELECT losses INTO total_losses FROM teams WHERE year = year_in AND teamID = teamId_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE get_losses_by_team_year(IN teamId_in STRING, IN year_in INTEGER) AS VAR total_losses INTEGER; total_losses = (SELECT losses FROM teams WHERE year = year_in AND teamID = teamId_in); THROW total_losses; END_PROCEDURE;"
  },
  {
    "number": 195,
    "task": "How to create a stored procedure to get the total games played by a player in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to get the total games played by a player in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE total_games_by_player_year(playerID_in IN VARCHAR2, year_in IN NUMBER) IS total_games NUMBER; BEGIN SELECT sum(gamesPlayed) INTO total_games FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE total_games_by_player_year(IN playerID_in STRING, IN year_in INTEGER) AS VAR total_games INTEGER; total_games = (SELECT sum(gamesPlayed) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW total_games; END_PROCEDURE;"
  },
  {
    "number": 196,
    "task": "How to create a procedure that fetches a team's conference, division, and rank using a team id and year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a procedure that fetches a team's conference, division, and rank using a team id and year?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_attributes_by_id_year(teamId_in IN VARCHAR2, year_in IN NUMBER) IS team_attributes VARCHAR2(100); BEGIN SELECT conferenceID || ', ' || divisionID || ', ' || rank INTO team_attributes FROM teams WHERE year = year_in AND teamID = teamId_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE get_team_attributes_by_id_year(IN teamId_in STRING, IN year_in INTEGER) AS VAR team_attributes STRING; team_attributes = (SELECT conferenceID || ', ' || divisionID || ', ' || rank FROM teams WHERE year = year_in AND teamID = teamId_in); THROW team_attributes; END_PROCEDURE;"
  },
  {
    "number": 197,
    "task": "How to create a stored procedure to calculate and return a team's total games in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to calculate and return a team's total games in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE total_games_by_team_year(teamId_in IN VARCHAR2, year_in IN NUMBER) IS total_games NUMBER; BEGIN SELECT games INTO total_games FROM teams WHERE teamID = teamId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE total_games_by_team_year(IN teamId_in STRING, IN year_in INTEGER) AS VAR total_games INTEGER; total_games = (SELECT games FROM teams WHERE teamID = teamId_in AND year = year_in); THROW total_games; END_PROCEDURE;"
  },
  {
    "number": 198,
    "task": "How to create a procedure to calculate and return the total ties by a team in a specific year using team id?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a procedure to calculate and return the total ties by a team in a specific year using team id?",
    "input": "CREATE OR REPLACE PROCEDURE total_ties_by_team_year(teamId_in IN VARCHAR2, year_in IN NUMBER) IS total_ties NUMBER; BEGIN SELECT ties INTO total_ties FROM teams WHERE teamID = teamId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE total_ties_by_team_year(IN teamId_in STRING, IN year_in INTEGER) AS VAR total_ties INTEGER; total_ties = (SELECT ties FROM teams WHERE year = year_in AND teamID = teamId_in); THROW total_ties; END_PROCEDURE;"
  },
  {
    "number": 199,
    "task": "How to create a stored procedure to get a player's birth country, state, and city using the player id?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to get a player's birth country, state, and city using the player id?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birth_location_by_id(playerId_in IN VARCHAR2) IS birth_location VARCHAR2(100); BEGIN SELECT birthCountry || ', ' || birthState || ', ' || birthCity INTO birth_location FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_birth_location_by_id(IN playerId_in STRING) AS VAR birth_location STRING; birth_location = (SELECT birthCountry || ', ' || birthState || ', ' || birthCity FROM players WHERE playerID = playerId_in); THROW birth_location; END_PROCEDURE;"
  },
  {
    "number": 200,
    "task": "How to create a procedure to fetch all records for a player from the scoring table using player id?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a procedure to fetch all records for a player from the scoring table using player id?",
    "input": "Due to PL/SQL limitations, this task can't be done using a simple stored procedure as in other DBMS. You would use a CURSOR and a record type in PL/SQL.",
    "output": "CREATE OR REPLACE PROCEDURE fetch_scoring_records_by_player_id(IN playerId_in STRING) AS VAR scoring_records STRING; scoring_records = (SELECT * FROM scoring WHERE playerID = playerId_in); THROW scoring_records; END_PROCEDURE;"
  },
  {
    "number": 201,
    "task": "How to create a stored procedure to calculate and return the total penalty minutes by a player in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to calculate and return the total penalty minutes by a player in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE total_penalty_by_player_year(playerID_in IN VARCHAR2, year_in IN NUMBER) IS total_penalty NUMBER; BEGIN SELECT sum(penaltyMinutes) INTO total_penalty FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE total_penalty_by_player_year(IN playerID_in STRING, IN year_in INTEGER) AS VAR total_penalty INTEGER; total_penalty = (SELECT sum(penaltyMinutes) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW total_penalty; END_PROCEDURE;"
  },
  {
    "number": 202,
    "task": "Create a stored procedure to find a given player's weight and height.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find a given player's weight and height.",
    "input": "CREATE OR REPLACE PROCEDURE find_player_spec(playerId_in IN VARCHAR2, outHeight OUT NUMBER, outWeight OUT NUMBER) AS BEGIN SELECT height, weight INTO outHeight, outWeight FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE find_player_spec(IN playerId_in STRING) AS VAR outHeight INTEGER, outWeight INTEGER; outHeight, outWeight = (SELECT height, weight FROM players WHERE playerID = playerId_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 203,
    "task": "Write a stored procedure to find a team's total matches for a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find a team's total matches for a given year.",
    "input": "CREATE OR REPLACE PROCEDURE total_matches(year_in IN NUMBER, teamID_in IN VARCHAR2) IS totalMatches NUMBER; BEGIN SELECT games INTO totalMatches FROM teams WHERE year = year_in AND teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE total_matches(IN year_in INTEGER, IN teamID_in STRING) AS VAR totalMatches INTEGER; totalMatches = (SELECT games FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 204,
    "task": "Create a stored procedure to find the scoring of a given player for a certain year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the scoring of a given player for a certain year.",
    "input": "CREATE OR REPLACE PROCEDURE player_scoring(playerId_in IN VARCHAR2, year_in IN NUMBER, goals OUT NUMBER, assists OUT NUMBER) IS BEGIN SELECT goals, assists INTO goals, assists FROM scoring WHERE playerID = playerId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE player_scoring(IN playerId_in STRING, IN year_in INTEGER) AS VAR goals INTEGER, assists INTEGER; goals, assists = (SELECT goals, assists FROM scoring WHERE playerID = playerId_in AND year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 205,
    "task": "Create a stored procedure that assigns the result of a simple query to a variable.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that assigns the result of a simple query to a variable.",
    "input": "CREATE OR REPLACE PROCEDURE assign_query_result AS x NUMBER; BEGIN SELECT COUNT(*) INTO x FROM players; END;",
    "output": "CREATE PROCEDURE assign_query_result AS VAR x INTEGER; x = (SELECT COUNT(*) FROM players); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 206,
    "task": "Write a stored procedure that declares variable name as type String and assigns it a value.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that declares variable name as type String and assigns it a value.",
    "input": "CREATE OR REPLACE PROCEDURE declare_string_var AS name VARCHAR2(20); BEGIN name := 'Elizabeth'; END;",
    "output": "CREATE PROCEDURE declare_string_var AS VAR name STRING; name = 'Elizabeth'; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 207,
    "task": "Write a stored procedure that declares a variable and assigns to it using an EXECUTE IMMEDIATE statement.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that declares a variable and assigns to it using an EXECUTE IMMEDIATE statement.",
    "input": "CREATE OR REPLACE PROCEDURE exec_immediate_var AS x NUMBER; BEGIN EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM players' INTO x; END;",
    "output": "CREATE PROCEDURE exec_immediate_var AS VAR x INTEGER; x = (EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM players'); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 208,
    "task": "Create a stored procedure to get details of a specific player using dynamic SQL.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get details of a specific player using dynamic SQL.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_details(playerId_in IN VARCHAR2) IS outPlayerDetails VARCHAR2(100); BEGIN EXECUTE IMMEDIATE 'SELECT firstName, lastName, height, weight FROM players WHERE playerID = ' || playerId_in INTO outPlayerDetails; END;",
    "output": "CREATE PROCEDURE get_player_details(IN playerId_in STRING) AS VAR outPlayerDetails STRING; outPlayerDetails = (EXECUTE IMMEDIATE 'SELECT firstName, lastName, height, weight FROM players WHERE playerID = ' || playerId_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 209,
    "task": "Create a stored procedure that assigns values to multiple variables using a single SELECT statement.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that assigns values to multiple variables using a single SELECT statement.",
    "input": "CREATE OR REPLACE PROCEDURE assign_multiple_vars(player_number_in IN NUMBER) IS playerName VARCHAR2(20); playerPos VARCHAR2(20); playerTeam VARCHAR2(20); BEGIN SELECT name, position, team INTO playerName, playerPos, playerTeam FROM hockey WHERE number = player_number_in; END;",
    "output": "CREATE PROCEDURE assign_multiple_vars(IN player_number_in INTEGER) AS VAR playerName STRING, playerPos STRING, playerTeam STRING; playerName, playerPos, playerTeam = (SELECT name, position, team FROM hockey WHERE number = player_number_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 210,
    "task": "Write a stored procedure that declares a variable and assigns a value separately.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that declares a variable and assigns a value separately.",
    "input": "CREATE OR REPLACE PROCEDURE separate_assign AS name VARCHAR2(20); BEGIN name := 'Elizabeth'; END;",
    "output": "CREATE PROCEDURE separate_assign AS VAR name STRING; name = 'Elizabeth'; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 211,
    "task": "Write a stored procedure to find a given team's wins and losses for a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find a given team's wins and losses for a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE find_team_record(year_in IN NUMBER, teamID_in IN VARCHAR2) IS outWins NUMBER; outLosses NUMBER; BEGIN SELECT wins, losses INTO outWins, outLosses FROM teams WHERE year = year_in AND teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE find_team_record(IN year_in INTEGER, IN teamID_in STRING) AS VAR outWins INTEGER, outLosses INTEGER; outWins, outLosses = (SELECT wins, losses FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 212,
    "task": "Create a stored procedure to find all players' details born in a specific country.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find all players' details born in a specific country.",
    "input": "Due to PL/SQL limitations, this task can't be done using a simple stored procedure as in other DBMS. You would use a CURSOR and a record type in PL/SQL.",
    "output": "CREATE PROCEDURE players_from_country(IN birthCountry_in STRING) AS VAR playerDetails STRING; playerDetails = (EXECUTE IMMEDIATE 'SELECT playerID, firstName, lastName FROM players WHERE birthCountry = ' || birthCountry_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 213,
    "task": "Create a stored procedure to return a player's birth details using playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return a player's birth details using playerID.",
    "input": "CREATE OR REPLACE PROCEDURE get_birth_info(playerId_in IN VARCHAR2) IS birthDetails VARCHAR2(100); BEGIN SELECT TO_CHAR(birthYear) || ', ' || TO_CHAR(birthMon) || ', ' || TO_CHAR(birthDay) INTO birthDetails FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE get_birth_info(IN playerId_in STRING) AS VAR birthDetails STRING; birthDetails = (SELECT birthYear, birthMon, birthDay FROM players WHERE playerID = playerId_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 214,
    "task": "Create a stored procedure to return player's total goals in a year using playerId.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return player's total goals in a year using playerId.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_goals(playerId_in IN VARCHAR2, year_in IN NUMBER) IS totalGoals NUMBER; BEGIN SELECT goals INTO totalGoals FROM scoring WHERE playerID = playerId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_player_goals(IN playerId_in STRING, IN year_in INTEGER) AS VAR totalGoals INTEGER; totalGoals = (SELECT goals FROM scoring WHERE playerID = playerId_in AND year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 215,
    "task": "Create a stored procedure to return Birth details of all players.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return Birth details of all players.",
    "input": "Due to PL/SQL limitations, this task can't be done using a simple stored procedure as in other DBMS. You would use a CURSOR and a record type in PL/SQL.",
    "output": "CREATE PROCEDURE get_all_birth_info AS VAR birthDetails STRING; birthDetails = (SELECT playerID, birthYear, birthMon, birthDay FROM players); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 216,
    "task": "Create a stored procedure to return a team's conference and division details using teamId.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return a team's conference and division details using teamId.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_details(team_id_in IN VARCHAR2) IS teamInfo VARCHAR2(100); BEGIN SELECT TO_CHAR(conferenceID) || ', ' || TO_CHAR(divisionID) INTO teamInfo FROM teams WHERE teamID = team_id_in; END;",
    "output": "CREATE PROCEDURE get_team_details(IN team_id_in STRING) AS VAR teamInfo STRING; teamInfo = (SELECT conferenceID, divisionID FROM teams WHERE teamID = team_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 217,
    "task": "Write a stored procedure to return all playerIDs and their corresponding last NHL year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to return all playerIDs and their corresponding last NHL year.",
    "input": "Due to PL/SQL limitations, this task can't be done using a simple stored procedure as in other DBMS. You would use a CURSOR and a record type in PL/SQL.",
    "output": "CREATE PROCEDURE get_last_NHL AS VAR nhlDetails STRING; nhlDetails = (SELECT playerID, lastNHL FROM players); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 218,
    "task": "Write a NuoDB SQL Stored Procedure that retrieves a hockey player's name, position and team based on a provided number.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that retrieves a hockey player's name, position and team based on a provided number.",
    "input": "CREATE OR REPLACE PROCEDURE retrieve_player_info(playerNumber_in IN NUMBER) IS playerName VARCHAR2(20); playerPosition VARCHAR2(20); playerTeam VARCHAR2(20); BEGIN SELECT Name, Position , Team INTO playerName, playerPosition, playerTeam FROM Hockey WHERE Number = playerNumber_in; END;",
    "output": "CREATE PROCEDURE retrieve_player_info(IN playerNumber_in INTEGER) AS VAR playerName STRING, playerPosition STRING, playerTeam STRING; playerName, playerPosition, playerTeam = (SELECT Name, Position , Team FROM Hockey WHERE Number = playerNumber_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 219,
    "task": "Create a NuoDB SQL Stored Procedure that modifies a player's position in the 'Hockey' table for a given id.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that modifies a player's position in the 'Hockey' table for a given id.",
    "input": "CREATE OR REPLACE PROCEDURE change_position(playerId_in IN NUMBER, newPosition_in IN VARCHAR2) IS BEGIN UPDATE Hockey SET Position = newPosition_in WHERE Id = playerId_in; END;",
    "output": "CREATE PROCEDURE change_position(IN playerId_in BIGINT, IN newPosition_in STRING) AS UPDATE Hockey SET Position = newPosition_in WHERE Id = playerId_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 220,
    "task": "Design a NuoDB SQL Stored Procedure that lists names and weights of all players with an weight above a certain value.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a NuoDB SQL Stored Procedure that lists names and weights of all players with an weight above a certain value.",
    "input": "Due to PL/SQL limitations, this task can't be done using a simple stored procedure as in other DBMS. You would use a CURSOR and a record type in PL/SQL.",
    "output": "CREATE PROCEDURE find_heavy_players(IN weight_in INTEGER) AS VAR playerName STRING, playerWeight INTEGER; playerName, playerWeight = (SELECT firstName, weight FROM players WHERE weight > weight_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 221,
    "task": "Write a NuoDB SQL Stored Procedure that changes a team's conference ID in the 'teams' table for a given team ID and year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that changes a team's conference ID in the 'teams' table for a given team ID and year.",
    "input": "CREATE OR REPLACE PROCEDURE change_conference(year_in IN NUMBER, teamID_in IN VARCHAR2, newConferenceID_in IN VARCHAR2) IS BEGIN UPDATE teams SET conferenceID = newConferenceID_in WHERE year = year_in AND teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE change_conference(IN year_in INTEGER, IN teamID_in varchar(3), IN newConferenceID_in varchar(2)) AS UPDATE teams SET conferenceID = newConferenceID_in WHERE year = year_in AND teamID = teamID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 222,
    "task": "Design a NuoDB SQL Stored Procedure that retrieves the information of a specific team in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a NuoDB SQL Stored Procedure that retrieves the information of a specific team in a given year.",
    "input": "Due to PL/SQL limitations, this task can't be done using a simple stored procedure as in other DBMS. You would use a CURSOR and a record type in PL/SQL.",
    "output": "CREATE PROCEDURE retrieve_team_info(IN year_in INTEGER, IN teamID_in varchar(3)) AS VAR teamName STRING, teamRank INTEGER, teamWins INTEGER; teamName, teamRank, teamWins = (SELECT name, rank, wins FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 223,
    "task": "Create a NuoDB SQL Stored Procedure that adds a new player to the 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that adds a new player to the 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE insert_player(playerID_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2, height_in IN NUMBER, weight_in IN NUMBER, firstNHL_in IN NUMBER, lastNHL_in IN NUMBER, position_in IN VARCHAR2, birthYear_in IN NUMBER, birthMon_in IN NUMBER, birthDay_in IN NUMBER, birthCountry_in IN VARCHAR2, birthState_in IN VARCHAR2, birthCity_in IN VARCHAR2) IS BEGIN INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES(playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); END;",
    "output": "CREATE PROCEDURE insert_player(IN playerID_in varchar(10), IN firstName_in varchar(32), IN lastName_in varchar(32), IN height_in INTEGER, IN weight_in INTEGER, IN firstNHL_in INTEGER, IN lastNHL_in INTEGER, IN position_in varchar(8), IN birthYear_in INTEGER, IN birthMon_in INTEGER, IN birthDay_in INTEGER, IN birthCountry_in varchar(32), IN birthState_in varchar(32), IN birthCity_in varchar(32)) AS INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES(playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 224,
    "task": "Generate a NuoDB SQL Stored Procedure that gets the average number of goals per game for a player in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a NuoDB SQL Stored Procedure that gets the average number of goals per game for a player in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE avg_goals_per_game(playerID_in IN VARCHAR2, year_in IN NUMBER) IS averageGoals NUMBER; BEGIN SELECT AVG(goals) INTO averageGoals FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE avg_goals_per_game(IN playerID_in varchar(10), IN year_in INTEGER) AS VAR averageGoals FLOAT; averageGoals = (SELECT AVG(goals) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 225,
    "task": "Write a NuoDB SQL Stored Procedure that updates a player's birthyear in the 'players' table given their player ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that updates a player's birthyear in the 'players' table given their player ID.",
    "input": "CREATE OR REPLACE PROCEDURE update_birthyear(playerID_in IN VARCHAR2, newBirthYear_in IN NUMBER) IS BEGIN UPDATE players SET birthYear = newBirthYear_in WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE update_birthyear(IN playerID_in varchar(10), IN newBirthYear_in INTEGER) AS UPDATE players SET birthYear = newBirthYear_in WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 226,
    "task": "Generate a NuoDB SQL Stored Procedure that gets the total number of games played by a team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a NuoDB SQL Stored Procedure that gets the total number of games played by a team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_games(year_in IN NUMBER, teamID_in IN VARCHAR2) IS totalGames NUMBER; BEGIN SELECT SUM(games) INTO totalGames FROM teams WHERE year = year_in AND teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE get_team_games(IN year_in INTEGER, IN teamID_in varchar(3)) AS VAR totalGames INTEGER; totalGames = (SELECT SUM(games) FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 227,
    "task": "Design a NuoDB SQL Stored Procedure that retrieves information about a player based on their player ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a NuoDB SQL Stored Procedure that retrieves information about a player based on their player ID.",
    "input": "Due to PL/SQL limitations, this task can't be done using a simple stored procedure as in other DBMS. You would use a CURSOR and a record type in PL/SQL.",
    "output": "CREATE PROCEDURE retrieve_player_by_id(IN playerID_in varchar(10)) AS VAR playerFirstName STRING, playerLastName STRING, playerHeight INTEGER; playerFirstName, playerLastName, playerHeight = (SELECT firstName, lastName, height FROM players WHERE playerID = playerID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 228,
    "task": "Create a NuoDB SQL Stored Procedure that deletes a team from the database based on the teamID and year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that deletes a team from the database based on the teamID and year.",
    "input": "CREATE OR REPLACE PROCEDURE remove_team_from_database(year_in IN NUMBER, teamID_in IN VARCHAR2) IS BEGIN DELETE FROM teams WHERE year = year_in AND teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE remove_team_from_database(IN year_in INTEGER, IN teamID_in varchar(3)) AS DELETE FROM teams WHERE year = year_in AND teamID = teamID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 229,
    "task": "Generate a NuoDB SQL Stored Procedure that calculates the total penalty minutes of a player in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a NuoDB SQL Stored Procedure that calculates the total penalty minutes of a player in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE calculate_penalty_minutes(playerID_in IN VARCHAR2, year_in IN NUMBER) IS totalPenalties NUMBER; BEGIN SELECT SUM(penaltyMinutes) INTO totalPenalties FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE calculate_penalty_minutes(IN playerID_in varchar(10), IN year_in INTEGER) AS VAR totalPenalties INTEGER; totalPenalties = (SELECT SUM(penaltyMinutes) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 230,
    "task": "Develop a NuoDB SQL Stored Procedure that fetches a list of all divisions a team has been a part of.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Develop a NuoDB SQL Stored Procedure that fetches a list of all divisions a team has been a part of.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_divisions(teamID_in IN VARCHAR2) IS BEGIN OPEN :cur FOR SELECT DISTINCT divisionID FROM teams WHERE teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE get_team_divisions(IN teamID_in varchar(3)) AS VAR teamDivision STRING; teamDivision = (SELECT DISTINCT divisionID FROM teams WHERE teamID = teamID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 231,
    "task": "Create a NuoDB SQL Stored Procedure that changes a player's position in the 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that changes a player's position in the 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE modify_player_position(playerID_in IN VARCHAR2, newPosition_in IN VARCHAR2) IS BEGIN UPDATE players SET position = newPosition_in WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE modify_player_position(IN playerID_in varchar(10), IN newPosition_in varchar(8)) AS UPDATE players SET position = newPosition_in WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 232,
    "task": "Design a NuoDB SQL Stored Procedure that retrieves a team's name and rank in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a NuoDB SQL Stored Procedure that retrieves a team's name and rank in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE retrieve_team_rank(year_in IN NUMBER, teamID_in IN VARCHAR2) IS BEGIN OPEN :cur FOR SELECT name, rank FROM teams WHERE year = year_in AND teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE retrieve_team_rank(IN year_in INTEGER, IN teamID_in varchar(3)) AS VAR teamName STRING, teamRank INTEGER; teamName, teamRank = (SELECT name, rank FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 233,
    "task": "Generate a NuoDB SQL Stored Procedure that gets the player with the most assists in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a NuoDB SQL Stored Procedure that gets the player with the most assists in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE get_top_assist(year_in IN NUMBER) IS topPlayer VARCHAR2(10); topAssists NUMBER; BEGIN SELECT playerID, MAX(assists) INTO topPlayer, topAssists FROM scoring WHERE year = year_in; END;",
    "output": "CREATE PROCEDURE get_top_assist(IN year_in INTEGER) AS VAR topPlayer varchar(10), topAssists INTEGER; topPlayer, topAssists = (SELECT playerID, MAX(assists) FROM scoring WHERE year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 234,
    "task": "Generate a NuoDB SQL Stored Procedure that changes a player's weight in the 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a NuoDB SQL Stored Procedure that changes a player's weight in the 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE change_player_weight(playerID_in IN VARCHAR2, newWeight_in IN NUMBER) IS BEGIN UPDATE players SET weight = newWeight_in WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE change_player_weight(IN playerID_in varchar(10), IN newWeight_in INTEGER) AS UPDATE players SET weight = newWeight_in WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 235,
    "task": "Write a NuoDB SQL Stored Procedure to find the average height of players in a specific position",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to find the average height of players in a specific position",
    "input": "CREATE OR REPLACE PROCEDURE AverageHeight(position_in IN VARCHAR2) IS avgHeight NUMBER; BEGIN SELECT AVG(height) INTO avgHeight FROM players WHERE position = position_in; END;",
    "output": "CREATE PROCEDURE AverageHeight(IN position_in String) AS VAR avgHeight INTEGER; avgHeight = (SELECT AVG(height) FROM players WHERE position = position_in); THROW avgHeight; END_PROCEDURE;"
  },
  {
    "number": 236,
    "task": "Write a NuoDB SQL Stored Procedure to get the total goals of a specific player in the scoring table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to get the total goals of a specific player in the scoring table",
    "input": "CREATE OR REPLACE PROCEDURE TotalGoals(playerID_in IN VARCHAR2) IS totalGoals NUMBER; BEGIN SELECT SUM(goals) INTO totalGoals FROM scoring WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE TotalGoals(IN playerID_in String) AS VAR totalGoals INTEGER; totalGoals = (SELECT SUM(goals) FROM scoring WHERE playerID = playerID_in); THROW totalGoals; END_PROCEDURE;"
  },
  {
    "number": 237,
    "task": "Write a NuoDB SQL Stored Procedure to count the total number of unique teams in the teams table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to count the total number of unique teams in the teams table",
    "input": "CREATE OR REPLACE PROCEDURE CountTeams IS count NUMBER; BEGIN SELECT COUNT(DISTINCT teamID) INTO count FROM teams; END;",
    "output": "CREATE PROCEDURE CountTeams() AS VAR count INTEGER; count = (SELECT COUNT(DISTINCT teamID) FROM teams); THROW count; END_PROCEDURE;"
  },
  {
    "number": 238,
    "task": "Write a NuoDB SQL Stored Procedure to find the player with the maximum weight in the players table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to find the player with the maximum weight in the players table",
    "input": "CREATE OR REPLACE PROCEDURE MaxWeight IS playerID VARCHAR2(10); BEGIN SELECT playerID INTO playerID FROM players WHERE weight = (SELECT MAX(weight) FROM players); END;",
    "output": "CREATE PROCEDURE MaxWeight() AS VAR playerID String; playerID = (SELECT playerID FROM players WHERE weight = (SELECT MAX(weight) FROM players)); THROW playerID; END_PROCEDURE;"
  },
  {
    "number": 239,
    "task": "Write a NuoDB SQL Stored Procedure to find total number of games played by a specific player",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to find total number of games played by a specific player",
    "input": "CREATE OR REPLACE PROCEDURE GamesPlayed(playerID_in IN VARCHAR2) IS totalGames NUMBER; BEGIN SELECT SUM(gamesPlayed) INTO totalGames FROM scoring WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE GamesPlayed(IN playerID_in String) AS VAR totalGames INTEGER; totalGames = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = playerID_in); THROW totalGames; END_PROCEDURE;"
  },
  {
    "number": 240,
    "task": "Write a NuoDB SQL Stored Procedure to find the earliest birth year of all players",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to find the earliest birth year of all players",
    "input": "CREATE OR REPLACE PROCEDURE EarliestBirth IS year NUMBER; BEGIN SELECT MIN(birthYear) INTO year FROM players; END;",
    "output": "CREATE PROCEDURE EarliestBirth() AS VAR year INTEGER; year = (SELECT MIN(birthYear) FROM players); THROW year; END_PROCEDURE;"
  },
  {
    "number": 241,
    "task": "Write a NuoDB SQL Stored Procedure to find the latest birth year of all players",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to find the latest birth year of all players",
    "input": "CREATE OR REPLACE PROCEDURE LatestBirth(year OUT NUMBER) AS BEGIN SELECT MAX(birthYear) INTO year FROM players; END;",
    "output": "CREATE PROCEDURE LatestBirth() AS VAR year INTEGER; year = (SELECT MAX(birthYear) FROM players); THROW year; END_PROCEDURE;"
  },
  {
    "number": 242,
    "task": "Write a NuoDB SQL Stored Procedure to get the total assists of a player from the scoring table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to get the total assists of a player from the scoring table",
    "input": "CREATE OR REPLACE PROCEDURE TotalAssists(playerID_in IN VARCHAR2, assists OUT NUMBER) AS BEGIN SELECT SUM(assists) INTO assists FROM scoring WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE TotalAssists(IN playerID_in String) AS VAR assists INTEGER; assists = (SELECT SUM(assists) FROM scoring WHERE playerID = playerID_in); THROW assists; END_PROCEDURE;"
  },
  {
    "number": 243,
    "task": "Write a NuoDB SQL Stored Procedure to get the player with the least weight in the players table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to get the player with the least weight in the players table",
    "input": "CREATE OR REPLACE PROCEDURE LeastWeight(playerID OUT VARCHAR2) AS BEGIN SELECT playerID INTO playerID FROM players WHERE weight = (SELECT MIN(weight) FROM players); END;",
    "output": "CREATE PROCEDURE LeastWeight() AS VAR playerID String; playerID = (SELECT playerID FROM players WHERE weight = (SELECT MIN(weight) FROM players)); THROW playerID; END_PROCEDURE;"
  },
  {
    "number": 244,
    "task": "Write a NuoDB SQL Stored Procedure to get the total number of unique positions in the players table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to get the total number of unique positions in the players table",
    "input": "CREATE OR REPLACE PROCEDURE UniquePositions(positions OUT NUMBER) AS BEGIN SELECT COUNT(DISTINCT position) INTO positions FROM players; END;",
    "output": "CREATE PROCEDURE UniquePositions() AS VAR positions INTEGER; positions = (SELECT COUNT(DISTINCT position) FROM players); THROW positions; END_PROCEDURE;"
  },
  {
    "number": 245,
    "task": "Write a NuoDB SQL Stored Procedure to get the team with the most wins in the teams table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to get the team with the most wins in the teams table",
    "input": "CREATE OR REPLACE PROCEDURE MostWins(teamID OUT VARCHAR2) AS BEGIN SELECT teamID INTO teamID FROM teams WHERE wins = (SELECT MAX(wins) FROM teams); END;",
    "output": "CREATE PROCEDURE MostWins() AS VAR teamID String; teamID = (SELECT teamID FROM teams WHERE wins = (SELECT MAX(wins) FROM teams)); THROW teamID; END_PROCEDURE;"
  },
  {
    "number": 246,
    "task": "Write a NuoDB SQL Stored Procedure to find the earliest year a game was played in the teams table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to find the earliest year a game was played in the teams table",
    "input": "CREATE OR REPLACE PROCEDURE EarliestGame(year OUT NUMBER) AS BEGIN SELECT MIN(year) INTO year FROM teams; END;",
    "output": "CREATE PROCEDURE EarliestGame() AS VAR year INTEGER; year = (SELECT MIN(year) FROM teams); THROW year; END_PROCEDURE;"
  },
  {
    "number": 247,
    "task": "Write a NuoDB SQL Stored Procedure to find the latest year a game was played in the teams table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to find the latest year a game was played in the teams table",
    "input": "CREATE OR REPLACE PROCEDURE LatestGame(year OUT NUMBER) AS BEGIN SELECT MAX(year) INTO year FROM teams; END;",
    "output": "CREATE PROCEDURE LatestGame() AS VAR year INTEGER; year = (SELECT MAX(year) FROM teams); THROW year; END_PROCEDURE;"
  },
  {
    "number": 248,
    "task": "Write a NuoDB SQL Stored Procedure to get the player with the most assists in the scoring table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to get the player with the most assists in the scoring table",
    "input": "CREATE OR REPLACE PROCEDURE BestAssist(playerID OUT VARCHAR2) AS BEGIN SELECT playerID INTO playerID FROM scoring WHERE assists = (SELECT MAX(assists) FROM scoring); END;",
    "output": "CREATE PROCEDURE BestAssist() AS VAR playerID String; playerID = (SELECT playerID FROM scoring WHERE assists = (SELECT MAX(assists) FROM scoring)); THROW playerID; END_PROCEDURE;"
  },
  {
    "number": 249,
    "task": "Write a NuoDB SQL Stored Procedure to get the player with the most goals in the scoring table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to get the player with the most goals in the scoring table",
    "input": "CREATE OR REPLACE PROCEDURE BestGoal(playerID OUT VARCHAR2) AS BEGIN SELECT playerID INTO playerID FROM scoring WHERE goals = (SELECT MAX(goals) FROM scoring); END;",
    "output": "CREATE PROCEDURE BestGoal() AS VAR playerID String; playerID = (SELECT playerID FROM scoring WHERE goals = (SELECT MAX(goals) FROM scoring)); THROW playerID; END_PROCEDURE;"
  },
  {
    "number": 250,
    "task": "Write a NuoDB SQL Stored Procedure to find the least number of games played by a specific player",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to find the least number of games played by a specific player",
    "input": "CREATE OR REPLACE PROCEDURE LeastGamesPlayed(playerID_in IN VARCHAR2, leastGames OUT NUMBER) AS BEGIN SELECT MIN(gamesPlayed) INTO leastGames FROM scoring WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE LeastGamesPlayed(IN playerID_in String) AS VAR leastGames INTEGER; leastGames = (SELECT MIN(gamesPlayed) FROM scoring WHERE playerID = playerID_in); THROW leastGames; END_PROCEDURE;"
  },
  {
    "number": 251,
    "task": "Write a NuoDB SQL Stored Procedure to calculate the total number of ties in the teams table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to calculate the total number of ties in the teams table",
    "input": "CREATE OR REPLACE PROCEDURE TotalTies(ties OUT NUMBER) AS BEGIN SELECT SUM(ties) INTO ties FROM teams; END;",
    "output": "CREATE PROCEDURE TotalTies() AS VAR ties INTEGER; ties = (SELECT SUM(ties) FROM teams); THROW ties; END_PROCEDURE;"
  },
  {
    "number": 252,
    "task": "Write a NuoDB SQL Stored Procedure to find the latest birth year of all players of a specific position",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to find the latest birth year of all players of a specific position",
    "input": "CREATE OR REPLACE PROCEDURE LatestBirthPos(position_in IN VARCHAR2, year OUT NUMBER) AS BEGIN SELECT MAX(birthYear) INTO year FROM players WHERE position = position_in; END;",
    "output": "CREATE PROCEDURE LatestBirthPos(IN position_in String) AS VAR year INTEGER; year = (SELECT MAX(birthYear) FROM players WHERE position = position_in); THROW year; END_PROCEDURE;"
  },
  {
    "number": 253,
    "task": "Write a NuoDB SQL Stored Procedure to get the player with the least penalty minutes in the scoring table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to get the player with the least penalty minutes in the scoring table",
    "input": "CREATE OR REPLACE PROCEDURE MinPenalty AS playerID scoring.playerID%TYPE; BEGIN SELECT playerID INTO playerID FROM scoring WHERE penaltyMinutes = (SELECT MIN(penaltyMinutes) FROM scoring); DBMS_OUTPUT.PUT_LINE(playerID); END MinPenalty;",
    "output": "CREATE PROCEDURE MinPenalty() AS VAR playerID String; playerID = (SELECT playerID FROM scoring WHERE penaltyMinutes = (SELECT MIN(penaltyMinutes) FROM scoring)); THROW playerID; END_PROCEDURE;"
  },
  {
    "number": 254,
    "task": "Write a NuoDB SQL Stored Procedure to calculate the average height of the players in a given team",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to calculate the average height of the players in a given team",
    "input": "CREATE OR REPLACE PROCEDURE Avg_Height_By_Team(team_id_in IN players.teamID%TYPE) AS avg_height FLOAT; BEGIN SELECT AVG(height) INTO avg_height FROM players p JOIN teams t ON p.playerID = t.playerid WHERE t.teamID = team_id_in; DBMS_OUTPUT.PUT_LINE('The average height for team ' || team_id_in || ' is ' || avg_height); END Avg_Height_By_Team;",
    "output": "CREATE PROCEDURE Avg_Height_By_Team(IN team_id_in STRING) AS VAR avg_height FLOAT; avg_height = (SELECT AVG(height) FROM players p JOIN teams t ON p.playerID = t.playerid WHERE t.teamID = team_id_in); THROW 'The average height for team ' || team_id_in || ' is ' || avg_height; END_PROCEDURE;"
  },
  {
    "number": 255,
    "task": "Create a NuoDB SQL Stored Procedure that adds a new hockey team to the database",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that adds a new hockey team to the database",
    "input": "CREATE OR REPLACE PROCEDURE Add_Hockey_Team(name_in IN teams.name%TYPE, conferenceID_in IN teams.conferenceID%TYPE, divisionID_in IN teams.divisionID%TYPE, rank_in IN teams.rank%TYPE) IS BEGIN INSERT INTO teams(name, conferenceID , divisionID , rank) VALUES (name_in, conferenceID_in, divisionID_in, rank_in); DBMS_OUTPUT.PUT_LINE('SUCCESS'); END Add_Hockey_Team;",
    "output": "CREATE PROCEDURE Add_Hockey_Team(IN name_in STRING, IN conferenceID_in STRING, IN divisionID_in STRING, IN rank_in INTEGER) AS INSERT INTO teams(name, conferenceID , divisionID , rank) VALUES (name_in, conferenceID_in, divisionID_in, rank_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 256,
    "task": "Write a NuoDB SQL Stored Procedure that updates a player's position",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that updates a player's position",
    "input": "CREATE OR REPLACE PROCEDURE Update_Player_Position(playerID_in IN players.playerID%TYPE, position_in IN players.position%TYPE) IS BEGIN UPDATE players SET position = position_in WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END Update_Player_Position;",
    "output": "CREATE PROCEDURE Update_Player_Position(IN playerID_in STRING, IN position_in STRING) AS UPDATE players SET position = position_in WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 257,
    "task": "Create a NuoDB SQL Stored Procedure to fetch the birth year of a player",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure to fetch the birth year of a player",
    "input": "CREATE OR REPLACE PROCEDURE Fetch_Player_Birth_Year(playerID_in IN players.playerID%TYPE) AS birth_year players.birthYear%TYPE; BEGIN SELECT birthYear INTO birth_year FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('The player with PlayerID ' || playerID_in || ' was born in ' || birth_year); END Fetch_Player_Birth_Year;",
    "output": "CREATE PROCEDURE Fetch_Player_Birth_Year(IN playerID_in STRING) AS VAR birth_year INTEGER; birth_year = (SELECT birthYear FROM players WHERE playerID = playerID_in); THROW 'The player with PlayerID ' || playerID_in || ' was born in ' || birth_year; END_PROCEDURE;"
  },
  {
    "number": 258,
    "task": "Write a NuoDB SQL Stored Procedure that deletes a hockey team from the database",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that deletes a hockey team from the database",
    "input": "CREATE OR REPLACE PROCEDURE Delete_Hockey_Team(teamID_in IN teams.teamID%TYPE) IS BEGIN DELETE FROM teams WHERE teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END Delete_Hockey_Team;",
    "output": "CREATE PROCEDURE Delete_Hockey_Team(IN teamID_in INTEGER) AS DELETE FROM teams WHERE teamID = teamID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 259,
    "task": "Create a NuoDB SQL Stored Procedure that returns a player's weight",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that returns a player's weight",
    "input": "CREATE OR REPLACE PROCEDURE Fetch_Player_Weight(playerID_in IN players.playerID%TYPE) AS weight players.weight%TYPE; BEGIN SELECT weight INTO weight FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('The player with PlayerID ' || playerID_in || ' weighs ' || weight); END Fetch_Player_Weight;",
    "output": "CREATE PROCEDURE Fetch_Player_Weight(IN playerID_in STRING) AS VAR weight INTEGER; weight = (SELECT weight FROM players WHERE playerID = playerID_in); THROW 'The player with PlayerID ' || playerID_in || ' weighs ' || weight; END_PROCEDURE;"
  },
  {
    "number": 260,
    "task": "Write a NuoDB SQL Stored Procedure to calculate the total number of games played by a team in a particular year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to calculate the total number of games played by a team in a particular year",
    "input": "CREATE OR REPLACE PROCEDURE Total_Games_Played(year_in IN teams.year%TYPE, teamID_in IN teams.teamID%TYPE) AS total_games teams.games%TYPE; BEGIN SELECT games INTO total_games FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('The total games played by team ' || teamID_in || ' in ' || year_in || ' is ' || total_games); END Total_Games_Played;",
    "output": "CREATE PROCEDURE Total_Games_Played(IN year_in INTEGER, IN teamID_in STRING) AS VAR total_games INTEGER; total_games = (SELECT games FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'The total games played by team ' || teamID_in || ' in ' || year_in || ' is ' || total_games; END_PROCEDURE;"
  },
  {
    "number": 261,
    "task": "Create a NuoDB SQL Stored Procedure that adds a new player to the players table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that adds a new player to the players table",
    "input": "CREATE OR REPLACE PROCEDURE Add_Player(playerID_in IN players.playerID%TYPE, firstName_in IN players.firstName%TYPE, lastName_in IN players.lastName%TYPE, birthYear_in IN players.birthYear%TYPE) IS BEGIN INSERT INTO players(playerID, firstName, lastName, birthYear) VALUES (playerID_in, firstName_in, lastName_in, birthYear_in); DBMS_OUTPUT.PUT_LINE('SUCCESS'); END Add_Player;",
    "output": "CREATE PROCEDURE Add_Player(IN playerID_in STRING, IN firstName_in STRING, IN lastName_in STRING, IN birthYear_in INTEGER) AS INSERT INTO players(playerID, firstName, lastName, birthYear) VALUES (playerID_in, firstName_in, lastName_in, birthYear_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 262,
    "task": "Write a NuoDB SQL Stored Procedure that updates a team's rank",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that updates a team's rank",
    "input": "CREATE OR REPLACE PROCEDURE Update_Team_Rank(teamID_in IN teams.teamID%TYPE, year_in IN teams.year%TYPE, new_rank_in IN teams.rank%TYPE) IS BEGIN UPDATE teams SET rank = new_rank_in WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END Update_Team_Rank;",
    "output": "CREATE PROCEDURE Update_Team_Rank(IN teamID_in STRING, IN year_in INTEGER, IN new_rank_in INTEGER) AS UPDATE teams SET rank = new_rank_in WHERE teamID = teamID_in AND year = year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 263,
    "task": "Create a NuoDB SQL Stored Procedure to fetch the total goals scored by a player",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure to fetch the total goals scored by a player",
    "input": "CREATE OR REPLACE PROCEDURE Fetch_Player_Goals(playerID_in IN scoring.playerID%TYPE) AS total_goals scoring.goals%TYPE; BEGIN SELECT SUM(goals) INTO total_goals FROM scoring WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('The total goals scored by the player with PlayerID ' || playerID_in || ' is ' || total_goals); END Fetch_Player_Goals;",
    "output": "CREATE PROCEDURE Fetch_Player_Goals(IN playerID_in STRING) AS VAR total_goals INTEGER; total_goals = (SELECT SUM(goals) FROM scoring WHERE playerID = playerID_in); THROW 'The total goals scored by the player with PlayerID ' || playerID_in || ' is ' || total_goals; END_PROCEDURE;"
  },
  {
    "number": 264,
    "task": "Write a NuoDB SQL Stored Procedure to calculate the total number of ties a team has had in a particular year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to calculate the total number of ties a team has had in a particular year",
    "input": "CREATE OR REPLACE PROCEDURE Total_Team_Ties(year_in IN teams.year%TYPE, teamID_in IN teams.teamID%TYPE) IS total_ties teams.ties%TYPE; BEGIN SELECT ties INTO total_ties FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('The total ties by team ' || teamID_in || ' in ' || year_in || ' is ' || total_ties); END Total_Team_Ties;",
    "output": "CREATE PROCEDURE Total_Team_Ties(IN year_in INTEGER, IN teamID_in STRING) AS VAR total_ties INTEGER; total_ties = (SELECT ties FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'The total ties by team ' || teamID_in || ' in ' || year_in || ' is ' || total_ties; END_PROCEDURE;"
  },
  {
    "number": 265,
    "task": "Create a NuoDB SQL Stored Procedure that deletes a player from the players table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that deletes a player from the players table",
    "input": "CREATE OR REPLACE PROCEDURE Delete_Player(playerID_in IN players.playerID%TYPE) IS BEGIN DELETE FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END Delete_Player;",
    "output": "CREATE PROCEDURE Delete_Player(IN playerID_in STRING) AS DELETE FROM players WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 266,
    "task": "Write a NuoDB SQL Stored Procedure that updates a player's weight",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that updates a player's weight",
    "input": "CREATE OR REPLACE PROCEDURE Update_Player_Weight(playerID_in IN players.playerID%TYPE, weight_in IN players.weight%TYPE) IS BEGIN UPDATE players SET weight = weight_in WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END Update_Player_Weight;",
    "output": "CREATE PROCEDURE Update_Player_Weight(IN playerID_in STRING, IN weight_in INTEGER) AS UPDATE players SET weight = weight_in WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 267,
    "task": "Create a NuoDB SQL Stored Procedure to fetch a player's first and last NHL year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure to fetch a player's first and last NHL year",
    "input": "CREATE OR REPLACE PROCEDURE Fetch_Player_NHL_Years(playerID_in IN players.playerID%TYPE) IS firstNHL players.firstNHL%TYPE; lastNHL players.lastNHL%TYPE; BEGIN SELECT firstNHL, lastNHL INTO firstNHL, lastNHL FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('The player with PlayerID ' || playerID_in || ' started in NHL in ' || firstNHL || ' and ended in ' || lastNHL); END Fetch_Player_NHL_Years;",
    "output": "CREATE PROCEDURE Fetch_Player_NHL_Years(IN playerID_in STRING) AS VAR firstNHL INTEGER, lastNHL INTEGER; firstNHL, lastNHL = (SELECT firstNHL, lastNHL FROM players WHERE playerID = playerID_in); THROW 'The player with PlayerID ' || playerID_in || ' started in NHL in ' || firstNHL || ' and ended in ' || lastNHL; END_PROCEDURE;"
  },
  {
    "number": 268,
    "task": "Create a NuoDB SQL Stored Procedure that retrieves the most recent winning team",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that retrieves the most recent winning team",
    "input": "CREATE OR REPLACE PROCEDURE Retrieve_Recent_Winning_Team AS recent_winning_team teams.teamID%TYPE; BEGIN SELECT teamID INTO recent_winning_team FROM teams WHERE year = (SELECT MAX(year) FROM teams) AND wins = (SELECT MAX(wins) FROM teams); DBMS_OUTPUT.PUT_LINE('The most recent winning team is ' || recent_winning_team); END Retrieve_Recent_Winning_Team;",
    "output": "CREATE PROCEDURE Retrieve_Recent_Winning_Team() AS VAR recent_winning_team STRING; recent_winning_team = (SELECT teamID FROM teams WHERE year = (SELECT MAX(year) FROM teams) AND wins = (SELECT MAX(wins) FROM teams)); THROW 'The most recent winning team is ' || recent_winning_team; END_PROCEDURE;"
  },
  {
    "number": 269,
    "task": "Write a NuoDB SQL Stored Procedure that adds the data available from an execution into a table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that adds the data available from an execution into a table",
    "input": "CREATE OR REPLACE PROCEDURE Add_Execution_Data(playerID_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE, stint_in IN scoring.stint%TYPE, teamID_in IN scoring.teamID%TYPE, position_in IN scoring.position%TYPE, gamesPlayed_in IN scoring.gamesPlayed%TYPE, goals_in IN scoring.goals%TYPE, assists_in IN scoring.assists%TYPE, penaltyMinutes_in IN scoring.penaltyMinutes%TYPE) IS BEGIN INSERT INTO scoring(playerID, year, stint, teamID, position, gamesPlayed, goals, assists, penaltyMinutes) VALUES (playerID_in, year_in, stint_in, teamID_in, position_in, gamesPlayed_in, goals_in, assists_in, penaltyMinutes_in); DBMS_OUTPUT.PUT_LINE('SUCCESS'); END Add_Execution_Data;",
    "output": "CREATE PROCEDURE Add_Execution_Data(IN playerID_in STRING, IN year_in INTEGER, IN stint_in INTEGER, IN teamID_in STRING, IN position_in STRING, IN gamesPlayed_in INTEGER, IN goals_in INTEGER, IN assists_in INTEGER, IN penaltyMinutes_in INTEGER) AS INSERT INTO scoring(playerID, year, stint, teamID, position, gamesPlayed, goals, assists, penaltyMinutes) VALUES (playerID_in, year_in, stint_in, teamID_in, position_in, gamesPlayed_in, goals_in, assists_in, penaltyMinutes_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 270,
    "task": "Create a NuoDB SQL Stored Procedure to get the birth city of a player",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure to get the birth city of a player",
    "input": "CREATE OR REPLACE PROCEDURE Fetch_Player_Birth_City(playerID_in IN players.playerID%TYPE) IS birth_city players.birthCity%TYPE; BEGIN SELECT birthCity INTO birth_city FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('The player with PlayerID ' || playerID_in || ' was born in ' || birth_city); END Fetch_Player_Birth_City;",
    "output": "CREATE PROCEDURE Fetch_Player_Birth_City(IN playerID_in STRING) AS VAR birth_city STRING; birth_city = (SELECT birthCity FROM players WHERE playerID = playerID_in); THROW 'The player with PlayerID ' || playerID_in || ' was born in ' || birth_city; END_PROCEDURE;"
  },
  {
    "number": 271,
    "task": "Write a NuoDB SQL Stored Procedure to update number of games played by a team in a specific year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to update number of games played by a team in a specific year",
    "input": "CREATE OR REPLACE PROCEDURE Update_Team_Games(teamID_in IN teams.teamID%TYPE, year_in IN teams.year%TYPE, games_in IN teams.games%TYPE) IS BEGIN UPDATE teams SET games = games_in WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END Update_Team_Games;",
    "output": "CREATE PROCEDURE Update_Team_Games(IN teamID_in STRING, IN year_in INTEGER, IN games_in INTEGER) AS UPDATE teams SET games = games_in WHERE teamID = teamID_in AND year = year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 272,
    "task": "Create a NuoDB SQL Stored Procedure to get the first name and last name of a player",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure to get the first name and last name of a player",
    "input": "CREATE OR REPLACE PROCEDURE Fetch_Player_Name(playerID_in IN players.playerID%TYPE) IS first_name players.firstName%TYPE; last_name players.lastName%TYPE; BEGIN SELECT firstName, lastName INTO first_name, last_name FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('The player with PlayerID ' || playerID_in || ' is ' || first_name || ' ' || last_name); END Fetch_Player_Name;",
    "output": "CREATE PROCEDURE Fetch_Player_Name(IN playerID_in STRING) AS VAR first_name STRING, last_name STRING; first_name, last_name = (SELECT firstName, lastName FROM players WHERE playerID = playerID_in); THROW 'The player with PlayerID ' || playerID_in || ' is ' || first_name || ' ' || last_name; END_PROCEDURE;"
  },
  {
    "number": 273,
    "task": "How to create a stored procedure that returns the name of a player in the hockey team given an ID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the name of a player in the hockey team given an ID?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerNameById(id_in IN Hockey.Id%TYPE) IS playerName Hockey.Name%TYPE; BEGIN SELECT Name INTO playerName FROM Hockey WHERE Id = id_in; DBMS_OUTPUT.PUT_LINE(playerName); END getPlayerNameById;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerNameById(IN id_in BIGINT) AS VAR playerName STRING = (SELECT Name FROM Hockey WHERE Id = id_in); THROW playerName; END_PROCEDURE;"
  },
  {
    "number": 274,
    "task": "Given a player ID, how can you create a stored procedure to return the respective team name?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Given a player ID, how can you create a stored procedure to return the respective team name?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamNameById(id_in IN Hockey.Id%TYPE) IS teamName Hockey.Team%TYPE; BEGIN SELECT Team INTO teamName FROM Hockey WHERE Id = id_in; DBMS_OUTPUT.PUT_LINE(teamName); END getTeamNameById;",
    "output": "CREATE OR REPLACE PROCEDURE getTeamNameById(IN id_in BIGINT) AS VAR teamName STRING = (SELECT Team FROM Hockey WHERE Id = id_in); THROW teamName; END_PROCEDURE;"
  },
  {
    "number": 275,
    "task": "How do you create a procedure to get player name, firstNHL and lastNHL year based on input playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a procedure to get player name, firstNHL and lastNHL year based on input playerID?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_career(playerID_in IN players.playerID%TYPE) IS playerName players.firstName%TYPE; firstYear players.firstNHL%TYPE; lastYear players.lastNHL%TYPE; BEGIN SELECT firstName, firstNHL, lastNHL INTO playerName, firstYear, lastYear FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(playerName || ' started in ' || firstYear || ' and last played in ' || lastYear); END get_player_career;",
    "output": "CREATE PROCEDURE get_player_career(IN playerID_in String) AS VAR playerName String, firstYear INTEGER, lastYear INTEGER; playerName, firstYear, lastYear = (SELECT firstName, firstNHL, lastNHL FROM players WHERE playerID = playerID_in); THROW playerName || ' started in ' || firstYear || ' and last played in ' || lastYear; END_PROCEDURE;"
  },
  {
    "number": 276,
    "task": "How to write a stored procedure to fetch the player's total goals scored in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure to fetch the player's total goals scored in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE get_goals_scored(playerID_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) IS total_goals scoring.goals%TYPE; BEGIN SELECT SUM(goals) INTO total_goals FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total goals: ' || total_goals); END get_goals_scored;",
    "output": "CREATE PROCEDURE get_goals_scored(IN playerID_in STRING, IN year_in INTEGER) AS VAR total_goals INTEGER; total_goals = (SELECT SUM(goals) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total goals: ' || total_goals; END_PROCEDURE;"
  },
  {
    "number": 277,
    "task": "How to write a stored procedure to fetch the player's position based on given playerID and year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure to fetch the player's position based on given playerID and year?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_position(playerID_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) IS player_position scoring.position%TYPE; BEGIN SELECT DISTINCT position INTO player_position FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Player position in year ' || year_in || ' was ' || player_position); END get_player_position;",
    "output": "CREATE PROCEDURE get_player_position(IN playerID_in String, IN year_in Integer) AS VAR player_position String; player_position = (SELECT DISTINCT position FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Player position in year ' || year_in || ' was ' || player_position; END_PROCEDURE;"
  },
  {
    "number": 278,
    "task": "Write stored procedure to get the team with most wins in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write stored procedure to get the team with most wins in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_with_most_wins(year_in IN teams.year%TYPE) IS teamName teams.name%TYPE; max_wins teams.wins%TYPE; BEGIN SELECT name, MAX(wins) INTO teamName, max_wins FROM teams WHERE year = year_in; DBMS_OUTPUT.PUT_LINE('Team with most wins: ' || teamName || ' with ' || max_wins || ' wins.'); END get_team_with_most_wins;",
    "output": "CREATE PROCEDURE get_team_with_most_wins(IN year_in INTEGER) AS VAR teamName String, max_wins INTEGER; teamName, max_wins = (SELECT name, MAX(wins) FROM teams WHERE year = year_in); THROW 'Team with most wins: ' || teamName || ' with ' || max_wins || ' wins.'; END_PROCEDURE;"
  },
  {
    "number": 279,
    "task": "What stored procedure would you write to fetch the player details who scored the maximum goals in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - What stored procedure would you write to fetch the player details who scored the maximum goals in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_details_max_goals(year_in IN scoring.year%TYPE) IS player_id scoring.playerID%TYPE; max_goals scoring.goals%TYPE; BEGIN SELECT playerID, MAX(goals) INTO player_id, max_goals FROM scoring WHERE year = year_in; DBMS_OUTPUT.PUT_LINE('Player with maximum goals: ' || player_id || ' Goals: ' || max_goals); END get_player_details_max_goals;",
    "output": "CREATE PROCEDURE get_player_details_max_goals(IN year_in INTEGER) AS VAR player_id String, max_goals INTEGER; player_id, max_goals = (SELECT playerID, MAX(goals) FROM scoring WHERE year = year_in); THROW 'Player with maximum goals: ' || player_id || ' Goals: ' || max_goals; END_PROCEDURE;"
  },
  {
    "number": 280,
    "task": "Create a stored procedure to get player's birth details based on given playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get player's birth details based on given playerID.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birth_details(playerID_in IN players.playerID%TYPE) IS birthYear players.birthYear%TYPE; birthMon players.birthMon%TYPE; birthDay players.birthDay%TYPE; BEGIN SELECT birthYear, birthMon, birthDay INTO birthYear, birthMon, birthDay FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Birth details - Year: ' || birthYear || ' Month: ' || birthMon || ' Day: ' || birthDay); END get_player_birth_details;",
    "output": "CREATE PROCEDURE get_player_birth_details(IN playerID_in String) AS VAR birthYear INTEGER, birthMon INTEGER, birthDay INTEGER; birthYear, birthMon, birthDay = (SELECT birthYear, birthMon, birthDay FROM players WHERE playerID = playerID_in); THROW 'Birth details - Year: ' || birthYear || ' Month: ' || birthMon || ' Day: ' || birthDay; END_PROCEDURE;"
  },
  {
    "number": 281,
    "task": "How do I get the distinct countries where players are born in?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do I get the distinct countries where players are born in?",
    "input": "CREATE OR REPLACE PROCEDURE get_distinct_birth_countries AS countries players.birthCountry%TYPE; BEGIN SELECT DISTINCT birthCountry INTO countries FROM players; DBMS_OUTPUT.PUT_LINE('Countries where players born:' || countries); END get_distinct_birth_countries;",
    "output": "CREATE PROCEDURE get_distinct_birth_countries() AS VAR countries String; countries = (SELECT DISTINCT birthCountry FROM players); THROW 'Countries where players born:' || birthCountry ; END_PROCEDURE;"
  },
  {
    "number": 282,
    "task": "Create a procedure to get the total number of players for a given team in the Hockey table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure to get the total number of players for a given team in the Hockey table.",
    "input": "CREATE OR REPLACE PROCEDURE get_total_players(team_in IN Hockey.Team%TYPE) IS total_players INTEGER; BEGIN SELECT COUNT() INTO total_players FROM Hockey WHERE Team = team_in; DBMS_OUTPUT.PUT_LINE('Total players: ' || total_players); END get_total_players;",
    "output": "CREATE PROCEDURE get_total_players(IN team_in STRING) AS VAR total_players INTEGER; total_players = (SELECT COUNT() FROM Hockey WHERE Team = team_in); THROW 'Total players: ' || total_players; END_PROCEDURE;"
  },
  {
    "number": 283,
    "task": "How do you generate a stored procedure to get the average weight and height of all players?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you generate a stored procedure to get the average weight and height of all players?",
    "input": "CREATE OR REPLACE PROCEDURE get_avg_weight_height IS avg_weight players.weight%TYPE; avg_height players.height%TYPE; BEGIN SELECT AVG(weight), AVG(height) INTO avg_weight, avg_height FROM players; DBMS_OUTPUT.PUT_LINE('Average weight and height: ' || avg_weight || ', ' || avg_height); END get_avg_weight_height;",
    "output": "CREATE PROCEDURE get_avg_weight_height() AS VAR avg_weight INTEGER, avg_height INTEGER; avg_weight, avg_height = (SELECT AVG(weight), AVG(height) FROM players); THROW 'Average weight and height: ' || avg_weight || ', ' || avg_height; END_PROCEDURE;"
  },
  {
    "number": 284,
    "task": "How to generate a stored procedure to get the player with maximum weight?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to generate a stored procedure to get the player with maximum weight?",
    "input": "CREATE OR REPLACE PROCEDURE get_max_weight_player IS playerName players.firstName%TYPE; maxWeight players.weight%TYPE; BEGIN SELECT firstName, MAX(weight) INTO playerName, maxWeight FROM players; DBMS_OUTPUT.PUT_LINE('Max Weight Player: ' || playerName || ', Weight: ' || maxWeight); END get_max_weight_player;",
    "output": "CREATE PROCEDURE get_max_weight_player() AS VAR playerName String, maxWeight INTEGER; playerName, maxWeight = (SELECT firstName, MAX(weight) FROM players); THROW 'Max Weight Player: ' || playerName || ', Weight: ' || maxWeight; END_PROCEDURE;"
  },
  {
    "number": 285,
    "task": "How do you write a stored procedure to get list of all goalies in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you write a stored procedure to get list of all goalies in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE get_all_goalies(year_in IN scoring.year%TYPE) IS TYPE goalie_list IS TABLE OF scoring.playerID%TYPE; goalie scoring.playerID%TYPE; BEGIN SELECT DISTINCT playerID INTO goalie FROM scoring WHERE year = year_in AND position = 'G'; FOR i IN goalie_list.FIRST..goalie_list.LAST LOOP DBMS_OUTPUT.PUT_LINE('Goalies: ' || goalie_list(i)); END LOOP; END get_all_goalies;",
    "output": "CREATE PROCEDURE get_all_goalies(IN year_in INTEGER) AS VAR goalie_list String; goalie_list = (SELECT DISTINCT playerID FROM scoring WHERE year = year_in AND position = 'G'); THROW 'Goalies: ' || goalie_list; END_PROCEDURE;"
  },
  {
    "number": 286,
    "task": "How do we write a stored procedure to fetch teams who played in a particular conference in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do we write a stored procedure to fetch teams who played in a particular conference in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE get_teams_in_conference(year_in IN teams.year%TYPE, conferenceID_in IN teams.conferenceID%TYPE) IS CURSOR teams_cursor IS SELECT DISTINCT name FROM teams WHERE year = year_in AND conferenceID = conferenceID_in; team_name teams.name%TYPE; BEGIN OPEN teams_cursor; LOOP FETCH teams_cursor INTO team_name; EXIT WHEN teams_cursor%NOTFOUND; DBMS_OUTPUT.PUT_LINE('Teams: ' || team_name); END LOOP; CLOSE teams_cursor; END get_teams_in_conference;",
    "output": "CREATE PROCEDURE get_teams_in_conference(IN year_in INTEGER, IN conferenceID_in String) AS VAR teams_list String; teams_list = (SELECT DISTINCT name FROM teams WHERE year = year_in AND conferenceID = conferenceID_in); THROW 'Teams: ' || teams_list; END_PROCEDURE;"
  },
  {
    "number": 287,
    "task": "Write a stored procedure to get all the players who played for a team in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get all the players who played for a team in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE get_players_in_team(year_in IN scoring.year%TYPE, teamID_in IN scoring.teamID%TYPE) IS CURSOR players_cursor IS SELECT DISTINCT playerID FROM scoring WHERE year = year_in AND teamID = teamID_in; player scoring.playerID%TYPE; BEGIN OPEN players_cursor; LOOP FETCH players_cursor INTO player; EXIT WHEN players_cursor%NOTFOUND; DBMS_OUTPUT.PUT_LINE('Players: ' || player); END LOOP; CLOSE players_cursor; END get_players_in_team;",
    "output": "CREATE PROCEDURE get_players_in_team(IN year_in INTEGER, IN teamID_in String) AS VAR players_list String; players_list = (SELECT DISTINCT playerID FROM scoring WHERE year = year_in AND teamID = teamID_in); THROW 'Players: ' || players_list; END_PROCEDURE;"
  },
  {
    "number": 288,
    "task": "How to write a stored procedure to retrieve a player's career length based on given playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure to retrieve a player's career length based on given playerID?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_career_length(playerID_in IN players.playerID%TYPE) IS career_length INTEGER; BEGIN SELECT (lastNHL - firstNHL) INTO career_length FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Career length: ' || career_length); END get_player_career_length;",
    "output": "CREATE PROCEDURE get_player_career_length(IN playerID_in String) AS VAR career_length INTEGER; career_length = (SELECT lastNHL - firstNHL FROM players WHERE playerID = playerID_in); THROW 'Career length: ' || career_length; END_PROCEDURE;"
  },
  {
    "number": 289,
    "task": "Create a stored procedure to get the total penalty minutes of a player in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the total penalty minutes of a player in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_penalty_minutes(playerID_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) IS total_penalty_minutes INTEGER; BEGIN SELECT SUM(penaltyMinutes) INTO total_penalty_minutes FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total Penalty Minutes: ' || total_penalty_minutes); END get_player_penalty_minutes;",
    "output": "CREATE PROCEDURE get_player_penalty_minutes(IN playerID_in STRING, IN year_in INTEGER) AS VAR total_penalty_minutes INTEGER; total_penalty_minutes = (SELECT SUM(penaltyMinutes) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total Penalty Minutes: ' || total_penalty_minutes; END_PROCEDURE;"
  },
  {
    "number": 290,
    "task": "How do you get the highest stint of a player in a given year using a stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you get the highest stint of a player in a given year using a stored procedure?",
    "input": "CREATE OR REPLACE PROCEDURE get_highest_stint(playerID_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) IS highest_stint scoring.stint%TYPE; BEGIN SELECT MAX(stint) INTO highest_stint FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Highest stint: ' || highest_stint); END get_highest_stint;",
    "output": "CREATE PROCEDURE get_highest_stint(IN playerID_in STRING, IN year_in INTEGER) AS VAR highest_stint INTEGER; highest_stint = (SELECT MAX(stint) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Highest stint: ' || highest_stint; END_PROCEDURE;"
  },
  {
    "number": 291,
    "task": "How do you create a stored procedure to find a player using playerID from the players table and return first name, last name, and position?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you create a stored procedure to find a player using playerID from the players table and return first name, last name, and position?",
    "input": "CREATE OR REPLACE PROCEDURE findPlayer_byID(playerID_in IN players.playerID%TYPE) IS firstName players.firstName%TYPE; lastName players.lastName%TYPE; position players.position%TYPE; BEGIN SELECT firstName, lastName, position INTO firstName, lastName, position FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(firstName || ' ' || lastName || ' plays ' || position); END findPlayer_byID;",
    "output": "CREATE OR REPLACE PROCEDURE findPlayer_byID(in playerID_in String) AS VAR firstName String, lastName String, position String; firstName, lastName, position = (SELECT firstName, lastName, position FROM players WHERE playerID = playerID_in); THROW firstName || ' ' || lastName || ' plays ' || position; END_PROCEDURE;"
  },
  {
    "number": 292,
    "task": "How to create a stored procedure to retrieve the birth place details such as country, state, city for a given playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to retrieve the birth place details such as country, state, city for a given playerID?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerBirthPlace_byID(playerID_in IN players.playerID%TYPE) IS birthCountry players.birthCountry%TYPE; birthState players.birthState%TYPE; birthCity players.birthCity%TYPE; BEGIN SELECT birthCountry, birthState, birthCity INTO birthCountry, birthState, birthCity FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Player was born in ' || birthCity || ', ' || birthState || ', ' || birthCountry); END getPlayerBirthPlace_byID;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerBirthPlace_byID(in playerID_in String) AS VAR birthCountry String, birthState String, birthCity String; birthCountry, birthState, birthCity = (SELECT birthCountry, birthState, birthCity FROM players WHERE playerID = playerID_in); THROW 'Player was born in ' || birthCity || ', ' || birthState || ', ' || birthCountry; END_PROCEDURE;"
  },
  {
    "number": 293,
    "task": "How do you compute the average weight of players for each position and return the position name and average weight?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you compute the average weight of players for each position and return the position name and average weight?",
    "input": "CREATE OR REPLACE PROCEDURE computeAverageWeight_byPosition IS CURSOR positions_cursor IS SELECT position, AVG(weight) FROM players GROUP BY position; position players.position%TYPE; avgWeight NUMBER; BEGIN OPEN positions_cursor; LOOP FETCH positions_cursor INTO position, avgWeight; EXIT WHEN positions_cursor%NOTFOUND; DBMS_OUTPUT.PUT_LINE('Average weight for ' || position || ' is ' || avgWeight); END LOOP; CLOSE positions_cursor; END computeAverageWeight_byPosition;",
    "output": "CREATE OR REPLACE PROCEDURE computeAverageWeight_byPosition AS VAR position String, avgWeight DOUBLE; position, avgWeight = (SELECT position, AVG(weight) FROM players GROUP BY position); THROW 'Average weight for ' || position || ' is ' || avgWeight; END_PROCEDURE;"
  },
  {
    "number": 294,
    "task": "How to determine the total number of goals scored by a player in a given year from scoring table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to determine the total number of goals scored by a player in a given year from scoring table?",
    "input": "CREATE OR REPLACE PROCEDURE getTotalGoals_byPlayerYear(playerID_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) IS totalGoals INTEGER; BEGIN SELECT SUM(goals) INTO totalGoals FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total goals by player in ' || year_in || ' is ' || totalGoals); END getTotalGoals_byPlayerYear;",
    "output": "CREATE OR REPLACE PROCEDURE getTotalGoals_byPlayerYear(in playerID_in String, in year_in String) AS VAR totalGoals INTEGER; totalGoals = (SELECT SUM(goals) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total goals by player in ' || year || ' is ' || totalGoals; END_PROCEDURE;"
  },
  {
    "number": 295,
    "task": "How to create a procedure to get the total number of games played by a team in a given year from teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a procedure to get the total number of games played by a team in a given year from teams table?",
    "input": "CREATE OR REPLACE PROCEDURE getTotalGames_byTeamYear(year_in IN teams.year%TYPE, teamID_in IN teams.teamID%TYPE) IS totalGames teams.games%TYPE; BEGIN SELECT games INTO totalGames FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Total games played by team in ' || year_in || ' is ' || totalGames); END getTotalGames_byTeamYear;",
    "output": "CREATE OR REPLACE PROCEDURE getTotalGames_byTeamYear(in year_in String, in teamID_in String) AS VAR totalGames INTEGER; totalGames = (SELECT games FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'Total games played by team in ' || year || ' is ' || totalGames; END_PROCEDURE;"
  },
  {
    "number": 296,
    "task": "How to create a stored procedure to find a player's height using playerID from the players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to find a player's height using playerID from the players table?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerHeight_byID(playerID_in IN players.playerID%TYPE) IS height players.height%TYPE; BEGIN SELECT height INTO height FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Height of player is ' || height); END getPlayerHeight_byID;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerHeight_byID(in playerID_in String) AS VAR height INTEGER; height = (SELECT height FROM players WHERE playerID = playerID_in); THROW 'Height of player is ' || height; END_PROCEDURE;"
  },
  {
    "number": 297,
    "task": "How to create a stored procedure to find the team with the most wins in a given year from teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to find the team with the most wins in a given year from teams table?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamWithMostWins_byYear(year_in IN teams.year%TYPE) IS teamID teams.teamID%TYPE; wins teams.wins%TYPE; BEGIN SELECT teamID, MAX(wins) INTO teamID, wins FROM teams WHERE year = year_in GROUP BY teamID; DBMS_OUTPUT.PUT_LINE('Team with most wins in ' || year_in || ' is ' || teamID || ' with ' || wins || ' wins'); END getTeamWithMostWins_byYear;",
    "output": "CREATE OR REPLACE PROCEDURE getTeamWithMostWins_byYear(in year_in INTEGER) AS VAR teamID String, wins INTEGER; teamID, wins = (SELECT teamID, MAX(wins) FROM teams WHERE year = year_in GROUP BY teamID); THROW 'Team with most wins in ' || year_in || ' is ' || teamID || ' with ' || wins || ' wins'; END_PROCEDURE;"
  },
  {
    "number": 298,
    "task": "How to create a stored procedure to find a player's weight using playerID from the players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to find a player's weight using playerID from the players table?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerWeight_byID(playerID_in IN players.playerID%TYPE) IS weight players.weight%TYPE; BEGIN SELECT weight INTO weight FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Weight of player is ' || weight); END getPlayerWeight_byID;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerWeight_byID(in playerID_in String) AS VAR weight INTEGER; weight = (SELECT weight FROM players WHERE playerID = playerID_in); THROW 'Weight of player is ' || weight; END_PROCEDURE;"
  },
  {
    "number": 299,
    "task": "How to get a player's first NHL year from players table using stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get a player's first NHL year from players table using stored procedure?",
    "input": "CREATE OR REPLACE PROCEDURE getFirstNHL_byPlayerID(playerID_in IN players.playerID%TYPE) IS firstNHL players.firstNHL%TYPE; BEGIN SELECT firstNHL INTO firstNHL FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('First NHL year for player is ' || firstNHL); END getFirstNHL_byPlayerID;",
    "output": "CREATE OR REPLACE PROCEDURE getFirstNHL_byPlayerID(in playerID_in String) AS VAR firstNHL INTEGER; firstNHL = (SELECT firstNHL FROM players WHERE playerID = playerID_in); THROW 'First NHL year for player is ' || firstNHL; END_PROCEDURE;"
  },
  {
    "number": 300,
    "task": "How to get a player's last NHL year from players table using stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get a player's last NHL year from players table using stored procedure?",
    "input": "CREATE OR REPLACE PROCEDURE getLastNHL_byPlayerID(playerID_in IN players.playerID%TYPE) IS lastNHL players.lastNHL%TYPE; BEGIN SELECT lastNHL INTO lastNHL FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Last NHL year for player is ' || lastNHL); END getLastNHL_byPlayerID;",
    "output": "CREATE OR REPLACE PROCEDURE getLastNHL_byPlayerID(in playerID_in String) AS VAR lastNHL INTEGER; lastNHL = (SELECT lastNHL FROM players WHERE playerID = playerID_in); THROW 'Last NHL year for player is ' || lastNHL; END_PROCEDURE;"
  },
  {
    "number": 301,
    "task": "How to find out the birth month and birth day of a player from players table for a given playerID using stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to find out the birth month and birth day of a player from players table for a given playerID using stored procedure?",
    "input": "CREATE OR REPLACE PROCEDURE getBirthMonthDay_byPlayerID(playerID_in IN players.playerID%TYPE) IS birthMonth players.birthMon%TYPE; birthDay players.birthDay%TYPE; BEGIN SELECT birthMon, birthDay INTO birthMonth, birthDay FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Birth Month and Day for player is ' || birthMonth || '/' || birthDay); END getBirthMonthDay_byPlayerID;",
    "output": "CREATE OR REPLACE PROCEDURE getBirthMonthDay_byPlayerID(in playerID_in String) AS VAR birthMonth INTEGER, birthDay INTEGER; birthMonth, birthDay = (SELECT birthMon,birthDay FROM players WHERE playerID = playerID_in); THROW 'Birth Month and Day for player is ' || birthMonth || '/' || birthDay; END_PROCEDURE;"
  },
  {
    "number": 302,
    "task": "How to create a stored procedure to calculate total overTime losses for a given team in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to calculate total overTime losses for a given team in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE getTotalOvertimeLosses_byTeamYear(teamID_in IN teams.teamID%TYPE, year_in IN teams.year%TYPE) IS overtimeLosses teams.overtimeLosses%TYPE; BEGIN SELECT overtimeLosses INTO overtimeLosses FROM teams WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total overtime losses for team in ' || year_in || ' is ' || overtimeLosses); END getTotalOvertimeLosses_byTeamYear;",
    "output": "CREATE OR REPLACE PROCEDURE getTotalOvertimeLosses_byTeamYear(in teamID_in String, in year_in INTEGER) AS VAR overtimeLosses INTEGER; overtimeLosses = (SELECT overtimeLosses FROM teams WHERE teamID = teamID_in AND year = year_in); THROW 'Total overtime losses for team in ' || year_in || ' is ' || overtimeLosses ; END_PROCEDURE;"
  },
  {
    "number": 303,
    "task": "How to create a stored procedure to calculate total assists for a given player in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to calculate total assists for a given player in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE getTotalAssists_byPlayerYear(playerID_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) IS totalAssists INTEGER; BEGIN SELECT SUM(assists) INTO totalAssists FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total assists by player in ' || year_in || ' is ' || totalAssists); END getTotalAssists_byPlayerYear;",
    "output": "CREATE OR REPLACE PROCEDURE getTotalAssists_byPlayerYear(in playerID_in String, in year_in String) AS VAR totalAssists INTEGER; totalAssists = (SELECT SUM(assists) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total assists by player in ' || year || ' is ' || totalAssists; END_PROCEDURE;"
  },
  {
    "number": 304,
    "task": "How to find out the total number of penalty minutes for a player in a given year from scoring table using stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to find out the total number of penalty minutes for a player in a given year from scoring table using stored procedure?",
    "input": "CREATE OR REPLACE PROCEDURE getTotalPenaltyMinutes_byPlayerYear(playerID_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) IS penaltyMinutes INTEGER; BEGIN SELECT SUM(penaltyMinutes) INTO penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total penalty minutes for player in ' || year_in || ' is ' || penaltyMinutes); END getTotalPenaltyMinutes_byPlayerYear;",
    "output": "CREATE OR REPLACE PROCEDURE getTotalPenaltyMinutes_byPlayerYear(in playerID_in String, in year_in INTEGER) AS VAR penaltyMinutes INTEGER; penaltyMinutes = (SELECT SUM(penaltyMinutes) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total penalty minutes for player in ' || year_in || ' is ' || penaltyMinutes; END_PROCEDURE;"
  },
  {
    "number": 305,
    "task": "How to find out the total games played by a player in a given year from scoring table using a stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to find out the total games played by a player in a given year from scoring table using a stored procedure?",
    "input": "CREATE OR REPLACE PROCEDURE getTotalGamesPlayed_byPlayerYear(playerID_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) IS gamesPlayed INTEGER; BEGIN SELECT SUM(gamesPlayed) INTO gamesPlayed FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total games played by player in ' || year_in || ' is ' || gamesPlayed); END getTotalGamesPlayed_byPlayerYear;",
    "output": "CREATE OR REPLACE PROCEDURE getTotalGamesPlayed_byPlayerYear(in playerID_in String, in year_in INTEGER) AS VAR gamesPlayed INTEGER; gamesPlayed = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total games played by player in ' || year_in || ' is ' || gamesPlayed; END_PROCEDURE;"
  },
  {
    "number": 306,
    "task": "How to find the team of a player using playerID from the scoring table using stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to find the team of a player using playerID from the scoring table using stored procedure?",
    "input": "CREATE OR REPLACE PROCEDURE getTeam_byPlayerID(playerID_in IN scoring.playerID%TYPE) IS teamID scoring.teamID%TYPE; BEGIN SELECT DISTINCT teamID INTO teamID FROM scoring WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Team ID for player is ' || teamID); END getTeam_byPlayerID;",
    "output": "CREATE OR REPLACE PROCEDURE getTeam_byPlayerID(in playerID_in String) AS VAR teamID String; teamID = (SELECT DISTINCT teamID FROM scoring WHERE playerID = playerID_in); THROW 'Team ID for player is ' || teamID; END_PROCEDURE;"
  },
  {
    "number": 307,
    "task": "How to find the position of a player using playerID from the scoring table using stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to find the position of a player using playerID from the scoring table using stored procedure?",
    "input": "CREATE OR REPLACE PROCEDURE getPosition_byPlayerID(playerID_in IN scoring.playerID%TYPE) IS position scoring.position%TYPE; BEGIN SELECT DISTINCT position INTO position FROM scoring WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Player position is ' || position); END getPosition_byPlayerID;",
    "output": "CREATE OR REPLACE PROCEDURE getPosition_byPlayerID(in playerID_in String) AS VAR position String; position = (SELECT DISTINCT position FROM scoring WHERE playerID = playerID_in); THROW 'Player position is ' || position; END_PROCEDURE;"
  },
  {
    "number": 308,
    "task": "How to find the stint of a player using playerID from the scoring table using stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to find the stint of a player using playerID from the scoring table using stored procedure?",
    "input": "CREATE OR REPLACE PROCEDURE getStint_byPlayerID(playerID_in IN scoring.playerID%TYPE) IS stint scoring.stint%TYPE; BEGIN SELECT DISTINCT stint INTO stint FROM scoring WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Player stint is ' || stint); END getStint_byPlayerID;",
    "output": "CREATE OR REPLACE PROCEDURE getStint_byPlayerID(in playerID_in String) AS VAR stint INTEGER; stint = (SELECT DISTINCT stint FROM scoring WHERE playerID = playerID_in); THROW 'Player stint is ' || stint; END_PROCEDURE;"
  },
  {
    "number": 309,
    "task": "Create a stored procedure that takes a team ID and year as inputs and returns the team's name, conferenceID, divisionID, and rank.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a team ID and year as inputs and returns the team's name, conferenceID, divisionID, and rank.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamInfo(teamID_in IN teams.teamID%TYPE, year_in IN teams.year%TYPE) IS tName teams.name%TYPE; cofId teams.conferenceID%TYPE; divId teams.divisionID%TYPE; rnk teams.rank%TYPE; BEGIN SELECT name, conferenceID, divisionID, rank INTO tName, cofId, divId, rnk FROM teams WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(tName || ', ' || cofId || ', ' || divId || ', Rank: ' || rnk); END getTeamInfo;",
    "output": "CREATE PROCEDURE getTeamInfo(teamID_in STRING, year_in INTEGER) AS VAR tName String, cofId String, divId String, rnk INTEGER; tName, cofId, divId, rnk = (SELECT name, conferenceID, divisionID, rank FROM teams WHERE teamID = teamID_in AND year = year_in); THROW tName || ', ' || cofId || ', ' || divId || ', Rank: ' || rnk; END_PROCEDURE;"
  },
  {
    "number": 310,
    "task": "Create a stored procedure that takes a player ID as input and returns the player's total goals and assists in a particular year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a player ID as input and returns the player's total goals and assists in a particular year.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerScores(playerID_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) IS goals scoring.goals%TYPE; assists scoring.assists%TYPE; BEGIN SELECT goals, assists INTO goals, assists FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Goals: ' || goals || ', Assists: ' || assists); END getPlayerScores;",
    "output": "CREATE PROCEDURE getPlayerScores(playerID_in STRING, year_in INTEGER) AS VAR goals INTEGER, assists INTEGER; goals, assists = (SELECT goals, assists FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Goals: ' || goals || ', Assists: ' || assists; END_PROCEDURE;"
  },
  {
    "number": 311,
    "task": "Create a stored procedure that calculates the total weight of all players in a specific position.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the total weight of all players in a specific position.",
    "input": "CREATE OR REPLACE PROCEDURE totalWeight(position_in IN players.position%TYPE) IS total_weight players.weight%TYPE; BEGIN SELECT SUM(weight) INTO total_weight FROM players WHERE position = position_in; DBMS_OUTPUT.PUT_LINE('Total Weight: ' || total_weight); END totalWeight;",
    "output": "CREATE PROCEDURE totalWeight(position_in STRING) AS VAR total_weight INTEGER = (SELECT SUM(weight) FROM players WHERE position = position_in); THROW 'Total Weight: ' || total_weight; END_PROCEDURE;"
  },
  {
    "number": 312,
    "task": "Create a stored procedure that retrieves a player's birth information when given their player ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that retrieves a player's birth information when given their player ID.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerBirthInfo(playerID_in IN players.playerID%TYPE) IS birthYr players.birthYear%TYPE; birthMo players.birthMon%TYPE; birthDy players.birthDay%TYPE; BEGIN SELECT birthYear, birthMon, birthDay INTO birthYr, birthMo, birthDy FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Birth Date: ' || birthYr || '/' || birthMo || '/' || birthDy); END getPlayerBirthInfo;",
    "output": "CREATE PROCEDURE getPlayerBirthInfo(playerID_in STRING) AS VAR birthYr INTEGER, birthMo INTEGER, birthDy INTEGER; birthYr, birthMo, birthDy = (SELECT birthYear, birthMon, birthDay FROM players WHERE playerID = playerID_in); THROW 'Birth Date: ' || birthYr || '/' || birthMo || '/' || birthDy; END_PROCEDURE;"
  },
  {
    "number": 313,
    "task": "Create a stored procedure that calculates the average height of players in a given birthCountry.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the average height of players in a given birthCountry.",
    "input": "CREATE OR REPLACE PROCEDURE avgHeight(birthCountry_in IN players.birthCountry%TYPE) IS avg_height players.height%TYPE; BEGIN SELECT AVG(height) INTO avg_height FROM players WHERE birthCountry = birthCountry_in; DBMS_OUTPUT.PUT_LINE('Average Height: ' || avg_height); END avgHeight;",
    "output": "CREATE PROCEDURE avgHeight(birthCountry_in STRING) AS VAR avg_height INTEGER = (SELECT AVG(height) FROM players WHERE birthCountry = birthCountry_in); THROW 'Average Height: ' || avg_height; END_PROCEDURE;"
  },
  {
    "number": 314,
    "task": "Create a stored procedure that takes a team ID as input and returns the team's wins, losses, and ties.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a team ID as input and returns the team's wins, losses, and ties.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamResults(teamID_in IN teams.teamID%TYPE, year_in IN teams.year%TYPE) IS wins teams.wins%TYPE; losses teams.losses%TYPE; ties teams.ties%TYPE; BEGIN SELECT wins, losses, ties INTO wins, losses, ties FROM teams WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Wins: ' || wins || ', Losses: ' || losses || ', Ties: ' || ties); END getTeamResults;",
    "output": "CREATE PROCEDURE getTeamResults(teamID_in STRING, year_in INTEGER) AS VAR wins INTEGER, losses INTEGER, ties INTEGER; wins, losses, ties = (SELECT wins, losses, ties FROM teams WHERE teamID = teamID_in AND year = year_in); THROW 'Wins: ' || wins || ', Losses: ' || losses || ', Ties: ' || ties; END_PROCEDURE;"
  },
  {
    "number": 315,
    "task": "Create a stored procedure that calculates the oldest player in a given position.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the oldest player in a given position.",
    "input": "CREATE OR REPLACE PROCEDURE oldestPlayer(position_in IN players.position%TYPE) IS birthYear players.birthYear%TYPE; BEGIN SELECT MIN(birthYear) INTO birthYear FROM players WHERE position = position_in; DBMS_OUTPUT.PUT_LINE('Oldest Birth Year: ' || birthYear); END oldestPlayer;",
    "output": "CREATE PROCEDURE oldestPlayer(position_in STRING) AS VAR birthYear INTEGER = (SELECT MIN(birthYear) FROM players WHERE position = position_in); THROW 'Oldest Birth Year: ' || birthYear; END_PROCEDURE;"
  },
  {
    "number": 316,
    "task": "Create a stored procedure that resorts the total games played by a player in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that resorts the total games played by a player in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE totalGamesPlayed(playerID_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) IS total_games scoring.gamesPlayed%TYPE; BEGIN SELECT SUM(gamesPlayed) INTO total_games FROM scoring WHERE playerID = playerID_in AND YEAR = year_in; DBMS_OUTPUT.PUT_LINE('Total Games Played: ' || total_games); END totalGamesPlayed;",
    "output": "CREATE PROCEDURE totalGamesPlayed(playerID_in STRING, year_in INTEGER) AS VAR total_games INTEGER = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = playerID_in AND YEAR = year_in); THROW 'Total Games Played: ' || total_games; END_PROCEDURE;"
  },
  {
    "number": 317,
    "task": "Create a stored procedure that calculates the average weight of all players in a specific team in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the average weight of all players in a specific team in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE avgWeight(teamID_in IN scoring.teamID%TYPE, year_in IN scoring.year%TYPE) IS avg_Weight players.weight%TYPE; BEGIN SELECT AVG(weight) INTO avg_Weight FROM players INNER JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamID_in AND scoring.year = year_in; DBMS_OUTPUT.PUT_LINE('Average Weight: ' || avg_Weight); END avgWeight;",
    "output": "CREATE PROCEDURE avgWeight(teamID_in STRING, year_in INTEGER) AS VAR avg_Weight INTEGER = (SELECT AVG(weight) FROM players INNER JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamID_in AND scoring.year = year_in); THROW 'Average Weight: ' || avg_Weight; END_PROCEDURE;"
  },
  {
    "number": 318,
    "task": "Create a stored procedure that retrieves the playerID and penaltyMinutes of the player with highest penalty minutes in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that retrieves the playerID and penaltyMinutes of the player with highest penalty minutes in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE mostPenaltyPlayer(year_in IN scoring.year%TYPE) IS playerID scoring.playerID%TYPE; penaltyMins scoring.penaltyMinutes%TYPE; BEGIN SELECT playerID, MAX(penaltyMinutes) INTO playerID, penaltyMins FROM scoring WHERE year = year_in; DBMS_OUTPUT.PUT_LINE('Player ID: ' || playerID || ', Penalty Minutes: ' || penaltyMins); END mostPenaltyPlayer;",
    "output": "CREATE PROCEDURE mostPenaltyPlayer(year_in INTEGER) AS VAR playerID STRING, penaltyMins INTEGER; playerID, penaltyMins = (SELECT playerID, MAX(penaltyMinutes) FROM scoring WHERE year = year_in); THROW 'Player ID: ' || playerID || ', Penalty Minutes: ' || penaltyMins; END_PROCEDURE;"
  },
  {
    "number": 319,
    "task": "Create a stored procedure that calculates the youngest player in a given position.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the youngest player in a given position.",
    "input": "CREATE OR REPLACE PROCEDURE youngestPlayer(position_in IN players.position%TYPE) IS birthYear players.birthYear%TYPE; BEGIN SELECT MAX(birthYear) INTO birthYear FROM players WHERE position = position_in; DBMS_OUTPUT.PUT_LINE('Youngest Birth Year: ' || birthYear); END youngestPlayer;",
    "output": "CREATE PROCEDURE youngestPlayer(position_in STRING) AS VAR birthYear INTEGER = (SELECT MAX(birthYear) FROM players WHERE position = position_in); THROW 'Youngest Birth Year: ' || birthYear; END_PROCEDURE;"
  },
  {
    "number": 320,
    "task": "Create a stored procedure that retrieves the first and last NHL years of a player when given their first name and last name.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that retrieves the first and last NHL years of a player when given their first name and last name.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerNHLYearsByName(firstName_in IN players.firstName%TYPE, lastName_in IN players.lastName%TYPE) IS firstNHL players.firstNHL%TYPE; lastNHL players.lastNHL%TYPE; BEGIN SELECT firstNHL, lastNHL INTO firstNHL, lastNHL FROM players WHERE firstName = firstName_in AND lastName = lastName_in; DBMS_OUTPUT.PUT_LINE('First NHL Year: ' || firstNHL || ', Last NHL Year: ' || lastNHL); END getPlayerNHLYearsByName;",
    "output": "CREATE PROCEDURE getPlayerNHLYearsByName(firstName_in STRING, lastName_in STRING) AS VAR firstNHL INTEGER, lastNHL INTEGER; firstNHL, lastNHL = (SELECT firstNHL, lastNHL FROM players WHERE firstName = firstName_in AND lastName = lastName_in); THROW 'First NHL Year: ' || firstNHL || ', Last NHL Year: ' || lastNHL; END_PROCEDURE;"
  },
  {
    "number": 321,
    "task": "Create a stored procedure that calculates the total games won by a team in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the total games won by a team in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE totalWins(teamID_in IN teams.teamID%TYPE, year_in IN teams.year%TYPE) IS total_wins teams.wins%TYPE; BEGIN SELECT wins INTO total_wins FROM teams WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total Wins: ' || total_wins); END totalWins;",
    "output": "CREATE PROCEDURE totalWins(teamID_in STRING, year_in INTEGER) AS VAR total_wins INTEGER = (SELECT wins FROM teams WHERE teamID = teamID_in AND year = year_in); THROW 'Total Wins: ' || total_wins; END_PROCEDURE;"
  },
  {
    "number": 322,
    "task": "Create a stored procedure that retrieves the player's birth city and state when given their player ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that retrieves the player's birth city and state when given their player ID.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerBirthPlace(playerID_in IN players.playerID%TYPE) IS birthCity players.birthCity%TYPE; birthState players.birthState%TYPE; BEGIN SELECT birthCity, birthState INTO birthCity, birthState FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Birth Place: ' || birthCity || ', ' || birthState); END getPlayerBirthPlace;",
    "output": "CREATE PROCEDURE getPlayerBirthPlace(playerID_in STRING) AS VAR birthCity String, birthState String; birthCity, birthState = (SELECT birthCity, birthState FROM players WHERE playerID = playerID_in); THROW 'Birth Place: ' || birthCity || ', ' || birthState; END_PROCEDURE;"
  },
  {
    "number": 323,
    "task": "Create a stored procedure that calculates the smallest weight of players in a given team for a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the smallest weight of players in a given team for a given year.",
    "input": "CREATE OR REPLACE PROCEDURE lightestPlayer(teamID_in IN scoring.teamID%TYPE, year_in IN scoring.year%TYPE) IS lightest_weight players.weight%TYPE; BEGIN SELECT MIN(weight) INTO lightest_weight FROM players INNER JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamID_in AND scoring.year = year_in; DBMS_OUTPUT.PUT_LINE('Lightest Player Weight: ' || lightest_weight); END lightestPlayer;",
    "output": "CREATE PROCEDURE lightestPlayer(teamID_in STRING, year_in INTEGER) AS VAR lightest_weight INTEGER = (SELECT MIN(weight) FROM players INNER JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamID_in AND scoring.year = year_in); THROW 'Lightest Player Weight: ' || lightest_weight; END_PROCEDURE;"
  },
  {
    "number": 324,
    "task": "Create a stored procedure that calculates the highest weight of players in a given team for a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the highest weight of players in a given team for a given year.",
    "input": "CREATE OR REPLACE PROCEDURE heaviestPlayer(teamID_in IN scoring.teamID%TYPE, year_in IN scoring.year%TYPE) IS heaviest_weight players.weight%TYPE; BEGIN SELECT MAX(weight) INTO heaviest_weight FROM players INNER JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamID_in AND scoring.year = year_in; DBMS_OUTPUT.PUT_LINE('Heaviest Player Weight: ' || heaviest_weight); END heaviestPlayer;",
    "output": "CREATE PROCEDURE heaviestPlayer(teamID_in STRING, year_in INTEGER) AS VAR heaviest_weight INTEGER = (SELECT MAX(weight) FROM players INNER JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamID_in AND scoring.year = year_in); THROW 'Heaviest Player Weight: ' || heaviest_weight; END_PROCEDURE;"
  },
  {
    "number": 325,
    "task": "Create a stored procedure that retrieves the name and position of a hockey player, provided their number.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that retrieves the name and position of a hockey player, provided their number.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerInfoByNumber(number_in IN hockey.number%TYPE) IS name hockey.name%TYPE; position hockey.position%TYPE; BEGIN SELECT name, position INTO name, position FROM hockey WHERE number = number_in; DBMS_OUTPUT.PUT_LINE('Name: ' || name || ', Position: ' || position); END getPlayerInfoByNumber;",
    "output": "CREATE PROCEDURE getPlayerInfoByNumber(number_in INTEGER) AS VAR name STRING, position STRING; name, position = (SELECT name, position FROM hockey WHERE number = number_in); THROW 'Name: ' || name || ', Position: ' || position; END_PROCEDURE;"
  },
  {
    "number": 326,
    "task": "Create a stored procedure that retrieves the position and team of a Hockey player when given their name.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that retrieves the position and team of a Hockey player when given their name.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerPositionAndTeamByName(name_in VARCHAR2) IS position VARCHAR2(50); team VARCHAR2(50); BEGIN SELECT position, team INTO position, team FROM hockey WHERE name = name_in; DBMS_OUTPUT.PUT_LINE('Position: ' || position || ', Team: ' || team); END;",
    "output": "CREATE PROCEDURE getPlayerPositionAndTeamByName(name_in STRING) AS VAR position STRING, team STRING; position, team = (SELECT position, team FROM hockey WHERE name = name_in); THROW 'Position: ' || position || ', Team: ' || team; END_PROCEDURE;"
  },
  {
    "number": 327,
    "task": "Create a stored procedure that takes a playerID and returns the player's name, height and weight.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a playerID and returns the player's name, height and weight.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_info(in_playerID_in VARCHAR2) IS out_firstName VARCHAR2(50); out_lastName VARCHAR2(50); out_height NUMBER; out_weight NUMBER; BEGIN SELECT firstName, lastName, height, weight INTO out_firstName, out_lastName, out_height, out_weight FROM players WHERE playerID = in_playerID_in; DBMS_OUTPUT.PUT_LINE('First Name: ' || out_firstName || ' Last Name: ' || out_lastName || ' Height: ' || out_height || ' Weight: ' || out_weight); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_info(in_playerID_in String) AS VAR out_firstName String, out_lastName String, out_height Integer, out_weight Integer; out_firstName, out_lastName, out_height, out_weight = (SELECT firstName, lastName, height, weight FROM players WHERE playerID = in_playerID_in); THROW 'First Name: ' || out_firstName || ' Last Name: ' || out_lastName || ' Height: ' || out_height || ' Weight: ' || out_weight; END_PROCEDURE;"
  },
  {
    "number": 328,
    "task": "Create a stored procedure that takes a teamID and returns the team's total wins in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a teamID and returns the team's total wins in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_wins(in_teamID_in VARCHAR2, in_year_in NUMBER) IS out_wins NUMBER; BEGIN SELECT wins INTO out_wins FROM teams WHERE teamID = in_teamID_in AND year = in_year_in; DBMS_OUTPUT.PUT_LINE('Wins: ' || out_wins); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_team_wins(in_teamID_in String, in_year_in Integer) AS VAR out_wins Integer; out_wins = (SELECT wins FROM teams WHERE teamID = in_teamID_in AND year = in_year_in); THROW 'Wins: ' || out_wins; END_PROCEDURE;"
  },
  {
    "number": 329,
    "task": "Create a stored procedure that takes a player's firstName and lastName and returns their total goals and assists in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a player's firstName and lastName and returns their total goals and assists in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_scored(in_firstName_in VARCHAR2, in_lastName_in VARCHAR2, in_year_in NUMBER) IS out_goals NUMBER; out_assists NUMBER; BEGIN SELECT goals, assists INTO out_goals, out_assists FROM scoring WHERE playerID = (SELECT playerID FROM players WHERE firstName = in_firstName_in AND lastName = in_lastName_in) AND year = in_year_in; DBMS_OUTPUT.PUT_LINE('Goals: ' || out_goals || ' Assists: ' || out_assists); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_scored(in_firstName_in String, in_lastName_in String, in_year_in Integer) AS VAR out_goals Integer, out_assists Integer; out_goals, out_assists = (SELECT goals, assists FROM scoring WHERE playerID = (SELECT playerID FROM players WHERE firstName = in_firstName_in AND lastName = in_lastName_in) AND year = in_year_in); THROW 'Goals: ' || out_goals || ' Assists: ' || out_assists; END_PROCEDURE;"
  },
  {
    "number": 330,
    "task": "Create a stored procedure that takes a teamID and shows the team's total playoff appearances.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a teamID and shows the team's total playoff appearances.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_playoffs(in_teamID_in VARCHAR2) IS out_playoffs NUMBER; BEGIN SELECT COUNT(playoff) INTO out_playoffs FROM teams WHERE teamID = in_teamID_in AND playoff IS NOT NULL; DBMS_OUTPUT.PUT_LINE('Playoff Appearances: ' || out_playoffs); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_team_playoffs(in_teamID_in String) AS VAR out_playoffs Integer; out_playoffs = (SELECT COUNT(playoff) FROM teams WHERE teamID = in_teamID_in AND playoff != ''); THROW 'Playoff Appearances: ' || out_playoffs; END_PROCEDURE;"
  },
  {
    "number": 331,
    "task": "Create a stored procedure that takes a playerID and returns the player's birth date format as 'YYYY-MM-DD'.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a playerID and returns the player's birth date format as 'YYYY-MM-DD'.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birthday(in_playerID_in VARCHAR2) IS out_birthYear NUMBER; out_birthMon NUMBER; out_birthDay NUMBER; BEGIN SELECT birthYear, birthMon, birthDay INTO out_birthYear, out_birthMon, out_birthDay FROM players WHERE playerID = in_playerID_in; DBMS_OUTPUT.PUT_LINE('Birth Date (YYYY-MM-DD): ' || TO_CHAR(TO_DATE(out_birthYear || '-' || out_birthMon || '-' || out_birthDay, 'YYYY-MM-DD'), 'YYYY-MM-DD')); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_birthday(in_playerID_in String) AS VAR out_birthYear Integer, out_birthMon Integer, out_birthDay Integer; out_birthYear, out_birthMon, out_birthDay = (SELECT birthYear, birthMon, birthDay FROM players WHERE playerID = in_playerID_in); THROW 'Birth Date (YYYY-MM-DD): ' || out_birthYear || '-' || out_birthMon || '-' || out_birthDay; END_PROCEDURE;"
  },
  {
    "number": 332,
    "task": "Create a stored procedure that takes a teamID and returns the team's conference.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a teamID and returns the team's conference.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_conference(in_teamID_in VARCHAR2) IS out_conference VARCHAR2(50); BEGIN SELECT conferenceID INTO out_conference FROM teams WHERE teamID = in_teamID_in; DBMS_OUTPUT.PUT_LINE('Conference: ' || out_conference); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_team_conference(in_teamID_in String) AS VAR out_conference String; out_conference = (SELECT conferenceID FROM teams WHERE teamID = in_teamID_in); THROW 'Conference: ' || out_conference; END_PROCEDURE;"
  },
  {
    "number": 333,
    "task": "Create a stored procedure that takes a playerID and returns the player's position.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a playerID and returns the player's position.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_position(in_playerID_in VARCHAR2) IS out_position VARCHAR2(50); BEGIN SELECT position INTO out_position FROM players WHERE playerID = in_playerID_in; DBMS_OUTPUT.PUT_LINE('Position: ' || out_position); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_position(in_playerID_in String) AS VAR out_position String; out_position = (SELECT position FROM players WHERE playerID = in_playerID_in); THROW 'Position: ' || out_position; END_PROCEDURE;"
  },
  {
    "number": 334,
    "task": "Create a stored procedure that takes a player's name and returns the total games played by the player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a player's name and returns the total games played by the player.",
    "input": "CREATE OR REPLACE PROCEDURE get_games_played(in_name_in VARCHAR2) IS out_gamesPlayed NUMBER; BEGIN SELECT SUM(gamesPlayed) INTO out_gamesPlayed FROM players WHERE name = in_name_in; DBMS_OUTPUT.PUT_LINE('Total Games Played: ' || out_gamesPlayed); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_games_played(in_name_in String) AS VAR out_gamesPlayed Integer; out_gamesPlayed = (SELECT SUM(gamesPlayed) FROM players WHERE name = in_name_in); THROW 'Total Games Played: ' || out_gamesPlayed; END_PROCEDURE;"
  },
  {
    "number": 335,
    "task": "Create a stored procedure that takes a player's first name and last name and returns the player's first and last season in the NHL.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a player's first name and last name and returns the player's first and last season in the NHL.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_nhl_career(in_firstName_in VARCHAR2, in_lastName_in VARCHAR2) IS out_firstNHL NUMBER; out_lastNHL NUMBER; BEGIN SELECT firstNHL, lastNHL INTO out_firstNHL, out_lastNHL FROM players WHERE firstName = in_firstName_in AND lastName = in_lastName_in; DBMS_OUTPUT.PUT_LINE('First NHL Season: ' || out_firstNHL || ' Last NHL Season: ' || out_lastNHL); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_nhl_career(in_firstName_in String, in_lastName_in String) AS VAR out_firstNHL Integer, out_lastNHL Integer; out_firstNHL, out_lastNHL = (SELECT firstNHL, lastNHL FROM players WHERE firstName = in_firstName_in AND lastName = in_lastName_in); THROW 'First NHL Season: ' || out_firstNHL || ' Last NHL Season: ' || out_lastNHL; END_PROCEDURE;"
  },
  {
    "number": 336,
    "task": "Create a stored procedure that takes a playerID and returns the player's birth location.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a playerID and returns the player's birth location.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birth_location(in_playerID_in VARCHAR2) IS out_birthCountry VARCHAR2(100); out_birthState VARCHAR2(100); out_birthCity VARCHAR2(100); BEGIN SELECT birthCountry, birthState, birthCity INTO out_birthCountry, out_birthState, out_birthCity FROM players WHERE playerID = in_playerID_in; DBMS_OUTPUT.PUT_LINE('Born in: ' || out_birthCity || ', ' || out_birthState || ', ' || out_birthCountry); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_birth_location(in_playerID_in String) AS VAR out_birthCountry String, out_birthState String, out_birthCity String; out_birthCountry, out_birthState, out_birthCity = (SELECT birthCountry, birthState, birthCity FROM players WHERE playerID = in_playerID_in); THROW 'Born in: ' || out_birthCity || ', ' || out_birthState || ', ' || out_birthCountry; END_PROCEDURE;"
  },
  {
    "number": 337,
    "task": "Create a stored procedure that takes a teamID and returns the team's average position ranking for each year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a teamID and returns the team's average position ranking for each year.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_avg_rank(in_teamID_in VARCHAR2) IS out_avg_rank NUMBER; BEGIN SELECT AVG(rank) INTO out_avg_rank FROM teams WHERE teamID = in_teamID_in; DBMS_OUTPUT.PUT_LINE('Average Rank: ' || out_avg_rank); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_team_avg_rank(in_teamID_in String) AS VAR out_avg_rank String; out_avg_rank = (SELECT AVG(rank) FROM teams WHERE teamID = in_teamID_in); THROW 'Average Rank: ' || out_avg_rank; END_PROCEDURE;"
  },
  {
    "number": 338,
    "task": "Create a stored procedure that takes a playerID and gets the player's total games played.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a playerID and gets the player's total games played.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_games(in_playerID_in VARCHAR2) IS out_games NUMBER; BEGIN SELECT SUM(gamesPlayed) INTO out_games FROM scoring WHERE playerID = in_playerID_in; DBMS_OUTPUT.PUT_LINE('Games Played: ' || out_games); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_games(in_playerID_in String) AS VAR out_games INTEGER; out_games = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = in_playerID_in); THROW 'Games Played: ' || out_games; END_PROCEDURE;"
  },
  {
    "number": 339,
    "task": "Create a stored procedure that takes a players first name and last name and returns the player's weight",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a players first name and last name and returns the player's weight",
    "input": "CREATE OR REPLACE PROCEDURE get_player_weight(in_firstName_in VARCHAR2, in_lastName_in VARCHAR2) IS out_weight NUMBER; BEGIN SELECT weight INTO out_weight FROM players WHERE firstName = in_firstName_in AND lastName = in_lastName_in; DBMS_OUTPUT.PUT_LINE('Weight: ' || out_weight); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_weight(in_firstName_in String, in_lastName_in String) AS VAR out_weight INTEGER; out_weight = (SELECT weight FROM players WHERE firstName = in_firstName_in AND lastName = in_lastName_in); THROW 'Weight: ' || out_weight; END_PROCEDURE;"
  },
  {
    "number": 340,
    "task": "Create a stored procedure that takes a teamID and a year and returns the teams number of games, wins and losses for that year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a teamID and a year and returns the teams number of games, wins and losses for that year.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_record(in_teamID_in VARCHAR2, in_year_in NUMBER) IS out_games NUMBER; out_wins NUMBER; out_losses NUMBER; BEGIN SELECT games, wins, losses INTO out_games, out_wins, out_losses FROM teams WHERE teamID = in_teamID_in AND year = in_year_in; DBMS_OUTPUT.PUT_LINE('Games: ' || out_games || ' Wins: ' || out_wins || ' Losses: ' || out_losses); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_team_record(in_teamID_in String, in_year_in Integer) AS VAR out_games INTEGER, out_wins INTEGER, out_losses INTEGER; out_games, out_wins, out_losses = (SELECT games, wins, losses FROM teams WHERE teamID = in_teamID_in AND year = in_year_in); THROW 'Games: ' || out_games || ' Wins: ' || out_wins || ' Losses: ' || out_losses; END_PROCEDURE;"
  },
  {
    "number": 341,
    "task": "Create a stored procedure that takes a player ID and returns the total number of goals, assists and penalty minutes.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a player ID and returns the total number of goals, assists and penalty minutes.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_performance(in_playerID_in VARCHAR2) IS out_goals NUMBER; out_assists NUMBER; out_penaltyMinutes NUMBER; BEGIN SELECT SUM(goals), SUM(assists), SUM(penaltyMinutes) INTO out_goals, out_assists, out_penaltyMinutes FROM scoring WHERE playerID = in_playerID_in; DBMS_OUTPUT.PUT_LINE('Goals: ' || out_goals || ' Assists: ' || out_assists || ' Penalty Minutes: ' || out_penaltyMinutes); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_performance(in_playerID_in String) AS VAR out_goals INTEGER, out_assists INTEGER, out_penaltyMinutes INTEGER; out_goals, out_assists, out_penaltyMinutes = (SELECT SUM(goals), SUM(assists), SUM(penaltyMinutes) FROM scoring WHERE playerID = in_playerID_in); THROW 'Goals: ' || out_goals || ' Assists: ' || out_assists || ' Penalty Minutes: ' || out_penaltyMinutes; END_PROCEDURE;"
  },
  {
    "number": 342,
    "task": "Create a stored procedure that takes a playerID and return the position they play in their team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a playerID and return the position they play in their team.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_team_position(in_playerID_in VARCHAR2) IS out_position VARCHAR2(100); BEGIN SELECT position INTO out_position FROM scoring WHERE playerID = in_playerID_in; DBMS_OUTPUT.PUT_LINE('Position in Team: ' || out_position); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_team_position(in_playerID_in String) AS VAR out_position String; out_position = (SELECT position FROM scoring WHERE playerID = in_playerID_in); THROW 'Position in Team: ' || out_position; END_PROCEDURE;"
  },
  {
    "number": 343,
    "task": "Create a stored procedure that takes a teamID and shows the team's total games, wins and losses.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a teamID and shows the team's total games, wins and losses.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_total_stats(in_teamID_in VARCHAR2) IS out_games NUMBER; out_wins NUMBER; out_losses NUMBER; BEGIN SELECT SUM(games), SUM(wins), SUM(losses) INTO out_games, out_wins, out_losses FROM teams WHERE teamID = in_teamID_in; DBMS_OUTPUT.PUT_LINE('Total Games: ' || out_games || ' Total Wins: ' || out_wins || ' Total Losses: ' || out_losses); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_team_total_stats(in_teamID_in String) AS VAR out_games Integer, out_wins Integer, out_losses Integer; out_games, out_wins, out_losses = (SELECT SUM(games), SUM(wins), SUM(losses) FROM teams WHERE teamID = in_teamID_in); THROW 'Total Games: ' || out_games || ' Total Wins: ' || out_wins || ' Total Losses: ' || out_losses; END_PROCEDURE;"
  },
  {
    "number": 344,
    "task": "Create a stored procedure that takes a player's firstName and lastName and return their player ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a player's firstName and lastName and return their player ID.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_id(in_firstName_in VARCHAR2, in_lastName_in VARCHAR2) IS out_playerID VARCHAR2(100); BEGIN SELECT playerID INTO out_playerID FROM players WHERE firstName = in_firstName_in AND lastName = in_lastName_in; DBMS_OUTPUT.PUT_LINE('Player ID: ' || out_playerID); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_id(in_firstName_in String, in_lastName_in String) AS VAR out_playerID String; out_playerID = (SELECT playerID FROM players WHERE firstName = in_firstName_in AND lastName = in_lastName_in); THROW 'Player ID: ' || out_playerID; END_PROCEDURE;"
  },
  {
    "number": 345,
    "task": "Create a stored procedure that takes a teamID and returns the team's average overtime losses.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that takes a teamID and returns the team's average overtime losses.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_overtime_losses(in_teamID_in VARCHAR2) IS out_overtimeLosses NUMBER; BEGIN SELECT AVG(overtimeLosses) INTO out_overtimeLosses FROM teams WHERE teamID = in_teamID_in; DBMS_OUTPUT.PUT_LINE('Average Overtime Losses: ' || out_overtimeLosses); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_team_overtime_losses(in_teamID_in String) AS VAR out_overtimeLosses String; out_overtimeLosses = (SELECT AVG(overtimeLosses) FROM teams WHERE teamID = in_teamID_in); THROW 'Average Overtime Losses: ' || out_overtimeLosses; END_PROCEDURE;"
  },
  {
    "number": 346,
    "task": "Write a stored procedure to insert a record into the hockey table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to insert a record into the hockey table.",
    "input": "CREATE OR REPLACE PROCEDURE insert_hockey_record (Id_in NUMBER, Number_in NUMBER, Name_in VARCHAR2, Position_in VARCHAR2, Team_in VARCHAR2) IS BEGIN INSERT INTO Hockey (Id, Number, Name, Position, Team) VALUES (Id_in, Number_in, Name_in, Position_in, Team_in); COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE insert_hockey_record (Id_in BIGINT, Number_in Integer, Name_in String, Position_in String, Team_in String) AS VAR sql_string String = 'INSERT INTO Hockey (Id, Number, Name, Position, Team) VALUES (Id_in, Number_in, Name_in, Position_in, Team_in)'; EXECUTE IMMEDIATE sql_string; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 347,
    "task": "Write a stored procedure to delete a record from the teams table based on a given teamID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to delete a record from the teams table based on a given teamID.",
    "input": "CREATE OR REPLACE PROCEDURE delete_team_by_id (teamID_in VARCHAR2) IS BEGIN DELETE FROM teams WHERE teamID = teamID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE delete_team_by_id (teamID_in varchar(3)) AS VAR sql_string String = 'DELETE FROM teams WHERE teamID = ' || teamID_in; EXECUTE IMMEDIATE sql_string; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 348,
    "task": "Write a stored procedure to update lastNHL year for a player in the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to update lastNHL year for a player in the players table.",
    "input": "CREATE OR REPLACE PROCEDURE update_lastNHL_year (playerID_in VARCHAR2, lastNHL_in NUMBER) IS BEGIN UPDATE players SET lastNHL = lastNHL_in WHERE playerID = playerID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE update_lastNHL_year (playerID_in varchar(10), lastNHL_in Integer) AS VAR sql_string String = 'UPDATE players SET lastNHL = ' || lastNHL_in || ' WHERE playerID = ' || playerID_in; EXECUTE IMMEDIATE sql_string; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 349,
    "task": "Write a stored procedure to select number of goals scored by a player in a particular year from the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to select number of goals scored by a player in a particular year from the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE select_goals_scored (playerID_in VARCHAR2, year_in NUMBER) IS goals NUMBER; BEGIN SELECT goals INTO goals FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(goals); END;",
    "output": "CREATE PROCEDURE select_goals_scored (playerID_in varchar(10), year_in Integer) AS VAR goals INTEGER = (SELECT goals FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW goals; END_PROCEDURE;"
  },
  {
    "number": 350,
    "task": "Write a stored procedure to count number of players born in a particular country from the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to count number of players born in a particular country from the players table.",
    "input": "CREATE OR REPLACE PROCEDURE count_players_by_country (birthCountry_in VARCHAR2) IS count NUMBER; BEGIN SELECT count(playerID) INTO count FROM players WHERE birthCountry = birthCountry_in; DBMS_OUTPUT.PUT_LINE(count); END;",
    "output": "CREATE PROCEDURE count_players_by_country (birthCountry_in varchar(32)) AS VAR count INTEGER = (SELECT count(playerID) FROM players WHERE birthCountry = birthCountry_in); THROW count; END_PROCEDURE;"
  },
  {
    "number": 351,
    "task": "Write a stored procedure to select team name by its ID from the teams table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to select team name by its ID from the teams table.",
    "input": "CREATE OR REPLACE PROCEDURE select_team_by_id (teamID_in VARCHAR2) IS team_name VARCHAR2(100); BEGIN SELECT name INTO team_name FROM teams WHERE teamID = teamID_in; DBMS_OUTPUT.PUT_LINE(team_name); END;",
    "output": "CREATE PROCEDURE select_team_by_id (teamID_in varchar(3)) AS VAR team_name String = (SELECT name FROM teams WHERE teamID = teamID_in); THROW team_name; END_PROCEDURE;"
  },
  {
    "number": 352,
    "task": "Write a stored procedure to update height and weight for a particular player in the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to update height and weight for a particular player in the players table.",
    "input": "CREATE OR REPLACE PROCEDURE update_player_height_weight (playerID_in VARCHAR2, height_in NUMBER, weight_in NUMBER) IS BEGIN UPDATE players SET height = height_in, weight = weight_in WHERE playerID = playerID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE update_player_height_weight (playerID_in varchar(10), height_in Integer, weight_in Integer) AS VAR sql_string String = 'UPDATE players SET height = ' || height_in || ', weight = ' || weight_in || ' WHERE playerID = ' || playerID_in; EXECUTE IMMEDIATE sql_string; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 353,
    "task": "Write a stored procedure to delete a record from scoring table based on playerID, year, stint and teamID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to delete a record from scoring table based on playerID, year, stint and teamID.",
    "input": "CREATE OR REPLACE PROCEDURE delete_scoring_record (playerID_in VARCHAR2, year_in NUMBER, stint_in NUMBER, teamID_in VARCHAR2) IS BEGIN DELETE FROM scoring WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE delete_scoring_record (playerID_in varchar(10), year_in Integer, stint_in Integer, teamID_in varchar(3)) AS VAR sql_string String = 'DELETE FROM scoring WHERE playerID = ' || playerID_in || ' AND year = ' || year_in || ' AND stint = ' || stint_in || ' AND teamID = ' || teamID_in; EXECUTE IMMEDIATE sql_string; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 354,
    "task": "Write a stored procedure to update player name in the hockey table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to update player name in the hockey table.",
    "input": "CREATE OR REPLACE PROCEDURE update_player_name (Id_in NUMBER, Name_in VARCHAR2) IS BEGIN UPDATE Hockey SET Name = Name_in WHERE Id = Id_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE update_player_name (Id_in BIGINT, Name_in String) AS VAR sql_string String = 'UPDATE Hockey SET Name = ' || Name_in || ' WHERE Id = ' || Id_in; EXECUTE IMMEDIATE sql_string; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 355,
    "task": "Write a stored procedure to select playerID and position from the players table based on a particular weight.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to select playerID and position from the players table based on a particular weight.",
    "input": "CREATE OR REPLACE PROCEDURE select_player_by_weight (weight_in NUMBER) IS playerID_position VARCHAR2(100); BEGIN SELECT playerID || ', ' || position INTO playerID_position FROM players WHERE weight = weight_in; DBMS_OUTPUT.PUT_LINE(playerID_position); END;",
    "output": "CREATE PROCEDURE select_player_by_weight (weight_in Integer) AS VAR playerID_position String = (SELECT playerID, position FROM players WHERE weight = weight_in); THROW playerID_position; END_PROCEDURE;"
  },
  {
    "number": 356,
    "task": "Write a stored procedure to count number of players in a particular team from the hockey table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to count number of players in a particular team from the hockey table.",
    "input": "CREATE OR REPLACE PROCEDURE count_players_in_team (Team_in VARCHAR2) IS count NUMBER; BEGIN SELECT count(Id) INTO count FROM Hockey WHERE Team = Team_in; DBMS_OUTPUT.PUT_LINE(count); END;",
    "output": "CREATE PROCEDURE count_players_in_team (Team_in String) AS VAR count INTEGER = (SELECT count(Id) FROM Hockey WHERE Team = Team_in); THROW count; END_PROCEDURE;"
  },
  {
    "number": 357,
    "task": "Write a stored procedure to update conferenceID for a specific team in a specific year in teams table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to update conferenceID for a specific team in a specific year in teams table.",
    "input": "CREATE OR REPLACE PROCEDURE update_conferenceID (year_in NUMBER, teamID_in VARCHAR2, conferenceID_in VARCHAR2) IS BEGIN UPDATE teams SET conferenceID = conferenceID_in WHERE year = year_in AND teamID = teamID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE update_conferenceID (year_in Integer, teamID_in varchar(3), conferenceID_in varchar(2)) AS VAR sql_string String = 'UPDATE teams SET conferenceID = ' || conferenceID_in || ' WHERE year = ' || year_in || ' AND teamID = ' || teamID_in; EXECUTE IMMEDIATE sql_string; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 358,
    "task": "Write a stored procedure to delete a record from the players table based on playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to delete a record from the players table based on playerID.",
    "input": "CREATE OR REPLACE PROCEDURE delete_player_by_id (playerID_in VARCHAR2) IS BEGIN DELETE FROM players WHERE playerID = playerID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE delete_player_by_id (playerID_in varchar(10)) AS VAR sql_string String = 'DELETE FROM players WHERE playerID = ' || playerID_in; EXECUTE IMMEDIATE sql_string; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 359,
    "task": "Write a stored procedure to calculate total goals scored by all players in a particular year from the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to calculate total goals scored by all players in a particular year from the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE total_goals_scored (year_in NUMBER) IS total_goals NUMBER; BEGIN SELECT SUM(goals) INTO total_goals FROM scoring WHERE year = year_in; DBMS_OUTPUT.PUT_LINE(total_goals); END;",
    "output": "CREATE PROCEDURE total_goals_scored (year_in Integer) AS VAR total_goals INTEGER = (SELECT SUM(goals) FROM scoring WHERE year = year_in); THROW total_goals; END_PROCEDURE;"
  },
  {
    "number": 360,
    "task": "Write a stored procedure to select height and weight of a player from the players table based on playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to select height and weight of a player from the players table based on playerID.",
    "input": "CREATE OR REPLACE PROCEDURE select_player_height_weight (playerID_in VARCHAR2) IS height_weight VARCHAR2(100); BEGIN SELECT height || ', ' || weight INTO height_weight FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(height_weight); END;",
    "output": "CREATE PROCEDURE select_player_height_weight (playerID_in varchar(10)) AS VAR height_weight INTEGER = (SELECT height, weight FROM players WHERE playerID = playerID_in); THROW height_weight; END_PROCEDURE;"
  },
  {
    "number": 361,
    "task": "Write a stored procedure to update birthYear for a particular player in the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to update birthYear for a particular player in the players table.",
    "input": "CREATE OR REPLACE PROCEDURE update_player_birthYear (playerID_in VARCHAR2, birthYear_in NUMBER) IS BEGIN UPDATE players SET birthYear = birthYear_in WHERE playerID = playerID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE update_player_birthYear (playerID_in varchar(10), birthYear_in Integer) AS VAR sql_string String = 'UPDATE players SET birthYear = ' || birthYear_in || ' WHERE playerID = ' || playerID_in; EXECUTE IMMEDIATE sql_string; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 362,
    "task": "Write a stored procedure to delete a record from the hockey table based on Id.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to delete a record from the hockey table based on Id.",
    "input": "CREATE OR REPLACE PROCEDURE delete_hockey_record (Id_in NUMBER) IS BEGIN DELETE FROM Hockey WHERE Id = Id_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE delete_hockey_record (Id_in BIGINT) AS VAR sql_string String = 'DELETE FROM Hockey WHERE Id = ' || Id_in; EXECUTE IMMEDIATE sql_string; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 363,
    "task": "Write a stored procedure to select all players from the players table who were first associated with NHL in a particular year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to select all players from the players table who were first associated with NHL in a particular year.",
    "input": "CREATE OR REPLACE PROCEDURE select_players_by_firstNHL (firstNHL_in NUMBER) IS TYPE players_table IS TABLE OF VARCHAR2(255); player_ids players_table; BEGIN SELECT playerID BULK COLLECT INTO player_ids FROM players WHERE firstNHL = firstNHL_in; FOR i IN player_ids.FIRST..player_ids.LAST LOOP DBMS_OUTPUT.PUT_LINE(player_ids(i)); END LOOP; END;",
    "output": "CREATE PROCEDURE select_players_by_firstNHL (firstNHL_in Integer) AS VAR player_ids String = (SELECT playerID FROM players WHERE firstNHL = firstNHL_in); THROW player_ids; END_PROCEDURE;"
  },
  {
    "number": 364,
    "task": "Create a stored procedure to return a player's First and Last names based on a provided player_id",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return a player's First and Last names based on a provided player_id",
    "input": "CREATE OR REPLACE PROCEDURE GetPlayerName(playerID_in VARCHAR2) IS firstName players.firstName%TYPE; lastName players.lastName%TYPE; BEGIN SELECT firstName, lastName INTO firstName, lastName FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Player First Name: ' || firstName || ' Last Name: ' || lastName); END;",
    "output": "CREATE PROCEDURE GetPlayerName(IN playerID_in String) AS VAR firstName String, lastName String; firstName, lastName = (SELECT firstName, lastName FROM players WHERE playerID = playerID_in); THROW 'Player First Name: ' || firstName || ' Last Name: ' || lastName; END_PROCEDURE;"
  },
  {
    "number": 365,
    "task": "Create a stored procedure to calculate a player's NHL career length given a player_id",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to calculate a player's NHL career length given a player_id",
    "input": "CREATE OR REPLACE PROCEDURE CalculateNHLCareerLength(playerID_in VARCHAR2) IS careerLength NUMBER; BEGIN SELECT (lastNHL - firstNHL) INTO careerLength FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Player NHL career length is: ' || careerLength); END;",
    "output": "CREATE PROCEDURE CalculateNHLCareerLength(IN playerID_in String) AS VAR careerLength Integer; careerLength = (SELECT (lastNHL - firstNHL) FROM players WHERE playerID = playerID_in); THROW 'Player NHL career length is: ' || careerLength; END_PROCEDURE;"
  },
  {
    "number": 366,
    "task": "Create a stored procedure to get a team's rank given year and teamID",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get a team's rank given year and teamID",
    "input": "CREATE OR REPLACE PROCEDURE GetTeamRank(year_in NUMBER, teamID_in VARCHAR2) IS rank teams.rank%TYPE; BEGIN SELECT rank INTO rank FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Team rank is: ' || rank); END;",
    "output": "CREATE PROCEDURE GetTeamRank(IN year_in Integer, IN teamID_in String) AS VAR rank Integer; rank = (SELECT rank FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'Team rank is: ' || rank; END_PROCEDURE;"
  },
  {
    "number": 367,
    "task": "Create a stored procedure to get count of players by position",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get count of players by position",
    "input": "CREATE OR REPLACE PROCEDURE CountPlayersByPosition IS TYPE position_count_table IS TABLE OF NUMBER INDEX BY VARCHAR2(255); position_counts position_count_table; position players.position%TYPE; position_count NUMBER; BEGIN FOR position_rec IN (SELECT position, COUNT(position) as count FROM players GROUP BY position) LOOP DBMS_OUTPUT.PUT_LINE(position_rec.position || ': ' || position_rec.count); END LOOP; END;",
    "output": "CREATE PROCEDURE CountPlayersByPosition() AS EXECUTE IMMEDIATE 'SELECT position, COUNT(position) FROM players GROUP BY position'; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 368,
    "task": "Create a stored procedure to get hockey player's team given the player's name",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get hockey player's team given the player's name",
    "input": "CREATE OR REPLACE PROCEDURE GetPlayerTeam(name_in VARCHAR2) IS team Hockey.Team%TYPE; BEGIN SELECT Team INTO team FROM Hockey WHERE Name = name_in; DBMS_OUTPUT.PUT_LINE('Player team is: ' || team); END;",
    "output": "CREATE PROCEDURE GetPlayerTeam(IN name_in String) AS VAR team String; team = (SELECT Team FROM Hockey WHERE Name = name_in); THROW 'Player team is: ' || team; END_PROCEDURE;"
  },
  {
    "number": 369,
    "task": "Create a stored procedure to find the total goals scored by a player in a certain year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the total goals scored by a player in a certain year",
    "input": "CREATE OR REPLACE PROCEDURE TotalGoalByPlayerYear(playerID_in VARCHAR2, year_in NUMBER) IS totalGoals scoring.goals%TYPE; BEGIN SELECT goals INTO totalGoals FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total goals scored by the player in the year is: ' || totalGoals); END;",
    "output": "CREATE PROCEDURE TotalGoalByPlayerYear(IN playerID_in String, IN year_in Integer) AS VAR totalGoals Integer; totalGoals = (SELECT goals FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total goals scored by the player in the year is: ' || totalGoals; END_PROCEDURE;"
  },
  {
    "number": 370,
    "task": "Create a stored procedure to find the first year a player had played in NHL given the player_id",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the first year a player had played in NHL given the player_id",
    "input": "CREATE OR REPLACE PROCEDURE GetFirstYearInNHL(playerID_in VARCHAR2) IS firstYearInNHL players.firstNHL%TYPE; BEGIN SELECT firstNHL INTO firstYearInNHL FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Player first year in NHL is: ' || firstYearInNHL); END;",
    "output": "CREATE PROCEDURE GetFirstYearInNHL(IN playerID_in String) AS VAR firstYearInNHL Integer; firstYearInNHL = (SELECT firstNHL FROM players WHERE playerID = playerID_in); THROW 'Player first year in NHL is: ' || firstYearInNHL; END_PROCEDURE;"
  },
  {
    "number": 371,
    "task": "Create a stored procedure to count total number of teams in a given year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to count total number of teams in a given year",
    "input": "CREATE OR REPLACE PROCEDURE CountTeamsInYear(year_in NUMBER) IS teamCount NUMBER; BEGIN SELECT COUNT(teamID) INTO teamCount FROM teams WHERE year = year_in; DBMS_OUTPUT.PUT_LINE('Total teams in given year: ' || teamCount); END;",
    "output": "CREATE PROCEDURE CountTeamsInYear(IN year_in Integer) AS VAR teamCount Integer; teamCount = (SELECT COUNT(teamID) FROM teams WHERE year = year_in); THROW 'Total teams in given year: ' || teamCount; END_PROCEDURE;"
  },
  {
    "number": 372,
    "task": "Create a stored procedure to get the longest serving player in NHL",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the longest serving player in NHL",
    "input": "CREATE OR REPLACE PROCEDURE GetLongestServingPlayer IS playerID players.playerID%TYPE; BEGIN SELECT playerID INTO playerID FROM players WHERE (lastNHL - firstNHL) = (SELECT MAX(lastNHL - firstNHL) FROM players); DBMS_OUTPUT.PUT_LINE('Longest serving player ID: ' || playerID); END;",
    "output": "CREATE PROCEDURE GetLongestServingPlayer() AS VAR playerID String; playerID = (SELECT playerID FROM players ORDER BY (lastNHL - firstNHL) DESC LIMIT 1); THROW 'Longest serving player ID: ' || playerID; END_PROCEDURE;"
  },
  {
    "number": 373,
    "task": "Create a stored procedure to return the total number of penalty minutes that a player incurred during a certain year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return the total number of penalty minutes that a player incurred during a certain year",
    "input": "CREATE OR REPLACE PROCEDURE TotalPenaltyTime(playerID_in VARCHAR2, year_in NUMBER) IS totalPenaltyMinutes scoring.penaltyMinutes%TYPE; BEGIN SELECT penaltyMinutes INTO totalPenaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total penalty minutes of the player in the year is: ' || totalPenaltyMinutes); END;",
    "output": "CREATE PROCEDURE TotalPenaltyTime(IN playerID_in String, IN year_in Integer) AS VAR totalPenaltyMinutes Integer; totalPenaltyMinutes = (SELECT penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total penalty minutes of the player in the year is: ' || totalPenaltyMinutes; END_PROCEDURE;"
  },
  {
    "number": 374,
    "task": "Create a stored procedure to get the total number of overtime losses of teams in a given year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the total number of overtime losses of teams in a given year",
    "input": "CREATE OR REPLACE PROCEDURE TotalOvertimeLosses(year_in IN NUMBER, overtimeLosses OUT NUMBER) IS BEGIN SELECT SUM(overtimeLosses) INTO overtimeLosses FROM teams WHERE year = year_in; END;",
    "output": "CREATE PROCEDURE TotalOvertimeLosses(IN year_in Integer) AS VAR overtimeLosses Integer; overtimeLosses = (SELECT SUM(overtimeLosses) FROM teams WHERE year = year_in); THROW 'Total overtime losses in given year: ' || overtimeLosses; END_PROCEDURE;"
  },
  {
    "number": 375,
    "task": "Create a stored procedure to insert a new player into the players table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to insert a new player into the players table",
    "input": "CREATE OR REPLACE PROCEDURE InsertNewPlayer(playerID_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2, height_in IN NUMBER, weight_in IN NUMBER, firstNHL_in IN NUMBER, lastNHL_in IN NUMBER, position_in IN VARCHAR2, birthYear_in IN NUMBER, birthMon_in IN NUMBER, birthDay_in IN NUMBER, birthCountry_in IN VARCHAR2, birthState_in IN VARCHAR2, birthCity_in IN VARCHAR2) IS BEGIN INSERT INTO players (playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES (playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); END;",
    "output": "CREATE PROCEDURE InsertNewPlayer(IN playerID_in String, IN firstName_in String, IN lastName_in String, IN height_in Integer, IN weight_in Integer, IN firstNHL_in Integer, IN lastNHL_in Integer, IN position_in String, IN birthYear_in Integer, IN birthMon_in Integer, IN birthDay_in Integer, IN birthCountry_in String, IN birthState_in String, IN birthCity_in String) AS EXECUTE IMMEDIATE 'INSERT INTO players (playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES (' || '\"' || playerID_in || '\"' || firstName_in || '\"' || lastName_in || ',' || height_in || ', ' || weight_in || ', ' || firstNHL_in || ', ' || lastNHL_in || ', \"' || position_in || ',' || birthYear_in || ', ' || birthMon_in || ', ' || birthDay_in || ', \"' || birthCountry_in || '\"' || birthState_in || '\"' || birthCity_in || '\"' || ')'; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 376,
    "task": "Create a stored procedure to update the conferenceID of a team in a certain year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to update the conferenceID of a team in a certain year",
    "input": "CREATE OR REPLACE PROCEDURE UpdateTeamConference(year_in IN NUMBER, teamID_in IN VARCHAR2, conferenceID_in IN VARCHAR2) IS BEGIN UPDATE teams SET conferenceID = conferenceID_in WHERE year = year_in AND teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE UpdateTeamConference(IN year_in Integer, IN teamID_in String, IN conferenceID_in String) AS EXECUTE IMMEDIATE 'UPDATE teams SET conferenceID =' || '\"' || conferenceID_in || '\"' || ' WHERE year =' || year_in || ' AND teamID =' || '\"' || teamID_in || '\"'; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 377,
    "task": "Create a stored procedure to get a list of playerIDs that played in a certain position",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get a list of playerIDs that played in a certain position",
    "input": "CREATE OR REPLACE PROCEDURE GetPlayerIDsByPosition(position_in IN VARCHAR2, playerIDs OUT SYS_REFCURSOR) IS BEGIN OPEN playerIDs FOR SELECT playerID FROM players WHERE position = position_in; END;",
    "output": "CREATE PROCEDURE GetPlayerIDsByPosition(IN position_in String) AS EXECUTE IMMEDIATE 'SELECT playerID FROM players WHERE position =' || '\"' || position_in || '\"'; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 378,
    "task": "How can one create a procedure in NuoDB SQL to return the first and last name, height, weight and position of a player given its playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can one create a procedure in NuoDB SQL to return the first and last name, height, weight and position of a player given its playerID?",
    "input": "CREATE OR REPLACE PROCEDURE getDetailedPlayerInfo(playerID_in IN VARCHAR2, playerDetails OUT SYS_REFCURSOR) IS BEGIN OPEN playerDetails FOR SELECT firstName, lastName, height, weight, position FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE getDetailedPlayerInfo(IN playerID_in String) AS VAR firstName String, lastName String, playerHeight Integer, playerWeight Integer, playerPosition String; firstName, lastName, playerHeight, playerWeight, playerPosition = (SELECT firstName, lastName, height, weight, position FROM players WHERE playerID = playerID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 379,
    "task": "Write a NuoDB SQL procedure to fetch the number of goals and assists scored by a player in a specific year, given the playerID and year as input",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL procedure to fetch the number of goals and assists scored by a player in a specific year, given the playerID and year as input",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerStats(playerID_in IN VARCHAR2, year_in IN NUMBER, playerStats OUT SYS_REFCURSOR) IS BEGIN OPEN playerStats FOR SELECT goals, assists FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE getPlayerStats(IN playerID_in String, IN year_in INTEGER) AS VAR goals Integer, assists Integer; goals, assists = (SELECT goals, assists FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 380,
    "task": "Write a stored procedure in NuoDB SQL to insert a new player into the 'players' table. The procedure should take all the necessary fields as input.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL to insert a new player into the 'players' table. The procedure should take all the necessary fields as input.",
    "input": "CREATE OR REPLACE PROCEDURE addPlayer(playerID_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2, height_in IN NUMBER, weight_in IN NUMBER, firstNHL_in IN NUMBER, lastNHL_in IN NUMBER, position_in IN VARCHAR2, birthYear_in IN NUMBER, birthMon_in IN NUMBER, birthDay_in IN NUMBER, birthCountry_in IN VARCHAR2, birthState_in IN VARCHAR2, birthCity_in IN VARCHAR2) AS BEGIN INSERT INTO players VALUES(playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); END; ",
    "output": "CREATE PROCEDURE addPlayer(IN playerID_in String, IN firstName_in String, IN lastName_in String, IN height_in INTEGER, IN weight_in INTEGER, IN firstNHL_in INTEGER, IN lastNHL_in INTEGER, IN position_in String, IN birthYear_in INTEGER, IN birthMon_in INTEGER, IN birthDay_in INTEGER, IN birthCountry_in String, IN birthState_in String, IN birthCity_in String) AS INSERT INTO players VALUES(playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 381,
    "task": "How can one create a NuoDB SQL stored procedure to increase the number of goals of a player in a specific year by a certain amount?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can one create a NuoDB SQL stored procedure to increase the number of goals of a player in a specific year by a certain amount?",
    "input": "CREATE OR REPLACE PROCEDURE increaseGoals(playerID_in IN VARCHAR2, year_in IN NUMBER, goals_in IN NUMBER) AS BEGIN UPDATE scoring SET goals = goals + goals_in WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE increaseGoals(IN playerID_in String, IN year_in INTEGER, IN goals_in INTEGER) AS UPDATE scoring SET goals = goals + goals_in WHERE playerID = playerID_in AND year = year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 382,
    "task": "Write a NuoDB SQL stored procedure that decrements the rank of a team in a specific year by 1",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL stored procedure that decrements the rank of a team in a specific year by 1",
    "input": "CREATE OR REPLACE PROCEDURE decrementTeamRank(teamID_in IN VARCHAR2, year_in IN NUMBER) AS BEGIN UPDATE teams SET rank = rank - 1 WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE decrementTeamRank(IN teamID_in String, IN year_in INTEGER) AS UPDATE teams SET rank = rank - 1 WHERE teamID = teamID_in AND year = year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 383,
    "task": "How can one create a stored procedure in NuoDB SQL to return the number of players for a team in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can one create a stored procedure in NuoDB SQL to return the number of players for a team in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE countTeamPlayers(teamID_in IN VARCHAR2, year_in IN NUMBER, count OUT NUMBER) AS BEGIN SELECT COUNT(*) INTO count FROM scoring WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE countTeamPlayers(IN teamID_in String, IN year_in INTEGER) AS VAR count INTEGER; count = (SELECT COUNT(*) FROM scoring WHERE teamID = teamID_in AND year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 384,
    "task": "Write a stored procedure in NuoDB SQL to delete all records of a team from the 'teams' table for a specific year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL to delete all records of a team from the 'teams' table for a specific year",
    "input": "CREATE OR REPLACE PROCEDURE deleteTeam(teamID_in IN VARCHAR2, year_in IN NUMBER) AS BEGIN DELETE FROM teams WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE deleteTeam(IN teamID_in String, IN year_in INTEGER) AS DELETE FROM teams WHERE teamID = teamID_in AND year = year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 385,
    "task": "Write a NuoDB SQL procedure that adds a new team to the 'teams' table. The procedure should take all the necessary fields as input.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL procedure that adds a new team to the 'teams' table. The procedure should take all the necessary fields as input.",
    "input": "CREATE OR REPLACE PROCEDURE addTeam(year_in IN NUMBER, teamID_in IN VARCHAR2, name_in IN VARCHAR2, conferenceID_in IN VARCHAR2, divisionID_in IN VARCHAR2, rank_in IN NUMBER, playoff_in IN VARCHAR2, games_in IN NUMBER, wins_in IN NUMBER, losses_in IN NUMBER, ties_in IN NUMBER, overtimeLosses_in IN NUMBER) AS BEGIN INSERT INTO teams VALUES(year_in, teamID_in, name_in, conferenceID_in, divisionID_in, rank_in, playoff_in, games_in, wins_in, losses_in, ties_in, overtimeLosses_in); END;",
    "output": "CREATE PROCEDURE addTeam(IN year_in INTEGER, IN teamID_in String, IN name_in String, IN conferenceID_in String, IN divisionID_in String, IN rank_in INTEGER, IN playoff_in String, IN games_in INTEGER, IN wins_in INTEGER, IN losses_in INTEGER, IN ties_in INTEGER, IN overtimeLosses_in INTEGER) AS INSERT INTO teams VALUES(year_in, teamID_in, name_in, conferenceID_in, divisionID_in, rank_in, playoff_in, games_in, wins_in, losses_in, ties_in, overtimeLosses_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 386,
    "task": "How can we create a NuoDB SQL stored procedure to find the average weight of players for a given team in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can we create a NuoDB SQL stored procedure to find the average weight of players for a given team in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE avgTeamWeight(teamID_in IN VARCHAR2, year_in IN NUMBER, avgWeight OUT NUMBER) AS BEGIN SELECT AVG(weight) INTO avgWeight FROM players p INNER JOIN scoring s ON p.playerID = s.playerID WHERE s.teamID = teamID_in AND s.year = year_in; END;",
    "output": "CREATE PROCEDURE avgTeamWeight(IN teamID_in String, IN year_in INTEGER) AS VAR avgWeight DOUBLE; avgWeight = (SELECT AVG(weight) FROM players p INNER JOIN scoring s ON p.playerID = s.playerID WHERE s.teamID = teamID_in AND s.year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 387,
    "task": "Create a stored procedure in NuoDB SQL to increase the number of penalty minutes for a player in a specific year by a certain amount",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure in NuoDB SQL to increase the number of penalty minutes for a player in a specific year by a certain amount",
    "input": "CREATE OR REPLACE PROCEDURE increasePenaltyMinutes(playerID_in IN VARCHAR2, year_in IN NUMBER, minutes_in IN NUMBER) AS BEGIN UPDATE scoring SET penaltyMinutes = penaltyMinutes + minutes_in WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE increasePenaltyMinutes(IN playerID_in String, IN year_in INTEGER, IN minutes_in INTEGER) AS UPDATE scoring SET penaltyMinutes = penaltyMinutes + minutes_in WHERE playerID = playerID_in AND year = year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 388,
    "task": "Write a NuoDB SQL procedure to change the team a player is associated with in a given year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL procedure to change the team a player is associated with in a given year",
    "input": "CREATE OR REPLACE PROCEDURE changePlayerTeam(playerID_in IN VARCHAR2, year_in IN NUMBER, newTeam_in IN VARCHAR2) AS BEGIN UPDATE scoring SET teamID = newTeam_in WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE changePlayerTeam(IN playerID_in String, IN year_in INTEGER, IN newTeam_in String) AS UPDATE scoring SET teamID = newTeam_in WHERE playerID = playerID_in AND year = year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 389,
    "task": "How can one create a procedure in NuoDB SQL to replace null values in the 'overtimeLosses' column in the 'teams' table with a default value?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can one create a procedure in NuoDB SQL to replace null values in the 'overtimeLosses' column in the 'teams' table with a default value?",
    "input": "CREATE OR REPLACE PROCEDURE replaceNullOvertimeLosses(defaultValue_in IN NUMBER) AS BEGIN UPDATE teams SET overtimeLosses = defaultValue_in WHERE overtimeLosses IS NULL; END;",
    "output": "CREATE PROCEDURE replaceNullOvertimeLosses(IN defaultValue_in INTEGER) AS UPDATE teams SET overtimeLosses = defaultValue_in WHERE overtimeLosses IS NULL; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 390,
    "task": "Create a stored procedure in NuoDB SQL to return the number of overtime losses for a team in a specific year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure in NuoDB SQL to return the number of overtime losses for a team in a specific year",
    "input": "CREATE OR REPLACE PROCEDURE countTeamOvertimeLosses(teamID_in IN VARCHAR2, year_in IN NUMBER, count_out OUT NUMBER) AS BEGIN SELECT overtimeLosses INTO count_out FROM teams WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE countTeamOvertimeLosses(IN teamID_in String, IN year_in INTEGER) AS VAR count INTEGER; count = (SELECT overtimeLosses FROM teams WHERE teamID = teamID_in AND year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 391,
    "task": "How can we create a NuoDB SQL stored procedure to get the total number of games played by a player in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can we create a NuoDB SQL stored procedure to get the total number of games played by a player in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerGamesPlayed(playerID_in IN VARCHAR2, year_in IN NUMBER, gamesPlayed_out OUT NUMBER) AS BEGIN SELECT gamesPlayed INTO gamesPlayed_out FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE getPlayerGamesPlayed(IN playerID_in String, IN year_in INTEGER) AS VAR gamesPlayed INTEGER; gamesPlayed = (SELECT gamesPlayed FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 392,
    "task": "How to create stored procedure to fetch all players of a given team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create stored procedure to fetch all players of a given team?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayersByTeam(team_in IN VARCHAR2, players_result_out OUT SYS_REFCURSOR) AS BEGIN OPEN players_result_out FOR SELECT playerID FROM players WHERE team = team_in; END;",
    "output": "CREATE PROCEDURE getPlayersByTeam(IN team_in STRING) AS VAR players_result STRING = (select playerID from players where team = team_in); THROW players_result; END_PROCEDURE;"
  },
  {
    "number": 393,
    "task": "How to create a stored procedure to find the team a player belongs to given their ID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to find the team a player belongs to given their ID?",
    "input": "CREATE OR REPLACE PROCEDURE findPlayerTeam(playerID_in IN VARCHAR2, team_result_out OUT VARCHAR2) AS BEGIN SELECT teamID INTO team_result_out FROM scoring WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE findPlayerTeam(IN playerID_in STRING) AS VAR team_result STRING = (SELECT teamID FROM scoring WHERE playerID = playerID_in); THROW team_result; END_PROCEDURE;"
  },
  {
    "number": 394,
    "task": "How to create a stored procedure to find the total games played by a team in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to find the total games played by a team in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE findTotalGamesPlayedByTeam(teamID_in IN VARCHAR2, year_in IN NUMBER, total_games_out OUT NUMBER) AS BEGIN SELECT games INTO total_games_out FROM teams WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE findTotalGamesPlayedByTeam(IN teamID_in STRING, IN year_in INTEGER) AS VAR total_games INTEGER = (SELECT games FROM teams WHERE teamID = teamID_in AND year = year_in); THROW total_games; END_PROCEDURE;"
  },
  {
    "number": 395,
    "task": "How to create a stored procedure to find the player with the highest number of goals in a given year and team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to find the player with the highest number of goals in a given year and team?",
    "input": "CREATE OR REPLACE PROCEDURE findTopGoalPlayer(teamID_in IN VARCHAR2, year_in IN NUMBER, top_goal_player_out OUT VARCHAR2) AS BEGIN SELECT playerID INTO top_goal_player_out FROM (SELECT playerID FROM scoring WHERE teamID = teamID_in AND year = year_in ORDER BY goals DESC) WHERE ROWNUM <= 1; END;",
    "output": "CREATE PROCEDURE findTopGoalPlayer(IN teamID_in STRING, IN year_in INTEGER) AS VAR top_goal_player STRING = (SELECT playerID FROM scoring WHERE teamID = teamID_in AND year = year_in ORDER BY goals DESC LIMIT 1); THROW top_goal_player; END_PROCEDURE;"
  },
  {
    "number": 396,
    "task": "How to create a stored procedure to find the position of a given player?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to find the position of a given player?",
    "input": "CREATE OR REPLACE PROCEDURE findPlayerPosition(playerID_in IN VARCHAR2, player_position_out OUT VARCHAR2) AS BEGIN SELECT position INTO player_position_out FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE findPlayerPosition(IN playerID_in STRING) AS VAR player_position STRING = (SELECT position FROM players WHERE playerID = playerID_in); THROW player_position; END_PROCEDURE;"
  },
  {
    "number": 397,
    "task": "How to create a stored procedure to get the number of wins by a team in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to get the number of wins by a team in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamWinsByYear(teamID_in IN VARCHAR2, year_in IN NUMBER, team_wins_out OUT NUMBER) AS BEGIN SELECT wins INTO team_wins_out FROM teams WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE getTeamWinsByYear(IN teamID_in STRING, IN year_in INTEGER) AS VAR team_wins INTEGER = (SELECT wins FROM teams WHERE teamID = teamID_in AND year = year_in); THROW team_wins; END_PROCEDURE;"
  },
  {
    "number": 398,
    "task": "How to create a stored procedure to get the total number of players in a team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to get the total number of players in a team?",
    "input": "CREATE OR REPLACE PROCEDURE getTotalPlayersInTeam(teamID_in IN VARCHAR2, total_players_out OUT NUMBER) AS BEGIN SELECT COUNT(DISTINCT playerID) INTO total_players_out FROM scoring WHERE teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE getTotalPlayersInTeam(IN teamID_in STRING) AS VAR total_players INTEGER = (SELECT COUNT(DISTINCT playerID) FROM scoring WHERE teamID = teamID_in); THROW total_players; END_PROCEDURE;"
  },
  {
    "number": 399,
    "task": "How to create a stored procedure to get the average weight of the players in a team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to get the average weight of the players in a team?",
    "input": "CREATE OR REPLACE PROCEDURE getAveragePlayerWeightInTeam(teamID_in IN VARCHAR2, avg_weight_out OUT NUMBER) AS BEGIN SELECT AVG(weight) INTO avg_weight_out FROM players WHERE playerID IN (SELECT DISTINCT playerID FROM scoring WHERE teamID = teamID_in); END;",
    "output": "CREATE PROCEDURE getAveragePlayerWeightInTeam(IN teamID_in STRING) AS VAR avg_weight DECIMAL = (SELECT AVG(weight) FROM players WHERE playerID IN (SELECT DISTINCT playerID FROM scoring WHERE teamID = teamID_in)); THROW avg_weight; END_PROCEDURE;"
  },
  {
    "number": 400,
    "task": "Create a stored procedure to return the player who has the highest number of assists in a year based on input team id",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return the player who has the highest number of assists in a year based on input team id",
    "input": "CREATE OR REPLACE PROCEDURE topAssistPlayerByTeam(teamID_in IN VARCHAR2, year_in IN NUMBER, top_assist_player_out OUT VARCHAR2) AS BEGIN SELECT playerID INTO top_assist_player_out FROM (SELECT playerID FROM scoring WHERE teamID = teamID_in AND year = year_in ORDER BY assists DESC) WHERE ROWNUM <= 1; END;",
    "output": "CREATE PROCEDURE topAssistPlayerByTeam(IN teamID_in STRING, IN year_in INTEGER ) AS VAR top_assist_player STRING = (SELECT playerID FROM scoring WHERE teamID = teamID_in AND year = year_in ORDER BY assists DESC LIMIT 1); THROW top_assist_player; END_PROCEDURE;"
  },
  {
    "number": 401,
    "task": "Create a stored procedure to determine the average number of games played by players in a team in a particular year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to determine the average number of games played by players in a team in a particular year",
    "input": "CREATE OR REPLACE PROCEDURE getAvgGamesPlayed(teamID_in IN VARCHAR2, year_in IN NUMBER) AS avg_games NUMBER; BEGIN SELECT AVG(gamesPlayed) INTO avg_games FROM scoring WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(avg_games); END;",
    "output": "CREATE PROCEDURE getAvgGamesPlayed(IN teamID_in STRING, IN year_in INTEGER) AS VAR avg_games DECIMAL = (SELECT AVG(gamesPlayed) FROM scoring WHERE teamID = teamID_in AND year = year_in); THROW avg_games; END_PROCEDURE;"
  },
  {
    "number": 402,
    "task": "Create a stored procedure to return the highest number of wins by a team in a year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return the highest number of wins by a team in a year",
    "input": "CREATE OR REPLACE PROCEDURE topWinningTeam(year_in IN NUMBER) AS top_winning_team VARCHAR2(3); BEGIN SELECT teamID INTO top_winning_team FROM (SELECT teamID FROM teams WHERE year = year_in ORDER BY wins DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE(top_winning_team); END;",
    "output": "CREATE PROCEDURE topWinningTeam(IN year_in INTEGER) AS VAR top_winning_team STRING = (SELECT teamID FROM teams WHERE year = year_in ORDER BY wins DESC LIMIT 1); THROW top_winning_team; END_PROCEDURE;"
  },
  {
    "number": 403,
    "task": "Create a stored procedure to return the total number of goals scored by a team in a given year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return the total number of goals scored by a team in a given year",
    "input": "CREATE OR REPLACE PROCEDURE getTotalGoalsByTeam(teamID_in IN VARCHAR2, year_in IN NUMBER) AS total_goals NUMBER; BEGIN SELECT SUM(goals) INTO total_goals FROM scoring WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(total_goals); END;",
    "output": "CREATE PROCEDURE getTotalGoalsByTeam(IN teamID_in STRING, IN year_in INTEGER) AS VAR total_goals INTEGER = (SELECT SUM(goals) FROM scoring WHERE teamID = teamID_in AND year = year_in); THROW total_goals; END_PROCEDURE;"
  },
  {
    "number": 404,
    "task": "Create a stored procedure to return the average height of players in a team",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return the average height of players in a team",
    "input": "CREATE OR REPLACE PROCEDURE getAveragePlayerHeightInTeam(teamID_in IN VARCHAR2) AS avg_height NUMBER; BEGIN SELECT AVG(height) INTO avg_height FROM players WHERE playerID IN (SELECT DISTINCT playerID FROM scoring WHERE teamID = teamID_in); DBMS_OUTPUT.PUT_LINE(avg_height); END;",
    "output": "CREATE PROCEDURE getAveragePlayerHeightInTeam(IN teamID_in STRING) AS VAR avg_height DECIMAL = (SELECT AVG(height) FROM players WHERE playerID IN (SELECT DISTINCT playerID FROM scoring WHERE teamID = teamID_in)); THROW avg_height; END_PROCEDURE;"
  },
  {
    "number": 405,
    "task": "How to create a stored procedure to get the team that has played the most games?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to get the team that has played the most games?",
    "input": "CREATE OR REPLACE PROCEDURE getMostPlayedTeam AS most_played_team VARCHAR2(3); BEGIN SELECT teamID INTO most_played_team FROM (SELECT teamID FROM teams ORDER BY games DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE(most_played_team); END;",
    "output": "CREATE PROCEDURE getMostPlayedTeam AS VAR most_played_team STRING = (SELECT teamID FROM teams ORDER BY games DESC LIMIT 1); THROW most_played_team; END_PROCEDURE;"
  },
  {
    "number": 406,
    "task": "How to create a procedure to check if a player has ever played for a specific team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a procedure to check if a player has ever played for a specific team?",
    "input": "CREATE OR REPLACE PROCEDURE hasPlayedForTeam(player_id_in IN VARCHAR2, team_id_in IN VARCHAR2) AS result NUMBER; BEGIN SELECT COUNT(*) INTO result FROM scoring WHERE playerID = player_id_in AND teamID = team_id_in; IF result > 0 THEN DBMS_OUTPUT.PUT_LINE('True'); ELSE DBMS_OUTPUT.PUT_LINE('False'); END IF; END;",
    "output": "CREATE PROCEDURE hasPlayedForTeam(IN player_id_in STRING, IN team_id_in STRING) AS VAR result BOOLEAN = (SELECT COUNT(*) > 0 FROM scoring WHERE playerID = player_id_in AND teamID = team_id_in); THROW result; END_PROCEDURE"
  },
  {
    "number": 407,
    "task": "How to get the total games played by a team in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the total games played by a team in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE totalGames(year_in IN NUMBER, team_id_in IN VARCHAR2) AS total_games NUMBER; BEGIN SELECT games INTO total_games FROM teams WHERE year = year_in AND teamID = team_id_in; DBMS_OUTPUT.PUT_LINE(total_games); END;",
    "output": "CREATE PROCEDURE totalGames(IN year_in INTEGER, IN team_id_in STRING) AS VAR total_games INTEGER = (SELECT games FROM teams WHERE year = year_in AND teamID = team_id_in); THROW total_games; END_PROCEDURE"
  },
  {
    "number": 408,
    "task": "How to get total penalty minutes of a player?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get total penalty minutes of a player?",
    "input": "CREATE OR REPLACE PROCEDURE totalPenaltyMinutes(player_id_in IN VARCHAR2) AS total_minutes NUMBER; BEGIN SELECT SUM(penaltyMinutes) INTO total_minutes FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE(total_minutes); END;",
    "output": "CREATE PROCEDURE totalPenaltyMinutes(IN player_id_in STRING) AS VAR total_minutes INTEGER = (SELECT SUM(penaltyMinutes) FROM scoring WHERE playerID = player_id_in); THROW total_minutes; END_PROCEDURE"
  },
  {
    "number": 409,
    "task": "How to get the latest year a player was active?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the latest year a player was active?",
    "input": "CREATE OR REPLACE PROCEDURE lastActiveYear(player_id_in IN VARCHAR2) AS last_year NUMBER; BEGIN SELECT MAX(year) INTO last_year FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE(last_year); END;",
    "output": "CREATE PROCEDURE lastActiveYear(IN player_id_in STRING) AS VAR last_year INTEGER = (SELECT MAX(year) FROM scoring WHERE playerID = player_id_in); THROW last_year; END_PROCEDURE"
  },
  {
    "number": 410,
    "task": "How to get the number of teams a player has played for?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the number of teams a player has played for?",
    "input": "CREATE OR REPLACE PROCEDURE teamsPlayedFor(player_id_in IN VARCHAR2) AS team_count NUMBER; BEGIN SELECT COUNT(DISTINCT teamID) INTO team_count FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE(team_count); END;",
    "output": "CREATE PROCEDURE teamsPlayedFor(IN player_id_in STRING) AS VAR team_count INTEGER = (SELECT COUNT(DISTINCT teamID) FROM scoring WHERE playerID = player_id_in); THROW team_count; END_PROCEDURE"
  },
  {
    "number": 411,
    "task": "How to get the first year a player was in NHL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the first year a player was in NHL?",
    "input": "CREATE OR REPLACE PROCEDURE firstYearInNHL(player_id_in IN VARCHAR2) AS first_year NUMBER; BEGIN SELECT MIN(year) INTO first_year FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE(first_year); END;",
    "output": "CREATE PROCEDURE firstYearInNHL(IN player_id_in STRING) AS VAR first_year INTEGER = (SELECT MIN(year) FROM scoring WHERE playerID = player_id_in); THROW first_year; END_PROCEDURE"
  },
  {
    "number": 412,
    "task": "How to get the number of players in a specific position?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the number of players in a specific position?",
    "input": "CREATE OR REPLACE PROCEDURE countPlayersInPosition(position_in IN VARCHAR2) AS count NUMBER; BEGIN SELECT COUNT(*) INTO count FROM players WHERE position = position_in; DBMS_OUTPUT.PUT_LINE(count); END;",
    "output": "CREATE PROCEDURE countPlayersInPosition(IN position_in STRING) AS VAR count INTEGER = (SELECT COUNT(*) FROM players WHERE position = position_in); THROW count; END_PROCEDURE"
  },
  {
    "number": 413,
    "task": "How to check if a player was active in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to check if a player was active in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE isActive(year_in IN NUMBER, player_id_in IN VARCHAR2) AS result NUMBER; BEGIN SELECT COUNT(*) INTO result FROM scoring WHERE year = year_in AND playerID = player_id_in; IF result > 0 THEN DBMS_OUTPUT.PUT_LINE('True'); ELSE DBMS_OUTPUT.PUT_LINE('False'); END IF; END;",
    "output": "CREATE PROCEDURE isActive(IN year_in INTEGER, IN player_id_in STRING) AS VAR result BOOLEAN = (SELECT COUNT(*) > 0 FROM scoring WHERE year = year_in AND playerID = player_id_in); THROW result; END_PROCEDURE"
  },
  {
    "number": 414,
    "task": "How to get the average goals scored by a team in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the average goals scored by a team in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE avgGoals(team_id_in IN VARCHAR2, year_in IN NUMBER) AS avg_goals NUMBER; BEGIN SELECT AVG(goals) INTO avg_goals FROM scoring WHERE teamID = team_id_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(avg_goals); END;",
    "output": "CREATE PROCEDURE avgGoals(IN team_id_in STRING, IN year_in INTEGER) AS VAR avg_goals DOUBLE = (SELECT AVG(goals) FROM scoring WHERE teamID = team_id_in AND year = year_in); THROW avg_goals; END_PROCEDURE"
  },
  {
    "number": 415,
    "task": "How to get the total games lost by a team in a specific season?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the total games lost by a team in a specific season?",
    "input": "CREATE OR REPLACE PROCEDURE totalLosses(year_in IN NUMBER, team_id_in IN VARCHAR2) AS total_losses NUMBER; BEGIN SELECT losses INTO total_losses FROM teams WHERE year = year_in AND teamID = team_id_in; DBMS_OUTPUT.PUT_LINE(total_losses); END;",
    "output": "CREATE PROCEDURE totalLosses(IN year_in INTEGER, IN team_id_in STRING) AS VAR total_losses INTEGER = (SELECT losses FROM teams WHERE year = year_in AND teamID = team_id_in); THROW total_losses; END_PROCEDURE"
  },
  {
    "number": 416,
    "task": "How to get the height of a player?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the height of a player?",
    "input": "CREATE OR REPLACE PROCEDURE getHeight(player_id_in IN VARCHAR2) AS height NUMBER; BEGIN SELECT height INTO height FROM players WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE(height); END;",
    "output": "CREATE PROCEDURE getHeight(IN player_id_in STRING) AS VAR height INTEGER = (SELECT height FROM players WHERE playerID = player_id_in); THROW height; END_PROCEDURE"
  },
  {
    "number": 417,
    "task": "How to get the most goals scored by a player in a season?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the most goals scored by a player in a season?",
    "input": "CREATE OR REPLACE PROCEDURE mostGoals(player_id_in IN VARCHAR2) AS max_goals NUMBER; BEGIN SELECT MAX(goals) INTO max_goals FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE(max_goals); END;",
    "output": "CREATE PROCEDURE mostGoals(IN player_id_in STRING) AS VAR max_goals INTEGER = (SELECT MAX(goals) FROM scoring WHERE playerID = player_id_in); THROW max_goals; END_PROCEDURE"
  },
  {
    "number": 418,
    "task": "How to get the number of stints a player has had?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the number of stints a player has had?",
    "input": "CREATE OR REPLACE PROCEDURE numOfStints(player_id_in IN VARCHAR2) AS count NUMBER; BEGIN SELECT COUNT(DISTINCT stint) INTO count FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE(count); END;",
    "output": "CREATE PROCEDURE numOfStints(IN player_id_in STRING) AS VAR count INTEGER = (SELECT COUNT(DISTINCT stint) FROM scoring WHERE playerID = player_id_in); THROW count; END_PROCEDURE"
  },
  {
    "number": 419,
    "task": "How to get full name of a player?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get full name of a player?",
    "input": "CREATE OR REPLACE PROCEDURE getFullName(player_id_in IN VARCHAR2) AS full_name VARCHAR2(200); BEGIN SELECT firstName || ' ' || lastName INTO full_name FROM players WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE(full_name); END;",
    "output": "CREATE PROCEDURE getFullName(IN player_id_in STRING) AS VAR full_name STRING = (SELECT CONCAT(firstName, ' ', lastName) FROM players WHERE playerID = player_id_in); THROW full_name; END_PROCEDURE"
  },
  {
    "number": 420,
    "task": "Create a procedure which gets the total games played by a player within a year using player id and year as inputs.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure which gets the total games played by a player within a year using player id and year as inputs.",
    "input": "CREATE OR REPLACE PROCEDURE getTotalGamesPlayed(playerID_in IN VARCHAR2, year_in IN NUMBER) AS totalGamesPlayed NUMBER; BEGIN SELECT gamesPlayed INTO totalGamesPlayed FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total Games Played: ' || totalGamesPlayed); END;",
    "output": "CREATE PROCEDURE getTotalGamesPlayed(IN playerID_in String, IN year_in Integer) AS VAR totalGamesPlayed INTEGER; totalGamesPlayed = (SELECT gamesPlayed FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total Games Played: '|| totalGamesPlayed; END_PROCEDURE;"
  },
  {
    "number": 421,
    "task": "Write a procedure to get the number of players in a team in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to get the number of players in a team in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE getNumPlayersInTeam(teamID_in IN VARCHAR2, year_in IN NUMBER) AS numPlayers NUMBER; BEGIN SELECT COUNT(playerID) INTO numPlayers FROM scoring WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Number of Players: ' || numPlayers); END;",
    "output": "CREATE PROCEDURE getNumPlayersInTeam(IN teamID_in String,IN year_in Integer) AS VAR numPlayers INTEGER; numPlayers = (SELECT COUNT(playerID) FROM scoring WHERE teamID = teamID_in AND year = year_in); THROW 'Number of Players: '|| numPlayers; END_PROCEDURE;"
  },
  {
    "number": 422,
    "task": "Make a stored procedure to get a team's overall performance in a year using teamID and year as inputs.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Make a stored procedure to get a team's overall performance in a year using teamID and year as inputs.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamPerformance(teamID_in IN VARCHAR2, year_in IN NUMBER) AS games NUMBER; wins NUMBER; BEGIN SELECT games, wins INTO games, wins FROM teams WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total games: ' || games || ', Total Wins: ' || wins); END;",
    "output": "CREATE PROCEDURE getTeamPerformance(IN teamID_in String, IN year_in Integer) AS VAR games INTEGER, wins INTEGER; games, wins = (SELECT games, wins FROM teams WHERE teamID = teamID_in AND year = year_in); THROW 'Total games: '|| games || ', Total Wins: ' || wins; END_PROCEDURE;"
  },
  {
    "number": 423,
    "task": "Create a stored procedure to get average player height in a team using teamID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get average player height in a team using teamID.",
    "input": "CREATE OR REPLACE PROCEDURE getAverageHeight(teamID_in IN VARCHAR2) AS avgHeight NUMBER; BEGIN SELECT AVG(height) INTO avgHeight FROM players WHERE playerID IN (SELECT DISTINCT playerID FROM scoring WHERE teamID = teamID_in); DBMS_OUTPUT.PUT_LINE('Average player height: ' || avgHeight); END;",
    "output": "CREATE PROCEDURE getAverageHeight(IN teamID_in String) AS VAR avgHeight FLOAT; avgHeight = (SELECT AVG(height) FROM players WHERE playerID IN (SELECT DISTINCT playerID FROM scoring WHERE teamID = teamID_in)); THROW 'Average player height: '|| avgHeight; END_PROCEDURE;"
  },
  {
    "number": 424,
    "task": "Write a procedure to get total games won by a team till a particular year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to get total games won by a team till a particular year.",
    "input": "CREATE OR REPLACE PROCEDURE getWinsByYear(teamID_in IN VARCHAR2, year_in IN NUMBER) AS totalWins NUMBER; BEGIN SELECT SUM(wins) INTO totalWins FROM teams WHERE teamID = teamID_in AND year <= year_in; DBMS_OUTPUT.PUT_LINE('Total Wins till Year- ' || year_in || ': ' || totalWins); END;",
    "output": "CREATE PROCEDURE getWinsByYear(IN teamID_in String,IN year_in INTEGER) AS VAR totalWins INTEGER; totalWins = (SELECT SUM(wins) FROM teams WHERE teamID = teamID_in AND year <= year_in); THROW 'Total Wins till Year- '|| year_in || ': ' || totalWins; END_PROCEDURE;"
  },
  {
    "number": 425,
    "task": "Create a stored procedure that accurately computes the number of players hailing from a specific country.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that accurately computes the number of players hailing from a specific country.",
    "input": "CREATE OR REPLACE PROCEDURE countPlayersFromCountry(birthCountry_in IN VARCHAR2) AS totalPlayers NUMBER; BEGIN SELECT COUNT(playerID) INTO totalPlayers FROM players WHERE birthCountry = birthCountry_in; DBMS_OUTPUT.PUT_LINE('Total Players from Country: ' || totalPlayers); END;",
    "output": "CREATE PROCEDURE countPlayersFromCountry(IN birthCountry_in String) AS VAR totalPlayers INTEGER; totalPlayers = (SELECT COUNT(playerID) FROM players WHERE birthCountry = birthCountry_in); THROW 'Total Players from Country: '|| totalPlayers; END_PROCEDURE;"
  },
  {
    "number": 426,
    "task": "Write a procedure to calculate the total penalty minutes a team has received in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to calculate the total penalty minutes a team has received in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamPenalties(teamID_in IN VARCHAR2, year_in IN NUMBER) AS totalPenalties NUMBER; BEGIN SELECT SUM(penaltyMinutes) INTO totalPenalties FROM scoring WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total Penalties: ' || totalPenalties); END;",
    "output": "CREATE PROCEDURE getTeamPenalties(IN teamID_in String, IN year_in Integer) AS VAR totalPenalties INTEGER; totalPenalties = (SELECT SUM(penaltyMinutes) FROM scoring WHERE teamID = teamID_in AND year = year_in); THROW 'Total Penalties: ' || totalPenalties; END_PROCEDURE;"
  },
  {
    "number": 427,
    "task": "Make a stored procedure to get the player who has played maximum games in a team using teamID as input.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Make a stored procedure to get the player who has played maximum games in a team using teamID as input.",
    "input": "CREATE OR REPLACE PROCEDURE getMaxGamesPlayer(teamID_in IN VARCHAR2) AS playerName VARCHAR2(200); BEGIN SELECT playerID INTO playerName FROM (SELECT playerID FROM scoring WHERE teamID = teamID_in GROUP BY playerID ORDER BY SUM(gamesPlayed) DESC) WHERE ROWNUM = 1; DBMS_OUTPUT.PUT_LINE('Player with max games: ' || playerName); END;",
    "output": "CREATE PROCEDURE getMaxGamesPlayer(IN teamID_in String) AS VAR playerName String; playerName = (SELECT playerID FROM scoring WHERE teamID = teamID_in GROUP BY playerID ORDER BY SUM(gamesPlayed) DESC LIMIT 1); THROW 'Player with max games: '|| playerName; END_PROCEDURE;"
  },
  {
    "number": 428,
    "task": "Create a procedure that finds the total weight of all players in a team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure that finds the total weight of all players in a team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE totalTeamWeight(teamID_in IN VARCHAR2, year_in IN NUMBER) AS teamWeight NUMBER; BEGIN SELECT SUM(weight) INTO teamWeight FROM players WHERE playerID IN (SELECT DISTINCT playerID FROM scoring WHERE teamID = teamID_in AND year = year_in); DBMS_OUTPUT.PUT_LINE('Total Team Weight: ' || teamWeight); END;",
    "output": "CREATE PROCEDURE totalTeamWeight(IN teamID_in String, IN year_in Integer) AS VAR teamWeigth INTEGER; teamWeigth = (SELECT SUM(weight) FROM players WHERE playerID IN (SELECT DISTINCT playerID FROM scoring WHERE teamID = teamID_in AND year = year_in)); THROW 'Total Team Weight: '|| teamWeigth; END_PROCEDURE;"
  },
  {
    "number": 429,
    "task": "Create a procedure that returns the average number of penalty minutes for a team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure that returns the average number of penalty minutes for a team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE getAveragePenalties(teamID_in IN VARCHAR2, year_in IN NUMBER) AS averagePenalty NUMBER; BEGIN SELECT AVG(penaltyMinutes) INTO averagePenalty FROM scoring WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Avg Penalty Minutes: ' || averagePenalty); END;",
    "output": "CREATE PROCEDURE getAveragePenalties(IN teamID_in String, IN year_in Integer) AS VAR averagePenalty FLOAT ; averagePenalty = (SELECT AVG(penaltyMinutes) FROM scoring WHERE teamID = teamID_in AND year = year_in); THROW 'Avg Penalty Minutes: '|| averagePenalty; END_PROCEDURE;"
  },
  {
    "number": 430,
    "task": "Write a procedure to get the total assists by a player within a year using player id and year as inputs.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to get the total assists by a player within a year using player id and year as inputs.",
    "input": "CREATE OR REPLACE PROCEDURE getTotalAssists(playerID_in IN VARCHAR2, year_in IN NUMBER) AS totalAssists NUMBER; BEGIN SELECT assists INTO totalAssists FROM scoring WHERE year = year_in AND playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Total Assists: ' || totalAssists); END;",
    "output": "CREATE PROCEDURE getTotalAssists(IN playerID_in String, IN year_in Integer) AS VAR totalAssists INTEGER; totalAssists = (SELECT assists FROM scoring WHERE year = year_in AND playerID = playerID_in); THROW 'Total Assists: ' || totalAssists; END_PROCEDURE;"
  },
  {
    "number": 431,
    "task": "Create a stored procedure to get average player weight in a team using teamID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get average player weight in a team using teamID.",
    "input": "CREATE OR REPLACE PROCEDURE getAverageWeight(teamID_in IN VARCHAR2) AS avgWeight NUMBER; BEGIN SELECT AVG(weight) INTO avgWeight FROM players WHERE playerID IN (SELECT DISTINCT playerID FROM scoring WHERE teamID = teamID_in); DBMS_OUTPUT.PUT_LINE('Average player weight: ' || avgWeight); END;",
    "output": "CREATE PROCEDURE getAverageWeight(IN teamID_in String) AS VAR avgWeight FLOAT; avgWeight = (SELECT AVG(weight) FROM players WHERE playerID IN (SELECT DISTINCT playerID FROM scoring WHERE teamID = teamID_in)); THROW 'Average player weight: '|| avgWeight; END_PROCEDURE;"
  },
  {
    "number": 432,
    "task": "Write a procedure to get total stint by a player in a specific year taking player id and year as inputs.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to get total stint by a player in a specific year taking player id and year as inputs.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerStint(playerID_in IN VARCHAR2, year_in IN NUMBER) AS playerStint NUMBER; BEGIN SELECT SUM(stint) INTO playerStint FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total Stint: ' || playerStint); END;",
    "output": "CREATE PROCEDURE getPlayerStint(IN playerID_in String, IN year_in Integer) AS VAR playerStint INTEGER; playerStint = (SELECT SUM(stint) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total Stint: '|| playerStint; END_PROCEDURE;"
  },
  {
    "number": 433,
    "task": "How to create a stored procedure that takes the playerID as input and returns the player's first name and last name?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that takes the playerID as input and returns the player's first name and last name?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_info(playerID_in IN VARCHAR2) AS firstName VARCHAR2(100); lastName VARCHAR2(100); BEGIN SELECT firstName, lastName INTO firstName, lastName FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('First Name: ' || firstName || ', Last Name: ' || lastName); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_info(playerID_in String) AS VAR firstName String, lastName String; firstName, lastName = (SELECT firstName, lastName FROM players WHERE playerID = playerID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 434,
    "task": "How to create a stored procedure that takes teamID as an input and returns the team name?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that takes teamID as an input and returns the team name?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_name (teamID_in IN VARCHAR2) AS team_name VARCHAR2(100); BEGIN SELECT name INTO team_name FROM teams WHERE teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Team Name: ' || team_name); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_team_name(teamID_in String) AS VAR name String; name = (SELECT name FROM teams WHERE teamID = teamID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 435,
    "task": "How to create a stored procedure to insert a player's data into the players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to insert a player's data into the players table?",
    "input": "CREATE OR REPLACE PROCEDURE insert_into_players(playerID_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2, height_in IN NUMBER, weight_in IN NUMBER) AS BEGIN INSERT INTO players(playerID, firstName, lastName, height, weight) VALUES(playerID_in, firstName_in, lastName_in, height_in, weight_in); END;",
    "output": "CREATE OR REPLACE PROCEDURE insert_into_players(playerID_in String, firstName_in String, lastName_in String, height_in integer, weight_in integer) AS INSERT INTO players(playerID, firstName, lastName, height, weight) VALUES(playerID_in, firstName_in, lastName_in, height_in, weight_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 436,
    "task": "How to create a stored procedure that takes playerID as input and deletes the corresponding player's data from the players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that takes playerID as input and deletes the corresponding player's data from the players table?",
    "input": "CREATE OR REPLACE PROCEDURE delete_from_players(playerID_in IN VARCHAR2) AS BEGIN DELETE FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE delete_from_players(playerID_in String) AS DELETE FROM players WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 437,
    "task": "How do you define a procedure that updates the weight of a player given their playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How do you define a procedure that updates the weight of a player given their playerID?",
    "input": "CREATE OR REPLACE PROCEDURE update_weight(playerID_in IN VARCHAR2, weight_in IN NUMBER) AS BEGIN UPDATE players SET weight = weight_in WHERE playerID = playerID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE update_weight(playerID_in String, weight_in integer) AS UPDATE players SET weight = weight_in WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 438,
    "task": "How to create a stored procedure that counts the number of players from a given country?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that counts the number of players from a given country?",
    "input": "CREATE OR REPLACE PROCEDURE count_players_from_country(birthCountry_in IN VARCHAR2) AS player_count NUMBER; BEGIN SELECT COUNT(*) INTO player_count FROM players WHERE birthCountry = birthCountry_in; DBMS_OUTPUT.PUT_LINE('Count: ' || player_count); END;",
    "output": "CREATE OR REPLACE PROCEDURE count_players_from_country(birthCountry_in String) AS VAR count INTEGER; count = (SELECT COUNT(*) FROM players WHERE birthCountry = birthCountry_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 439,
    "task": "How to create a stored procedure that calculates the average height of players?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that calculates the average height of players?",
    "input": "CREATE OR REPLACE PROCEDURE average_player_height AS average_height NUMBER; BEGIN SELECT AVG(height) INTO average_height FROM players; DBMS_OUTPUT.PUT_LINE('Average Height: ' || average_height); END;",
    "output": "CREATE OR REPLACE PROCEDURE average_player_height() AS VAR average_height FLOAT; average_height = (SELECT AVG(height) FROM players); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 440,
    "task": "How to create a stored procedure that takes year as input and returns the team with most wins in that year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that takes year as input and returns the team with most wins in that year?",
    "input": "CREATE OR REPLACE PROCEDURE team_with_most_wins(year_in IN NUMBER) AS winning_team VARCHAR2(100); BEGIN SELECT teamID INTO winning_team FROM (SELECT teamID FROM teams WHERE year = year_in ORDER BY wins DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('Winning Team: ' || winning_team); END;",
    "output": "CREATE OR REPLACE PROCEDURE team_with_most_wins(year_in integer) AS VAR teamID String; teamID = (SELECT teamID FROM teams WHERE year = year_in ORDER BY wins DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 441,
    "task": "How to create a stored procedure that takes year as input and returns the player who played the most games in that year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that takes year as input and returns the player who played the most games in that year?",
    "input": "CREATE OR REPLACE PROCEDURE player_with_most_games(year_in IN NUMBER) AS most_played_player VARCHAR2(100); BEGIN SELECT playerID INTO most_played_player FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY gamesPlayed DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('Player with most games: ' || most_played_player); END;",
    "output": "CREATE OR REPLACE PROCEDURE player_with_most_games(year_in integer) AS VAR playerID String; playerID = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY gamesPlayed DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 442,
    "task": "How to create a stored procedure that returns the player who scored the most goals in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the player who scored the most goals in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE player_with_most_goals(year_in IN NUMBER) AS top_scorer VARCHAR2(100); BEGIN SELECT playerID INTO top_scorer FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('Player with most goals: ' || top_scorer); END;",
    "output": "CREATE OR REPLACE PROCEDURE player_with_most_goals(year_in integer) AS VAR playerID String; playerID = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 443,
    "task": "How to create a stored procedure that counts the number of teams in a given conference?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that counts the number of teams in a given conference?",
    "input": "CREATE OR REPLACE PROCEDURE count_teams_in_conference(conferenceID_in IN VARCHAR2) AS team_count NUMBER; BEGIN SELECT COUNT(*) INTO team_count FROM teams WHERE conferenceID = conferenceID_in; DBMS_OUTPUT.PUT_LINE('Count: ' || team_count); END;",
    "output": "CREATE OR REPLACE PROCEDURE count_teams_in_conference(conferenceID_in String) AS VAR count INTEGER; count = (SELECT COUNT(*) FROM teams WHERE conferenceID = conferenceID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 444,
    "task": "How to create a stored procedure that returns the player who played the most seasons?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the player who played the most seasons?",
    "input": "CREATE OR REPLACE PROCEDURE player_most_seasons AS seasoned_player VARCHAR2(100); BEGIN SELECT playerID INTO seasoned_player FROM (SELECT playerID FROM scoring GROUP BY playerID ORDER BY COUNT(DISTINCT year) DESC) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('Player with most seasons: ' || seasoned_player); END;",
    "output": "CREATE OR REPLACE PROCEDURE player_most_seasons() AS VAR playerID String; playerID = (SELECT playerID FROM scoring GROUP BY playerID ORDER BY COUNT(DISTINCT year) DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 445,
    "task": "How to create a stored procedure that takes playerID as input and returns the total goals scored by the player?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that takes playerID as input and returns the total goals scored by the player?",
    "input": "CREATE OR REPLACE PROCEDURE total_goals_scored(playerID_in IN VARCHAR2) AS total_goals NUMBER; BEGIN SELECT SUM(goals) INTO total_goals FROM scoring WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Total Goals: ' || total_goals); END;",
    "output": "CREATE OR REPLACE PROCEDURE total_goals_scored(playerID_in String) AS VAR total_goals INTEGER; total_goals = (SELECT SUM(goals) FROM scoring WHERE playerID = playerID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 446,
    "task": "How to create a stored procedure that updates the team name of a given teamID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that updates the team name of a given teamID?",
    "input": "CREATE OR REPLACE PROCEDURE update_team_name(teamID_in IN VARCHAR2, name_in IN VARCHAR2) AS BEGIN UPDATE teams SET name = name_in WHERE teamID = teamID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE update_team_name(teamID_in String, name_in String) AS UPDATE teams SET name = name_in WHERE teamID = teamID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 447,
    "task": "How to create a stored procedure that inserts a new team into the teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that inserts a new team into the teams table?",
    "input": "CREATE OR REPLACE PROCEDURE insert_into_teams(year_in IN NUMBER, teamID_in IN VARCHAR2, name_in IN VARCHAR2, conferenceID_in IN VARCHAR2, rank_in IN NUMBER) AS BEGIN INSERT INTO teams(year, teamID, name, conferenceID, rank) VALUES(year_in, teamID_in, name_in, conferenceID_in, rank_in); END;",
    "output": "CREATE OR REPLACE PROCEDURE insert_into_teams(year_in integer, teamID_in String, name_in String, conferenceID_in String, rank_in integer) AS INSERT INTO teams(year, teamID, name, conferenceID, rank) VALUES(year_in, teamID_in, name_in, conferenceID_in, rank_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 448,
    "task": "How to create a stored procedure that deletes a team from the teams table given the teamID and year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that deletes a team from the teams table given the teamID and year?",
    "input": "CREATE OR REPLACE PROCEDURE delete_from_teams(year_in IN NUMBER, teamID_in IN VARCHAR2) AS BEGIN DELETE FROM teams WHERE year = year_in AND teamID = teamID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE delete_from_teams(year_in integer, teamID_in String) AS DELETE FROM teams WHERE year = year_in AND teamID = teamID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 449,
    "task": "How to create a stored procedure that returns the oldest player?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the oldest player?",
    "input": "CREATE OR REPLACE PROCEDURE oldest_player AS oldest_player_id VARCHAR2(100); BEGIN SELECT playerID INTO oldest_player_id FROM (SELECT playerID FROM players ORDER BY birthYear) WHERE ROWNUM <= 1; DBMS_OUTPUT.PUT_LINE('Oldest player ID: ' || oldest_player_id); END;",
    "output": "CREATE OR REPLACE PROCEDURE oldest_player() AS VAR playerID String; playerID = (SELECT playerID FROM players ORDER BY birthYear LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 450,
    "task": "How to create a stored procedure that takes playerID as input and returns the birth country of the player?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that takes playerID as input and returns the birth country of the player?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_country(playerID_in IN VARCHAR2) AS birth_country VARCHAR2(100); BEGIN SELECT birthCountry INTO birth_country FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Birth country: ' || birth_country); END;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_country(playerID_in String) AS VAR birthCountry String; birthCountry = (SELECT birthCountry FROM players WHERE playerID = playerID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 451,
    "task": "How to create a stored procedure that counts the number of players born in a given month?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that counts the number of players born in a given month?",
    "input": "CREATE OR REPLACE PROCEDURE count_players_born_in_month(birthMon_in IN NUMBER) AS birth_month_count NUMBER; BEGIN SELECT COUNT(*) INTO birth_month_count FROM players WHERE birthMon = birthMon_in; DBMS_OUTPUT.PUT_LINE('Players born in month: ' || birth_month_count); END;",
    "output": "CREATE OR REPLACE PROCEDURE count_players_born_in_month(birthMon_in integer) AS VAR count INTEGER; count = (SELECT COUNT(*) FROM players WHERE birthMon = birthMon_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 452,
    "task": "Construct a stored procedure to find the total number of games played by a given player ID in the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Construct a stored procedure to find the total number of games played by a given player ID in the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE total_games_by_player(player_id_in IN VARCHAR2) AS total_games NUMBER; BEGIN SELECT SUM(gamesPlayed) INTO total_games FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Total Games: ' || total_games); END;",
    "output": "CREATE PROCEDURE total_games_by_player(IN player_id_in STRING) AS VAR total_games INTEGER; total_games = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = player_id_in); THROW total_games; END_PROCEDURE;"
  },
  {
    "number": 453,
    "task": "Create a stored procedure to find the amount of assists by a player from the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the amount of assists by a player from the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE find_assists_by_player(player_id_in IN VARCHAR2) AS total_assists NUMBER; BEGIN SELECT SUM(assists) INTO total_assists FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Total Assists: ' || total_assists); END;",
    "output": "CREATE PROCEDURE find_assists_by_player(IN player_id_in STRING) AS VAR total_assists INTEGER; total_assists = (SELECT SUM(assists) FROM scoring WHERE playerID = player_id_in); THROW total_assists; END_PROCEDURE;"
  },
  {
    "number": 454,
    "task": "Design a stored procedure to find the total games won by a team in the teams table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a stored procedure to find the total games won by a team in the teams table.",
    "input": "CREATE OR REPLACE PROCEDURE total_games_won_by_team(team_id_in IN VARCHAR2) AS total_wins NUMBER; BEGIN SELECT SUM(wins) INTO total_wins FROM teams WHERE teamID = team_id_in; DBMS_OUTPUT.PUT_LINE('Total Wins: ' || total_wins); END;",
    "output": "CREATE PROCEDURE total_games_won_by_team(IN team_id_in STRING) AS VAR total_wins INTEGER; total_wins = (SELECT SUM(wins) FROM teams WHERE teamID = team_id_in); THROW total_wins; END_PROCEDURE;"
  },
  {
    "number": 455,
    "task": "Implement a stored procedure to find the top scorer in a given year from the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Implement a stored procedure to find the top scorer in a given year from the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE find_top_scorer(year_in IN NUMBER) AS max_score NUMBER; top_scorer_id VARCHAR2(100); BEGIN SELECT MAX(goals) INTO max_score FROM scoring WHERE year = year_in; SELECT playerID INTO top_scorer_id FROM scoring WHERE goals = max_score AND year = year_in; DBMS_OUTPUT.PUT_LINE('Top scorer ID: ' || top_scorer_id); END;",
    "output": "CREATE PROCEDURE find_top_scorer(IN year_in INTEGER) AS VAR max_score INTEGER, player_id STRING; max_score = (SELECT MAX(goals) FROM scoring WHERE year = year_in); player_id = (SELECT playerID FROM scoring WHERE goals = max_score AND year = year_in); THROW player_id; END_PROCEDURE;"
  },
  {
    "number": 456,
    "task": "Formulate a stored procedure to count total players in a position from the hockey table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Formulate a stored procedure to count total players in a position from the hockey table.",
    "input": "CREATE OR REPLACE PROCEDURE count_players_by_position(position_in IN VARCHAR2) AS total_players NUMBER; BEGIN SELECT COUNT(*) INTO total_players FROM Hockey WHERE Position = position_in; DBMS_OUTPUT.PUT_LINE('Total Players: ' || total_players); END;",
    "output": "CREATE PROCEDURE count_players_by_position(IN position_in STRING) AS VAR total_players INTEGER; total_players = (SELECT COUNT(*) FROM Hockey WHERE Position = position_in); THROW total_players; END_PROCEDURE;"
  },
  {
    "number": 457,
    "task": "Write a stored procedure to get the player ID from the players table who played first in the NHL.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the player ID from the players table who played first in the NHL.",
    "input": "CREATE OR REPLACE PROCEDURE find_first_player_in_NHL AS first_year NUMBER; player_id VARCHAR2(100); BEGIN SELECT MIN(firstNHL) INTO first_year FROM players; SELECT playerID INTO player_id FROM players WHERE firstNHL = first_year; DBMS_OUTPUT.PUT_LINE('First Player ID: ' || player_id); END;",
    "output": "CREATE PROCEDURE find_first_player_in_NHL AS VAR first_year INTEGER, player_id STRING; first_year = (SELECT MIN(firstNHL) FROM players); player_id = (SELECT playerID FROM players WHERE firstNHL = first_year); THROW player_id; END_PROCEDURE;"
  },
  {
    "number": 458,
    "task": "Create a stored procedure to find the total games lost by a team in the teams table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the total games lost by a team in the teams table.",
    "input": "CREATE OR REPLACE PROCEDURE total_games_lost_by_team(team_id_in IN VARCHAR2) AS total_losses NUMBER; BEGIN SELECT SUM(losses) INTO total_losses FROM teams WHERE teamID = team_id_in; DBMS_OUTPUT.PUT_LINE('Total Losses: ' || total_losses); END;",
    "output": "CREATE PROCEDURE total_games_lost_by_team(IN team_id_in STRING) AS VAR total_losses INTEGER; total_losses = (SELECT SUM(losses) FROM teams WHERE teamID = team_id_in); THROW total_losses; END_PROCEDURE;"
  },
  {
    "number": 459,
    "task": "Assemble a stored procedure to find the player with most penalty minutes in the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Assemble a stored procedure to find the player with most penalty minutes in the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE find_most_penalized_player AS max_penalty_minutes NUMBER; player_id VARCHAR2(100); BEGIN SELECT MAX(penaltyMinutes) INTO max_penalty_minutes FROM scoring; SELECT playerID INTO player_id FROM scoring WHERE penaltyMinutes = max_penalty_minutes; DBMS_OUTPUT.PUT_LINE('Most Penalized Player ID: ' || player_id); END;",
    "output": "CREATE PROCEDURE find_most_penalized_player AS VAR max_penalty_minutes INTEGER, player_id STRING; max_penalty_minutes = (SELECT MAX(penaltyMinutes) FROM scoring); player_id = (SELECT playerID FROM scoring WHERE penaltyMinutes = max_penalty_minutes); THROW player_id; END_PROCEDURE;"
  },
  {
    "number": 460,
    "task": "Prepare a stored procedure to find the total penalty minutes by a player in the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Prepare a stored procedure to find the total penalty minutes by a player in the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE find_penalty_minutes_by_player(player_id_in IN VARCHAR2) AS total_penalty_minutes NUMBER; BEGIN SELECT SUM(penaltyMinutes) INTO total_penalty_minutes FROM scoring WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('Total Penalty Minutes: ' || total_penalty_minutes); END;",
    "output": "CREATE PROCEDURE find_penalty_minutes_by_player(IN player_id_in STRING) AS VAR total_penalty_minutes INTEGER; total_penalty_minutes = (SELECT SUM(penaltyMinutes) FROM scoring WHERE playerID = player_id_in); THROW total_penalty_minutes; END_PROCEDURE;"
  },
  {
    "number": 461,
    "task": "Set up a stored procedure to find the total games tied by a team in the teams table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Set up a stored procedure to find the total games tied by a team in the teams table.",
    "input": "CREATE OR REPLACE PROCEDURE total_games_tied_by_team(team_id_in IN VARCHAR2) AS total_ties NUMBER; BEGIN SELECT SUM(ties) INTO total_ties FROM teams WHERE teamID = team_id_in; DBMS_OUTPUT.PUT_LINE('Total Ties: ' || total_ties); END;",
    "output": "CREATE PROCEDURE total_games_tied_by_team(IN team_id_in STRING) AS VAR total_ties INTEGER; total_ties = (SELECT SUM(ties) FROM teams WHERE teamID = team_id_in); THROW total_ties; END_PROCEDURE;"
  },
  {
    "number": 462,
    "task": "Develop a stored procedure to find the playerID who scored maximum goals in a specific year in the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Develop a stored procedure to find the playerID who scored maximum goals in a specific year in the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE find_scorer_in_year(year_in IN NUMBER) AS max_goals NUMBER; player_id VARCHAR2(100); BEGIN SELECT MAX(goals) INTO max_goals FROM scoring WHERE year = year_in; SELECT playerID INTO player_id FROM scoring WHERE goals = max_goals AND year = year_in; DBMS_OUTPUT.PUT_LINE('Player ID: ' || player_id); END;",
    "output": "CREATE PROCEDURE find_scorer_in_year(IN year_in INTEGER) AS VAR max_goals INTEGER, player_id STRING; max_goals = (SELECT MAX(goals) FROM scoring WHERE year = year_in); player_id = (SELECT playerID FROM scoring WHERE goals = max_goals AND year = year_in); THROW player_id; END_PROCEDURE;"
  },
  {
    "number": 463,
    "task": "Create a stored procedure to find the total games overtime losses by a team in the teams table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the total games overtime losses by a team in the teams table.",
    "input": "CREATE OR REPLACE PROCEDURE total_games_overtime_losses_by_team(team_id_in IN VARCHAR2) AS total_overtime_losses NUMBER; BEGIN SELECT SUM(overtimeLosses) INTO total_overtime_losses FROM teams WHERE teamID = team_id_in; DBMS_OUTPUT.PUT_LINE('Total Overtime Losses: ' || total_overtime_losses); END;",
    "output": "CREATE PROCEDURE total_games_overtime_losses_by_team(IN team_id_in STRING) AS VAR total_overtime_losses INTEGER; total_overtime_losses = (SELECT SUM(overtimeLosses) FROM teams WHERE teamID = team_id_in); THROW total_overtime_losses; END_PROCEDURE;"
  },
  {
    "number": 464,
    "task": "Implement a stored procedure to find the total assists by a team in a specific year from the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Implement a stored procedure to find the total assists by a team in a specific year from the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE find_assists_by_team_year(team_id_in IN VARCHAR2, year_in IN NUMBER) AS total_assists NUMBER; BEGIN SELECT SUM(assists) INTO total_assists FROM scoring WHERE teamID = team_id_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total Assists: ' || total_assists); END;",
    "output": "CREATE PROCEDURE find_assists_by_team_year(IN team_id_in STRING, IN year_in INTEGER) AS VAR total_assists INTEGER; total_assists = (SELECT SUM(assists) FROM scoring WHERE teamID = team_id_in AND year = year_in); THROW total_assists; END_PROCEDURE;"
  },
  {
    "number": 465,
    "task": "How to create a stored procedure to update the name of a player in the 'Hockey' table given the player's ID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to update the name of a player in the 'Hockey' table given the player's ID?",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerName(player_id_in IN NUMBER, new_name_in IN VARCHAR2) AS BEGIN UPDATE Hockey SET Name = new_name_in WHERE Id = player_id_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerName(IN player_id_in BIGINT, IN new_name_in STRING) AS UPDATE Hockey SET Name = new_name_in WHERE Id = player_id_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 466,
    "task": "How to create a stored procedure to update the position of a player in the 'Hockey' table given the player's ID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to update the position of a player in the 'Hockey' table given the player's ID?",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerPosition(player_id_in IN NUMBER, new_position_in IN VARCHAR2) AS BEGIN UPDATE Hockey SET Position = new_position_in WHERE Id = player_id_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerPosition(IN player_id_in BIGINT, IN new_position_in STRING) AS UPDATE Hockey SET Position = new_position_in WHERE Id = player_id_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 467,
    "task": "How to create a stored procedure to delete a player from the 'players' table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to delete a player from the 'players' table?",
    "input": "CREATE OR REPLACE PROCEDURE deletePlayer(player_id_in IN VARCHAR2) AS BEGIN DELETE FROM players WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE deletePlayer(IN player_id_in STRING) AS DELETE FROM players WHERE playerID = player_id_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 468,
    "task": "How to create a stored procedure to update the team of a player in the 'Hockey' table given the player's ID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to update the team of a player in the 'Hockey' table given the player's ID?",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerTeam(player_id_in IN NUMBER, new_team_in IN VARCHAR2) AS BEGIN UPDATE Hockey SET Team = new_team_in WHERE Id = player_id_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerTeam(IN player_id_in BIGINT, IN new_team_in STRING) AS UPDATE Hockey SET Team = new_team_in WHERE Id = player_id_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 469,
    "task": "How to create a stored procedure to delete a team from the 'teams' table based on teamID and year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to delete a team from the 'teams' table based on teamID and year?",
    "input": "CREATE OR REPLACE PROCEDURE deleteTeam(year_in IN NUMBER, teamID_in IN VARCHAR2) AS BEGIN DELETE FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE deleteTeam(IN year_in INTEGER, IN teamID_in STRING) AS DELETE FROM teams WHERE year=year_in AND teamID=teamID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 470,
    "task": "Create a procedure to count the number of players in each team in the 'Hockey' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure to count the number of players in each team in the 'Hockey' table.",
    "input": "CREATE OR REPLACE PROCEDURE countPlayersPerTeam AS CURSOR teamCount IS SELECT Team, COUNT(*) AS player_count FROM Hockey GROUP BY Team; BEGIN FOR team_record IN teamCount LOOP DBMS_OUTPUT.PUT_LINE('Team: ' || team_record.Team || ' Player Count: ' || team_record.player_count); END LOOP; END;",
    "output": "CREATE PROCEDURE countPlayersPerTeam(OUT teamPlayerCounts String) AS VAR teamCount String; teamCount = (SELECT Team, COUNT(*) AS player_count FROM Hockey GROUP BY Team); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 471,
    "task": "Write a stored procedure to calculate the average height of players for each team from the 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to calculate the average height of players for each team from the 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE averageHeightOfTeams AS CURSOR outTmp IS SELECT teamID, AVG(height) AS average_height FROM players GROUP BY teamID; BEGIN FOR record IN outTmp LOOP DBMS_OUTPUT.PUT_LINE('TeamID: ' || record.teamID || ' Average Height: ' || record.average_height); END LOOP; END;",
    "output": "CREATE PROCEDURE averageHeightOfTeams(OUT avgHeightByTeam String) AS VAR outTmp String; outTmp = (SELECT teamID, AVG(height) AS average_height FROM players GROUP BY teamID); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 472,
    "task": "Create a procedure to find the oldest player in each team from the 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure to find the oldest player in each team from the 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE oldestPlayerInTeams AS CURSOR outTmp IS SELECT teamID, MAX(birthYear) AS oldest_player FROM players GROUP BY teamID; BEGIN FOR record IN outTmp LOOP DBMS_OUTPUT.PUT_LINE('TeamID: ' || record.teamID || ' Oldest Player Year: ' || record.oldest_player); END LOOP; END;",
    "output": "CREATE PROCEDURE oldestPlayerInTeams(OUT oldestPlayersInTeams String) AS VAR outTmp String; outTmp = (SELECT teamID, MAX(birthYear) AS oldest_player FROM players GROUP BY teamID); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 473,
    "task": "Write a procedure to retrieve the player with the most assists for each team for a given year from the 'scoring' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to retrieve the player with the most assists for each team for a given year from the 'scoring' table.",
    "input": "CREATE OR REPLACE PROCEDURE topAssistPerTeamYear(year_in IN NUMBER) AS CURSOR outTmp IS SELECT teamID, MAX(assists) as top_assists FROM scoring WHERE year = year_in GROUP BY teamID; BEGIN FOR record IN outTmp LOOP DBMS_OUTPUT.PUT_LINE('TeamID: ' || record.teamID || ' Top Assists: ' || record.top_assists); END LOOP; END;",
    "output": "CREATE PROCEDURE topAssistPerTeamYear(IN year_in INTEGER) AS VAR outTmp String; outTmp = (SELECT teamID, MAX(assists) as top_assists FROM scoring WHERE year = year_in GROUP BY teamID); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 474,
    "task": "Create a stored procedure that fetches total goals scored by a player in a given year from the 'scoring' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that fetches total goals scored by a player in a given year from the 'scoring' table.",
    "input": "CREATE OR REPLACE PROCEDURE totalPlayerGoals(playerID_in IN VARCHAR2, year_in IN NUMBER) AS totalGoals NUMBER; BEGIN SELECT SUM(goals) INTO totalGoals FROM scoring WHERE playerID = playerID_in AND year = year_in GROUP BY playerID; DBMS_OUTPUT.PUT_LINE('Total Goals: ' || totalGoals); END;",
    "output": "CREATE PROCEDURE totalPlayerGoals(IN playerID_in varchar(10), IN year_in INTEGER) AS VAR totalGoals INTEGER; totalGoals = (SELECT SUM(goals) FROM scoring WHERE playerID = playerID_in AND year = year_in GROUP BY playerID); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 475,
    "task": "Write a stored procedure to find all players who have ever played for a given team from the 'scoring' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find all players who have ever played for a given team from the 'scoring' table.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamPlayers(teamID_in IN VARCHAR2) AS TYPE PlayerList IS TABLE OF VARCHAR2(50); player_list PlayerList := PlayerList(); BEGIN SELECT DISTINCT playerID BULK COLLECT INTO player_list FROM scoring WHERE teamID = teamID_in; FOR i IN 1..player_list.COUNT LOOP DBMS_OUTPUT.PUT_LINE('Player: ' || player_list(i)); END LOOP; END;",
    "output": "CREATE PROCEDURE getTeamPlayers(IN teamID_in varchar(3)) AS VAR outTmp String; outTmp = (SELECT DISTINCT playerID FROM scoring WHERE teamID = teamID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 476,
    "task": "Create a stored procedure to select the playoff team with the highest wins from the 'teams' table for a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to select the playoff team with the highest wins from the 'teams' table for a given year.",
    "input": "CREATE OR REPLACE PROCEDURE highestWinPlayoffTeam(year_in IN NUMBER) AS teamID VARCHAR2(3); BEGIN SELECT teamID INTO teamID FROM (SELECT teamID FROM teams WHERE year = year_in AND playoff = 'Y' ORDER BY wins DESC) WHERE ROWNUM = 1; DBMS_OUTPUT.PUT_LINE('TeamID: ' || teamID); END;",
    "output": "CREATE PROCEDURE highestWinPlayoffTeam(IN year_in INTEGER) AS VAR teamID varchar(3); teamID = (SELECT teamID FROM teams WHERE year = year_in AND playoff = 'Y' ORDER BY wins DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 477,
    "task": "Write a stored procedure to retrieve the highest scoring player in a given year from the 'scoring' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to retrieve the highest scoring player in a given year from the 'scoring' table.",
    "input": "CREATE OR REPLACE PROCEDURE highestScoringPlayer(year_in IN NUMBER) AS playerId VARCHAR2(10); BEGIN SELECT playerID INTO playerId FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY (goals + assists) DESC) WHERE ROWNUM = 1; DBMS_OUTPUT.PUT_LINE('PlayerID: ' || playerId); END;",
    "output": "CREATE PROCEDURE highestScoringPlayer(IN year_in INTEGER) AS VAR playerId varchar(10); playerId = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY (goals + assists) DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 478,
    "task": "Create a stored procedure to count the total number of games played by a team in a year from the 'teams' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to count the total number of games played by a team in a year from the 'teams' table.",
    "input": "CREATE OR REPLACE PROCEDURE totalTeamGames(year_in IN NUMBER, teamID_in IN VARCHAR2) AS totalGames NUMBER; BEGIN SELECT games INTO totalGames FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Total games: ' || totalGames); END;",
    "output": "CREATE PROCEDURE totalTeamGames(IN year_in INTEGER, IN teamID_in varchar(3)) AS VAR totalGames INTEGER; totalGames = (SELECT games FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 479,
    "task": "Create a stored procedure to get the total penalty minutes for a player in a given year from the 'scoring' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the total penalty minutes for a player in a given year from the 'scoring' table.",
    "input": "CREATE OR REPLACE PROCEDURE totalPlayerPenalties(playerID_in IN VARCHAR2, year_in IN NUMBER) AS totalPenalties NUMBER; BEGIN SELECT SUM(penaltyMinutes) INTO totalPenalties FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total penalties: ' || totalPenalties); END;",
    "output": "CREATE PROCEDURE totalPlayerPenalties(IN playerID_in varchar(10), IN year_in INTEGER) AS VAR totalPenalties INTEGER; totalPenalties = (SELECT SUM(penaltyMinutes) FROM scoring WHERE playerID = playerID_in AND year = year_in GROUP BY playerID); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 480,
    "task": "Write a stored procedure to get the team with the most ties in a given year from the 'teams' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the team with the most ties in a given year from the 'teams' table.",
    "input": "CREATE OR REPLACE PROCEDURE mostTiesTeam(year_in IN NUMBER) AS teamID VARCHAR2(3); BEGIN SELECT teamID INTO teamID FROM (SELECT teamID FROM teams WHERE year = year_in ORDER BY ties DESC) WHERE ROWNUM = 1; DBMS_OUTPUT.PUT_LINE('TeamID: ' || teamID); END;",
    "output": "CREATE PROCEDURE mostTiesTeam(IN year_in INTEGER) AS VAR teamID varchar(3); teamID = (SELECT teamID FROM teams WHERE year = year_in ORDER BY ties DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 481,
    "task": "Create a stored procedure to get the youngest player in each team from the 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the youngest player in each team from the 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE youngestPlayerInTeams AS CURSOR c1 IS SELECT teamID, MIN(birthYear) AS youngest_player FROM players GROUP BY teamID; BEGIN FOR rec IN c1 LOOP DBMS_OUTPUT.PUT_LINE('TeamID: ' || rec.teamID || ', Youngest player: ' || rec.youngest_player); END LOOP; END;",
    "output": "CREATE PROCEDURE youngestPlayerInTeams(OUT youngestPlayersInTeams String) AS VAR outTmp String; outTmp = (SELECT teamID, MIN(birthYear) AS youngest_player FROM players GROUP BY teamID); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 482,
    "task": "Create a stored procedure that fetches total losses by a team in a given year from the 'teams' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that fetches total losses by a team in a given year from the 'teams' table.",
    "input": "CREATE OR REPLACE PROCEDURE totalTeamLosses(year_in IN NUMBER, teamID_in IN VARCHAR2) AS totalLosses NUMBER; BEGIN SELECT losses INTO totalLosses FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Total losses: ' || totalLosses); END;",
    "output": "CREATE PROCEDURE totalTeamLosses(IN year_in INTEGER, IN teamID_in varchar(3)) AS VAR totalLosses INTEGER; totalLosses = (SELECT losses FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 483,
    "task": "Write a stored procedure to find the player with the least assists for each team for a given year from the 'scoring' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the player with the least assists for each team for a given year from the 'scoring' table.",
    "input": "CREATE OR REPLACE PROCEDURE leastAssistPerTeamYear(year_in IN NUMBER) AS CURSOR c1 IS SELECT teamID, MIN(assists) AS least_assists FROM scoring WHERE year = year_in GROUP BY teamID; BEGIN FOR rec IN c1 LOOP DBMS_OUTPUT.PUT_LINE('TeamID: ' || rec.teamID || ', Least assists: ' || rec.least_assists); END LOOP; END;",
    "output": "CREATE PROCEDURE leastAssistPerTeamYear(IN year_in INTEGER) AS VAR outTmp String; outTmp = (SELECT teamID, MIN(assists) as least_assists FROM scoring WHERE year = year_in GROUP BY teamID); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 484,
    "task": "Create a stored procedure to count the total number of players in the 'players' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to count the total number of players in the 'players' table.",
    "input": "CREATE OR REPLACE PROCEDURE totalPlayerCount AS playerCount NUMBER; BEGIN SELECT COUNT(*) INTO playerCount FROM players; DBMS_OUTPUT.PUT_LINE('Total players: ' || playerCount); END;",
    "output": "CREATE PROCEDURE totalPlayerCount() AS VAR playerCount INTEGER; playerCount = (SELECT COUNT(*) FROM players); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 485,
    "task": "Write a SQL Stored Procedure to select height and weight of a player from 'players' table using playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to select height and weight of a player from 'players' table using playerID?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerDetails_in(playerID_in IN VARCHAR2) AS height NUMBER; weight NUMBER; BEGIN SELECT height, weight INTO height, weight FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Height: ' || height || ', Weight: ' || weight); END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerDetails_in(playerID_in String) AS VAR height INTEGER; VAR weight INTEGER; height, weight = (SELECT height, weight FROM players WHERE playerID = playerID_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 486,
    "task": "Write a SQL Stored Procedure to update the position of a player using playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to update the position of a player using playerID?",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerPosition_in(playerID_in IN VARCHAR2, position_in IN VARCHAR2) AS BEGIN UPDATE players SET position = position_in WHERE playerID = playerID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerPosition_in(playerID_in String, position_in String) AS UPDATE players SET position = position_in WHERE playerID = playerID_in; THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 487,
    "task": "Write a SQL Stored Procedure to insert a player into 'players' table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to insert a player into 'players' table?",
    "input": "CREATE OR REPLACE PROCEDURE insertPlayer_in(playerID_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2, height_in IN NUMBER, weight_in IN NUMBER, firstNHL_in IN NUMBER, lastNHL_in IN NUMBER, position_in IN VARCHAR2, birthYear_in IN NUMBER, birthMon_in IN NUMBER, birthDay_in IN NUMBER, birthCountry_in IN VARCHAR2, birthState_in IN VARCHAR2, birthCity_in IN VARCHAR2) AS BEGIN INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES (playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); END;",
    "output": "CREATE OR REPLACE PROCEDURE insertPlayer_in(playerID_in String, firstName_in String, lastName_in String, height_in integer, weight_in integer, firstNHL_in integer, lastNHL_in integer, position_in String, birthYear_in integer, birthMon_in integer, birthDay_in integer, birthCountry_in String, birthState_in String, birthCity_in String) AS INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES (playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 488,
    "task": "Write a SQL Stored Procedure to delete a player from 'players' table using playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to delete a player from 'players' table using playerID?",
    "input": "CREATE OR REPLACE PROCEDURE deletePlayer_in(playerID_in IN VARCHAR2) AS BEGIN DELETE FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE deletePlayer_in(playerID_in String) AS DELETE FROM players WHERE playerID = playerID_in; THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 489,
    "task": "Write a SQL Stored Procedure to select number of players from 'players' table from a particular birth country using birthCountry?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to select number of players from 'players' table from a particular birth country using birthCountry?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayersCount_in(birthCountry_in IN VARCHAR2) AS count INTEGER; BEGIN SELECT COUNT(*) INTO count FROM players WHERE birthCountry = birthCountry_in; DBMS_OUTPUT.PUT_LINE(count); END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayersCount_in(birthCountry_in String) AS VAR count INTEGER; count = (SELECT COUNT(*) FROM players WHERE birthCountry = birthCountry_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 490,
    "task": "Write a SQL Stored Procedure to get the player who has played the most games in hockey?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to get the player who has played the most games in hockey?",
    "input": "CREATE OR REPLACE PROCEDURE mostGamesPlayer_in AS playerID VARCHAR2(100); max_games INTEGER; BEGIN SELECT playerID, MAX(gamesPlayed) INTO playerID, max_games FROM scoring; DBMS_OUTPUT.PUT_LINE(playerID || ', ' || max_games); END;",
    "output": "CREATE OR REPLACE PROCEDURE mostGamesPlayer_in() AS VAR playerID STRING, max_games INTEGER; playerID, max_games = (SELECT playerID, MAX(gamesPlayed) FROM scoring); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 491,
    "task": "Write a SQL Stored Procedure to get details of a team from 'teams' table using teamID and year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to get details of a team from 'teams' table using teamID and year?",
    "input": "CREATE OR REPLACE PROCEDURE getTeamDetails_in(teamID_in IN VARCHAR2, year_in IN NUMBER) AS name VARCHAR2(100); rank INTEGER; BEGIN SELECT name, rank INTO name, rank FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE(name || ', ' || rank); END;",
    "output": "CREATE OR REPLACE PROCEDURE getTeamDetails_in(teamID_in String, year_in integer) AS VAR name STRING; VAR rank INTEGER; name, rank = (SELECT name, rank FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 492,
    "task": "Write a SQL Stored Procedure to update the rank of a team using teamID and year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to update the rank of a team using teamID and year?",
    "input": "CREATE OR REPLACE PROCEDURE updateTeamRank_in(rank_in IN NUMBER, teamID_in IN VARCHAR2, year_in IN NUMBER) AS BEGIN UPDATE teams SET rank = rank_in WHERE year = year_in AND teamID = teamID_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE updateTeamRank_in(rank_in integer, teamID_in String, year_in integer) AS UPDATE teams SET rank = rank_in WHERE year = year_in AND teamID = teamID_in; THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 493,
    "task": "Write a SQL Stored Procedure to get the top scoring player in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to get the top scoring player in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE topScorer_in(year_in IN NUMBER) AS playerID VARCHAR2(100); max_goals INTEGER; BEGIN SELECT playerID, MAX(goals) INTO playerID, max_goals FROM scoring WHERE year = year_in; DBMS_OUTPUT.PUT_LINE(playerID || ', ' || max_goals); END;",
    "output": "CREATE OR REPLACE PROCEDURE topScorer_in(year_in integer) AS VAR playerID STRING; VAR max_goals INTEGER; playerID, max_goals = (SELECT playerID, MAX(goals) FROM scoring WHERE year = year_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 494,
    "task": "Write a SQL Stored Procedure to calculate the total games played by a team in a specific year using 'teams' table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to calculate the total games played by a team in a specific year using 'teams' table?",
    "input": "CREATE OR REPLACE PROCEDURE totalGamesPlayedTeam_in(teamID_in IN VARCHAR2, year_in IN NUMBER) AS total_games INTEGER; BEGIN SELECT games INTO total_games FROM teams WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(total_games); END;",
    "output": "CREATE OR REPLACE PROCEDURE totalGamesPlayedTeam_in(teamID_in String, year_in integer) AS VAR total_games INTEGER; total_games = (SELECT games FROM teams WHERE teamID = teamID_in AND year = year_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 495,
    "task": "Write a SQL Stored Procedure to return the player(s) who played the most stints in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to return the player(s) who played the most stints in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE mostStints_in(year_in IN NUMBER) AS playerID VARCHAR2(100); max_stints INTEGER; BEGIN SELECT playerID, MAX(stint) INTO playerID, max_stints FROM scoring WHERE year = year_in; DBMS_OUTPUT.PUT_LINE(playerID || ', ' || max_stints); END;",
    "output": "CREATE OR REPLACE PROCEDURE mostStints_in(year_in integer) AS VAR playerID String; VAR max_stints INTEGER; playerID, max_stints = (SELECT playerID, MAX(stint) FROM scoring WHERE year = year_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 496,
    "task": "Write a SQL Stored Procedure to return the player who scored the most goals in a specific year and team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to return the player who scored the most goals in a specific year and team?",
    "input": "CREATE OR REPLACE PROCEDURE topGoalScorer_in(teamID_in IN VARCHAR2, year_in IN NUMBER) AS playerID VARCHAR2(100); max_goals INTEGER; BEGIN SELECT playerID, MAX(goals) INTO playerID, max_goals FROM scoring WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE(playerID || ', ' || max_goals); END;",
    "output": "CREATE OR REPLACE PROCEDURE topGoalScorer_in(teamID_in String, year_in integer) AS VAR playerID STRING, max_goals INTEGER; playerID, max_goals = (SELECT playerID, MAX(goals) FROM scoring WHERE year = year_in AND teamID = teamID_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 497,
    "task": "Write a SQL Stored Procedure to return the player who has played the most games in a specific year and team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL Stored Procedure to return the player who has played the most games in a specific year and team?",
    "input": "CREATE OR REPLACE PROCEDURE mostGamesPlayer_in(teamID_in IN VARCHAR2, year_in IN NUMBER) AS playerID VARCHAR2(100); max_games INTEGER; BEGIN SELECT playerID, MAX(gamesPlayed) INTO playerID, max_games FROM scoring WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE(playerID || ', ' || max_games); END;",
    "output": "CREATE OR REPLACE PROCEDURE mostGamesPlayer_in(teamID_in String, year_in integer) AS VAR playerID STRING, max_games INTEGER; playerID, max_games = (SELECT playerID, MAX(gamesPlayed) FROM scoring WHERE year = year_in AND teamID = teamID_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 498,
    "task": "Create a stored procedure to get the total number of goals and assists by a player in a year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the total number of goals and assists by a player in a year",
    "input": "CREATE OR REPLACE PROCEDURE getTotalGoalsAndAssists(playerID_in IN VARCHAR2, year_in IN NUMBER) AS totalGoals INTEGER; totalAssists INTEGER; BEGIN SELECT SUM(goals), SUM(assists) INTO totalGoals, totalAssists FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total Goals:' || totalGoals || ' Total Assists:' || totalAssists); END;",
    "output": "CREATE PROCEDURE getTotalGoalsAndAssists(IN playerID_in STRING, IN year_in INTEGER) AS VAR totalGoals INTEGER, totalAssists INTEGER; totalGoals, totalAssists = (SELECT SUM(goals), SUM(assists) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total Goals:'||totalGoals||' Total Assists:'||totalAssists; END_PROCEDURE;"
  },
  {
    "number": 499,
    "task": "Create a stored procedure to get the player's first and last NHL year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the player's first and last NHL year",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerNHLDetails(playerID_in IN VARCHAR2) AS firstNHL INTEGER; lastNHL INTEGER; BEGIN SELECT firstNHL, lastNHL INTO firstNHL, lastNHL FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('First NHL Year:' || firstNHL || ' Last NHL Year:' || lastNHL); END;",
    "output": "CREATE PROCEDURE getPlayerNHLDetails(IN playerID_in STRING) AS VAR firstNHL INTEGER, lastNHL INTEGER; firstNHL, lastNHL = (SELECT firstNHL, lastNHL FROM players WHERE playerID = playerID_in); THROW 'First NHL Year:'||firstNHL||' Last NHL Year:'||lastNHL; END_PROCEDURE;"
  },
  {
    "number": 500,
    "task": "Create a stored procedure to get the total number of teams in a conference in a specific year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the total number of teams in a conference in a specific year",
    "input": "CREATE OR REPLACE PROCEDURE getTeamsInConference(year_in IN NUMBER, conferenceID_in IN VARCHAR2) AS totalTeams INTEGER; BEGIN SELECT COUNT(*) INTO totalTeams FROM teams WHERE year = year_in AND conferenceID = conferenceID_in; DBMS_OUTPUT.PUT_LINE('Total teams in conference:' || totalTeams); END;",
    "output": "CREATE PROCEDURE getTeamsInConference(IN year_in INTEGER, IN conferenceID_in STRING) AS VAR totalTeams INTEGER; totalTeams = (SELECT COUNT(*) FROM teams WHERE year = year_in AND conferenceID = conferenceID_in); THROW 'Total teams in conference:'||totalTeams; END_PROCEDURE;"
  },
  {
    "number": 501,
    "task": "Create a stored procedure that counts the total number of distinct positions in the players table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that counts the total number of distinct positions in the players table",
    "input": "CREATE OR REPLACE PROCEDURE countPlayerPositions AS totalPositions INTEGER; BEGIN SELECT COUNT(DISTINCT position) INTO totalPositions FROM players; DBMS_OUTPUT.PUT_LINE('Total distinct positions:' || totalPositions); END;",
    "output": "CREATE PROCEDURE countPlayerPositions AS VAR totalPositions INTEGER; totalPositions = (SELECT COUNT(DISTINCT position) FROM players); THROW 'Total distinct positions:'||totalPositions; END_PROCEDURE;"
  },
  {
    "number": 502,
    "task": "Create a stored procedure to get the total number of hockey teams",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the total number of hockey teams",
    "input": "CREATE OR REPLACE PROCEDURE countHockeyTeams AS total INTEGER; BEGIN SELECT COUNT(*) INTO total FROM Hockey; DBMS_OUTPUT.PUT_LINE('Total Hockey Teams:' || total); END;",
    "output": "CREATE PROCEDURE countHockeyTeams AS VAR total INTEGER; total = (SELECT COUNT(*) FROM Hockey); THROW 'Total Hockey Teams:'||total; END_PROCEDURE;"
  },
  {
    "number": 503,
    "task": "Create a stored procedure to get a player's position and team based on their number in the Hockey table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get a player's position and team based on their number in the Hockey table",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerPositionAndTeam(number_in IN NUMBER) AS position VARCHAR2(50); team VARCHAR2(50); BEGIN SELECT Position, Team INTO position, team FROM Hockey WHERE Number = number_in; DBMS_OUTPUT.PUT_LINE('Position:' || position || ' Team:' || team); END;",
    "output": "CREATE PROCEDURE getPlayerPositionAndTeam(IN number_in INTEGER) AS VAR position STRING, team STRING; position, team = (SELECT Position, Team FROM Hockey WHERE Number = number_in); THROW 'Position:'||position||' Team:'||team; END_PROCEDURE;"
  },
  {
    "number": 504,
    "task": "Create a stored procedure to get total penalty minutes by a player in a year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get total penalty minutes by a player in a year",
    "input": "CREATE OR REPLACE PROCEDURE getTotalPenalties(playerID_in IN VARCHAR2, year_in IN NUMBER) AS totalPenalties INTEGER; BEGIN SELECT SUM(penaltyMinutes) INTO totalPenalties FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total penalty minutes:' || totalPenalties); END;",
    "output": "CREATE PROCEDURE getTotalPenalties(IN playerID_in STRING, IN year_in INTEGER) AS VAR totalPenalties INTEGER; totalPenalties = (SELECT SUM(penaltyMinutes) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total penalty minutes:'||totalPenalties; END_PROCEDURE;"
  },
  {
    "number": 505,
    "task": "Create a stored procedure to count the total number of players in the players table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to count the total number of players in the players table",
    "input": "CREATE OR REPLACE PROCEDURE countPlayers AS total INTEGER; BEGIN SELECT COUNT(*) INTO total FROM players; DBMS_OUTPUT.PUT_LINE('Total players:' || total); END;",
    "output": "CREATE PROCEDURE countPlayers AS VAR total INTEGER; total = (SELECT COUNT(*) FROM players); THROW 'Total players:'||total; END_PROCEDURE;"
  },
  {
    "number": 506,
    "task": "Create a stored procedure to get the total number of ties and overtimeLosses of a team in a year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the total number of ties and overtimeLosses of a team in a year",
    "input": "CREATE OR REPLACE PROCEDURE getTeamTiesAndOvertimeLosses(teamID_in IN VARCHAR2, year_in IN NUMBER) AS ties INTEGER; overtimeLosses INTEGER; BEGIN SELECT ties, overtimeLosses INTO ties, overtimeLosses FROM teams WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Ties:' || ties || ' Overtime losses:' || overtimeLosses); END;",
    "output": "CREATE PROCEDURE getTeamTiesAndOvertimeLosses(IN teamID_in STRING, IN year_in INTEGER) AS VAR ties INTEGER, overtimeLosses INTEGER; ties, overtimeLosses = (SELECT ties, overtimeLosses FROM teams WHERE teamID = teamID_in AND year = year_in); THROW 'Ties:'||ties||' Overtime losses:'||overtimeLosses; END_PROCEDURE;"
  },
  {
    "number": 507,
    "task": "Create a stored procedure to get the year, stint, and teamID of a player based on playerID in the scoring table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the year, stint, and teamID of a player based on playerID in the scoring table",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerScoreDetails(playerID_in IN VARCHAR2) AS year INTEGER; stint INTEGER; teamID VARCHAR2(100); BEGIN SELECT year, stint, teamID INTO year, stint, teamID FROM scoring WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Year:' || year || ' Stint:' || stint || ' Team ID:' || teamID); END;",
    "output": "CREATE PROCEDURE getPlayerScoreDetails(IN playerID_in STRING) AS VAR year INTEGER, stint INTEGER, teamID STRING; year, stint, teamID = (SELECT year, stint, teamID FROM scoring WHERE playerID = playerID_in); THROW 'Year:'||year||' Stint:'||stint||' Team ID:'||teamID; END_PROCEDURE;"
  },
  {
    "number": 508,
    "task": "Create a stored procedure to get a count of all distinct birth countries in the players table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get a count of all distinct birth countries in the players table",
    "input": "CREATE OR REPLACE PROCEDURE countBirthCountries AS totalCountries INTEGER; BEGIN SELECT COUNT(DISTINCT birthCountry) INTO totalCountries FROM players; DBMS_OUTPUT.PUT_LINE('Total distinct birth countries:' || totalCountries); END;",
    "output": "CREATE PROCEDURE countBirthCountries AS VAR totalCountries INTEGER; totalCountries = (SELECT COUNT(DISTINCT birthCountry) FROM players); THROW 'Total distinct birth countries:'||totalCountries; END_PROCEDURE;"
  },
  {
    "number": 509,
    "task": "Create a stored procedure that gets the number of all distinct positions in the scoring table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that gets the number of all distinct positions in the scoring table",
    "input": "CREATE OR REPLACE PROCEDURE countDistinctPositions AS totalPositions INTEGER; BEGIN SELECT COUNT(DISTINCT position) INTO totalPositions FROM scoring; DBMS_OUTPUT.PUT_LINE('Total distinct positions:' || totalPositions); END;",
    "output": "CREATE PROCEDURE countDistinctPositions AS VAR totalPositions INTEGER; totalPositions = (SELECT COUNT(DISTINCT position) FROM scoring); THROW 'Total distinct positions:'||totalPositions; END_PROCEDURE;"
  },
  {
    "number": 510,
    "task": "Create a stored procedure to get the maximum and minimum height of players",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the maximum and minimum height of players",
    "input": "CREATE OR REPLACE PROCEDURE getMaxMinHeight AS maxHeight INTEGER; minHeight INTEGER; BEGIN SELECT MAX(height), MIN(height) INTO maxHeight, minHeight FROM players; DBMS_OUTPUT.PUT_LINE('Maximum Height:' || maxHeight || ' Minimum Height:' || minHeight); END;",
    "output": "CREATE PROCEDURE getMaxMinHeight AS VAR maxHeight INTEGER, minHeight INTEGER; maxHeight, minHeight = (SELECT MAX(height), MIN(height) FROM players); THROW 'Maximum Height:'||maxHeight||' Minimum Height:'||minHeight; END_PROCEDURE;"
  },
  {
    "number": 511,
    "task": "Create a stored procedure to count the number of distinct team names in the teams table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to count the number of distinct team names in the teams table",
    "input": "CREATE OR REPLACE PROCEDURE countDistinctTeams AS totalTeams INTEGER; BEGIN SELECT COUNT(DISTINCT name) INTO totalTeams FROM teams; DBMS_OUTPUT.PUT_LINE('Total distinct team names:' || totalTeams); END;",
    "output": "CREATE PROCEDURE countDistinctTeams AS VAR totalTeams INTEGER; totalTeams = (SELECT COUNT(DISTINCT name) FROM teams); THROW 'Total distinct team names:'||totalTeams; END_PROCEDURE;"
  },
  {
    "number": 512,
    "task": "Create a NuoDB stored procedure that updates the position of a player based on their ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB stored procedure that updates the position of a player based on their ID.",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerPositionById(playerId_in VARCHAR2, newPosition_in VARCHAR2) AS BEGIN UPDATE players SET position = newPosition_in WHERE playerID = playerId_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerPositionById(playerId_in String, newPosition_in String) AS UPDATE players SET position = newPosition_in WHERE playerID = playerId_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 513,
    "task": "Write a SQL stored procedure in NuoDB that inserts a new player into the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a SQL stored procedure in NuoDB that inserts a new player into the players table.",
    "input": "CREATE OR REPLACE PROCEDURE addNewPlayer(playerId_in VARCHAR2, firstName_in VARCHAR2, lastName_in VARCHAR2, height_in NUMBER, weight_in NUMBER, position_in VARCHAR2) AS BEGIN INSERT INTO players(playerID, firstName, lastName, height, weight, position) VALUES(playerId_in, firstName_in, lastName_in, height_in, weight_in, position_in); COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE addNewPlayer(playerId_in String, firstName_in String, lastName_in String, height_in INTEGER, weight_in INTEGER, position_in String) AS INSERT INTO players(playerID, firstName, lastName, height, weight, position) VALUES(playerId_in, firstName_in, lastName_in, height_in, weight_in, position_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 514,
    "task": "Create a stored procedure in NuoDB to fetch the top 5 teams with most wins.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure in NuoDB to fetch the top 5 teams with most wins.",
    "input": "CREATE OR REPLACE PROCEDURE getTopTeams AS top_teams SYS_REFCURSOR; BEGIN OPEN top_teams FOR SELECT teamID FROM teams ORDER BY wins DESC FETCH FIRST 5 ROWS ONLY; END;",
    "output": "CREATE OR REPLACE PROCEDURE getTopTeams() AS VAR top_teams String = (SELECT teamID FROM teams ORDER BY wins DESC LIMIT 5); THROW top_teams; END_PROCEDURE;"
  },
  {
    "number": 515,
    "task": "Write a stored procedure in NuoDB to remove a player from the players table based on their ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB to remove a player from the players table based on their ID.",
    "input": "CREATE OR REPLACE PROCEDURE removePlayer(playerId_in VARCHAR2) AS BEGIN DELETE FROM players WHERE playerID = playerId_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE removePlayer(playerId_in String) AS DELETE FROM players WHERE playerID = playerId_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 516,
    "task": "Create a stored procedure in NuoDB to update the team of a specific player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure in NuoDB to update the team of a specific player.",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerTeam(playerId_in VARCHAR2, newTeam_in VARCHAR2) AS BEGIN UPDATE players SET team = newTeam_in WHERE playerID = playerId_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerTeam(playerId_in String, newTeam_in String) AS UPDATE players SET team = newTeam_in WHERE playerID = playerId_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 517,
    "task": "Write a NuoDB stored procedure that retrieves the number of players in each team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB stored procedure that retrieves the number of players in each team.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayersCountPerTeam AS teamPlayersCount SYS_REFCURSOR; BEGIN OPEN teamPlayersCount FOR SELECT team, COUNT(*) FROM players GROUP BY team; END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayersCountPerTeam() AS VAR teamPlayersCount String = (SELECT team, COUNT(*) FROM players GROUP BY team); THROW teamPlayersCount; END_PROCEDURE;"
  },
  {
    "number": 518,
    "task": "Write an SQL stored procedure in NuoDB to update the number of games played by a specific player in a particular year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write an SQL stored procedure in NuoDB to update the number of games played by a specific player in a particular year.",
    "input": "CREATE OR REPLACE PROCEDURE updateGamesPlayed(playerId_in VARCHAR2, year_in NUMBER, gamesPlayed_in NUMBER) AS BEGIN UPDATE scoring SET gamesPlayed = gamesPlayed_in WHERE playerID = playerId_in AND year = year_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE updateGamesPlayed(playerId_in String, year_in INTEGER, gamesPlayed_in INTEGER) AS UPDATE scoring SET gamesPlayed = gamesPlayed_in WHERE playerID = playerId_in AND year = year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 519,
    "task": "Create a NuoDB stored procedure to get all player who're born in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB stored procedure to get all player who're born in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayersBornInYear(year_in NUMBER) AS bornInYear SYS_REFCURSOR; BEGIN OPEN bornInYear FOR SELECT playerID FROM players WHERE birthYear = year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayersBornInYear(year_in INTEGER) AS VAR bornInYear String = (SELECT playerID FROM players WHERE birthYear = year_in); THROW bornInYear; END_PROCEDURE;"
  },
  {
    "number": 520,
    "task": "Create a stored procedure in NuoDB to count the total number of players born in each country.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure in NuoDB to count the total number of players born in each country.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerCountByCountry AS playersPerCountry SYS_REFCURSOR; BEGIN OPEN playersPerCountry FOR SELECT birthCountry, COUNT(*) FROM players GROUP BY birthCountry; END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerCountByCountry() AS VAR playersPerCountry INTEGER = (SELECT birthCountry, COUNT(*) FROM players GROUP BY birthCountry); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 521,
    "task": "Write a stored procedure in NuoDB to update the weight of a specific player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB to update the weight of a specific player.",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerWeight(playerId_in VARCHAR2, newWeight_in NUMBER) AS BEGIN UPDATE players SET weight = newWeight_in WHERE playerID = playerId_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerWeight(playerId_in String, newWeight_in INTEGER) AS UPDATE players SET weight = newWeight_in WHERE playerID = playerId_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 522,
    "task": "Create a NuoDB stored procedure to fetch the oldest player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB stored procedure to fetch the oldest player.",
    "input": "CREATE OR REPLACE PROCEDURE getOldestPlayer AS BEGIN SELECT playerID INTO oldestPlayer FROM players ORDER BY birthYear FETCH FIRST ROW ONLY; END;",
    "output": "CREATE OR REPLACE PROCEDURE getOldestPlayer() AS VAR oldestPlayer String = (SELECT playerID FROM players ORDER BY birthYear ASC LIMIT 1); THROW oldestPlayer; END_PROCEDURE;"
  },
  {
    "number": 523,
    "task": "Create a SQL stored procedure in NuoDB that counts the number of teams in each conference.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a SQL stored procedure in NuoDB that counts the number of teams in each conference.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamsCountPerConference AS BEGIN SELECT conferenceID, COUNT(*) INTO confTeamsCount FROM teams GROUP BY conferenceID; END;",
    "output": "CREATE OR REPLACE PROCEDURE getTeamsCountPerConference() AS VAR confTeamsCount INTEGER = (SELECT conferenceID, COUNT(*) FROM teams GROUP BY conferenceID); THROW confTeamsCount; END_PROCEDURE;"
  },
  {
    "number": 524,
    "task": "Create a NuoDB stored procedure to fetch all teams that have not made it to the playoffs.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB stored procedure to fetch all teams that have not made it to the playoffs.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamsWithoutPlayoffs AS BEGIN SELECT teamID INTO noPlayoffTeams FROM teams WHERE playoff = ''; END;",
    "output": "CREATE OR REPLACE PROCEDURE getTeamsWithoutPlayoffs() AS VAR noPlayoffTeams String = (SELECT teamID FROM teams WHERE playoff = ''); THROW noPlayoffTeams; END_PROCEDURE;"
  },
  {
    "number": 525,
    "task": "How to create a stored procedure that retrieves hockey player's information based on the input player's number?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves hockey player's information based on the input player's number?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_info_by_number(player_number_in IN INTEGER) AS BEGIN SELECT Name, Position, Team INTO player_name, player_position, player_team FROM Hockey WHERE Number = player_number_in; END;",
    "output": "CREATE PROCEDURE get_player_info_by_number(IN player_number_in INTEGER) AS VAR player_name STRING, player_position STRING, player_team STRING; player_name, player_position, player_team = (SELECT Name, Position, Team FROM Hockey WHERE Number = player_number_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 526,
    "task": "How to create a stored procedure that retrieves player's first and last name by player's ID from the players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves player's first and last name by player's ID from the players table?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_names_by_id(player_id_in IN VARCHAR2) AS BEGIN SELECT firstName, lastName INTO first_name, last_name FROM players WHERE playerID = player_id_in; END;",
    "output": "CREATE PROCEDURE get_player_names_by_id(IN player_id_in STRING) AS VAR first_name STRING, last_name STRING; first_name, last_name = (SELECT firstName, lastName FROM players WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 527,
    "task": "How to create a stored procedure that retrieves team's details by the team's ID from the teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves team's details by the team's ID from the teams table?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_details_by_id(team_id_in IN VARCHAR2) AS BEGIN SELECT name, conferenceID, divisionID INTO team_name, conference_id, division_id FROM teams WHERE teamID = team_id_in; END;",
    "output": "CREATE PROCEDURE get_team_details_by_id(IN team_id_in STRING) AS VAR team_name STRING, conference_id STRING, division_id STRING; team_name, conference_id, division_id = (SELECT name, conferenceID, divisionID FROM teams WHERE teamID = team_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 528,
    "task": "How to create a stored procedure that retrieves player's scoring details by the player's ID from the scoring table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves player's scoring details by the player's ID from the scoring table?",
    "input": "CREATE OR REPLACE PROCEDURE get_scoring_details_by_player_id(player_id_in IN VARCHAR2) AS BEGIN SELECT year, goals, assists INTO year, goals, assists FROM scoring WHERE playerID = player_id_in; END;",
    "output": "CREATE PROCEDURE get_scoring_details_by_player_id(IN player_id_in STRING) AS VAR year INTEGER, goals INTEGER, assists INTEGER; year, goals, assists = (SELECT year, goals, assists FROM scoring WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 529,
    "task": "How to create a stored procedure that retrieves player's height and weight by player's ID from the players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves player's height and weight by player's ID from the players table?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_size_by_id(player_id_in IN VARCHAR2) AS BEGIN SELECT height, weight INTO height, weight FROM players WHERE playerID = player_id_in; END;",
    "output": "CREATE PROCEDURE get_player_size_by_id(IN player_id_in STRING) AS VAR height INTEGER, weight INTEGER; height, weight = (SELECT height, weight FROM players WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 530,
    "task": "How to create a stored procedure that retrieves the total wins and losses of a team by the team's ID from teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the total wins and losses of a team by the team's ID from teams table?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_record_by_id(team_id_in IN VARCHAR2) AS BEGIN SELECT wins, losses INTO wins, losses FROM teams WHERE teamID = team_id_in; END;",
    "output": "CREATE PROCEDURE get_team_record_by_id(IN team_id_in STRING) AS VAR wins INTEGER, losses INTEGER; wins, losses = (SELECT wins, losses FROM teams WHERE teamID = team_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 531,
    "task": "How to create a stored procedure that retrieves the highest-scoring player's details from scoring table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the highest-scoring player's details from scoring table?",
    "input": "CREATE OR REPLACE PROCEDURE get_highest_scoring_player AS BEGIN SELECT playerID, MAX(goals) INTO player_id, max_goals FROM scoring; END;",
    "output": "CREATE PROCEDURE get_highest_scoring_player() AS VAR player_id STRING, max_goals INTEGER; player_id, max_goals = (SELECT playerID, MAX(goals) FROM scoring); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 532,
    "task": "How to create a stored procedure that retrieves a player's country of birth by player's ID from the players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves a player's country of birth by player's ID from the players table?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birth_country_by_id(player_id_in IN VARCHAR2) AS BEGIN SELECT birthCountry INTO birth_country FROM players WHERE playerID = player_id_in; END;",
    "output": "CREATE PROCEDURE get_player_birth_country_by_id(IN player_id_in STRING) AS VAR birth_country STRING; birth_country = (SELECT birthCountry FROM players WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 533,
    "task": "How to create stored procedure that retrieves a team's details by year from teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create stored procedure that retrieves a team's details by year from teams table?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_details_by_year(year_in IN INTEGER) AS BEGIN SELECT teamID, name INTO team_id, team_name FROM teams WHERE year = year_in; END;",
    "output": "CREATE PROCEDURE get_team_details_by_year(IN year_in INTEGER) AS VAR team_id STRING, team_name STRING; team_id, team_name = (SELECT teamID, name FROM teams WHERE year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 534,
    "task": "How to create a stored procedure that retrieves the amount of games played by a player by player's ID from scoring table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the amount of games played by a player by player's ID from scoring table?",
    "input": "CREATE OR REPLACE PROCEDURE get_games_played_by_player_id(player_id_in IN VARCHAR2) AS BEGIN SELECT SUM(gamesPlayed) INTO games_played FROM scoring WHERE playerID = player_id_in; END;",
    "output": "CREATE PROCEDURE get_games_played_by_player_id(IN player_id_in STRING) AS VAR games_played INTEGER; games_played = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 535,
    "task": "How to create a stored procedure that retrieves the percentage of wins for a team by the team's ID from teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the percentage of wins for a team by the team's ID from teams table?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_win_percentage_by_id(team_id_in IN VARCHAR2) AS BEGIN SELECT 100.0 * SUM(wins) / SUM(games) INTO win_percentage FROM teams WHERE teamID = team_id_in; END;",
    "output": "CREATE PROCEDURE get_team_win_percentage_by_id(IN team_id_in STRING) AS VAR win_percentage FLOAT; win_percentage = (SELECT 100.0 * SUM(wins) / SUM(games) FROM teams WHERE teamID = team_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 536,
    "task": "How to create a stored procedure that retrieves the average scoring by position from scoring table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the average scoring by position from scoring table?",
    "input": "CREATE OR REPLACE PROCEDURE get_average_scoring_by_position AS BEGIN SELECT position, AVG(goals) INTO position, avg_goals FROM scoring GROUP BY position; END;",
    "output": "CREATE PROCEDURE get_average_scoring_by_position() AS VAR position STRING, avg_goals FLOAT; position, avg_goals = (SELECT position, AVG(goals) FROM scoring GROUP BY position); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 537,
    "task": "How to create a stored procedure that retrieves the total points scored by a player by his ID from scoring table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the total points scored by a player by his ID from scoring table?",
    "input": "CREATE OR REPLACE PROCEDURE get_total_points_by_player_id(player_id_in IN VARCHAR2) AS BEGIN SELECT SUM(goals) + SUM(assists) INTO total_points FROM scoring WHERE playerID = player_id_in; END;",
    "output": "CREATE PROCEDURE get_total_points_by_player_id(IN player_id_in STRING) AS VAR total_points INTEGER; total_points = (SELECT SUM(goals) + SUM(assists) FROM scoring WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 538,
    "task": "How to create a stored procedure that retrieves the total number of players from a specific birth country?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the total number of players from a specific birth country?",
    "input": "CREATE OR REPLACE PROCEDURE get_total_players_by_birth_country(birth_country_in IN VARCHAR2) AS BEGIN SELECT COUNT(playerID) INTO player_count FROM players WHERE birthCountry = birth_country_in; END;",
    "output": "CREATE PROCEDURE get_total_players_by_birth_country(IN birth_country_in STRING) AS VAR player_count INTEGER; player_count = (SELECT COUNT(playerID) FROM players WHERE birthCountry = birth_country_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 539,
    "task": "How to create a stored procedure that retrieves the average team rank by conference from teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the average team rank by conference from teams table?",
    "input": "CREATE OR REPLACE PROCEDURE get_average_rank_by_conference AS BEGIN SELECT conferenceID, AVG(rank) INTO conference_id, avg_rank FROM teams GROUP BY conferenceID; END;",
    "output": "CREATE PROCEDURE get_average_rank_by_conference() AS VAR conference_id STRING, avg_rank FLOAT; conference_id, avg_rank = (SELECT conferenceID, AVG(rank) FROM teams GROUP BY conferenceID); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 540,
    "task": "How to create a stored procedure that retrieves the total number of games played by a team by the team's ID from teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the total number of games played by a team by the team's ID from teams table?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_games_by_id(team_id_in IN VARCHAR2) AS BEGIN SELECT SUM(games) INTO total_games FROM teams WHERE teamID = team_id_in; END;",
    "output": "CREATE PROCEDURE get_team_games_by_id(IN team_id_in STRING) AS VAR total_games INTEGER; total_games = (SELECT SUM(games) FROM teams WHERE teamID = team_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 541,
    "task": "How to create a stored procedure that retrieves the total ties of a team by team's ID from teams table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the total ties of a team by team's ID from teams table?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_ties_by_id(team_id_in IN VARCHAR2) AS BEGIN SELECT SUM(ties) INTO total_ties FROM teams WHERE teamID = team_id_in; END;",
    "output": "CREATE PROCEDURE get_team_ties_by_id(IN team_id_in STRING) AS VAR total_ties INTEGER; total_ties = (SELECT SUM(ties) FROM teams WHERE teamID = team_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 542,
    "task": "How to create a stored procedure that retrieves the average weight of players by birth country from the players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the average weight of players by birth country from the players table?",
    "input": "CREATE OR REPLACE PROCEDURE get_average_weight_by_birth_country(birth_country_in IN VARCHAR2) AS BEGIN SELECT AVG(weight) INTO average_weight FROM players WHERE birthCountry = birth_country_in; END;",
    "output": "CREATE PROCEDURE get_average_weight_by_birth_country(IN birth_country_in STRING) AS VAR average_weight FLOAT; average_weight = (SELECT AVG(weight) FROM players WHERE birthCountry = birth_country_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 543,
    "task": "How to create a stored procedure that retrieves the birthplace of a player by player's ID from players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that retrieves the birthplace of a player by player's ID from players table?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birth_place_by_id(player_id_in IN VARCHAR2) AS BEGIN SELECT birthState, birthCity INTO birth_state, birth_city FROM players WHERE playerID = player_id_in; END;",
    "output": "CREATE PROCEDURE get_player_birth_place_by_id(IN player_id_in STRING) AS VAR birth_state STRING, birth_city STRING; birth_state, birth_city = (SELECT birthState, birthCity FROM players WHERE playerID = player_id_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 544,
    "task": "Write a stored procedure to compute the average weight of all players from a given team and store the result in the variable avg_weight.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to compute the average weight of all players from a given team and store the result in the variable avg_weight.",
    "input": "CREATE OR REPLACE PROCEDURE avg_weight_of_team(team_in IN VARCHAR2) IS BEGIN SELECT AVG(weight) INTO avg_weight FROM players WHERE team = team_in; END;",
    "output": "CREATE PROCEDURE avg_weight_of_team(IN team_in STRING) AS VAR avg_weight DECIMAL; avg_weight = (SELECT AVG(weight) FROM players WHERE team = team_in); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 545,
    "task": "Write a stored procedure to find the player with the most goals in a given year and store the result in the variable max_goals_player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the player with the most goals in a given year and store the result in the variable max_goals_player.",
    "input": "CREATE OR REPLACE PROCEDURE max_goal_player(year_in IN INTEGER) IS BEGIN SELECT playerID INTO max_goals_player FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC) WHERE ROWNUM <= 1; END;",
    "output": "CREATE PROCEDURE max_goal_player(IN year_in INTEGER) AS VAR max_goals_player STRING; max_goals_player = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC LIMIT 1); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 546,
    "task": "Write a stored procedure that finds the team with the least number of losses in a given year and stores the result in the variable min_loss_team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that finds the team with the least number of losses in a given year and stores the result in the variable min_loss_team.",
    "input": "CREATE OR REPLACE PROCEDURE min_losses_team(year_in IN INTEGER) IS BEGIN SELECT teamID INTO min_loss_team FROM (SELECT teamID FROM teams WHERE year = year_in ORDER BY losses) WHERE ROWNUM <= 1; END;",
    "output": "CREATE PROCEDURE min_losses_team(IN year_in INTEGER) AS VAR min_loss_team STRING; min_loss_team = (SELECT teamID FROM teams WHERE year = year_in ORDER BY losses LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 547,
    "task": "Write a stored procedure to find the player with the highest height from a given team and store the player's id in the variable max_height_player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the player with the highest height from a given team and store the player's id in the variable max_height_player.",
    "input": "CREATE OR REPLACE PROCEDURE max_height_player(team_in IN VARCHAR2) IS BEGIN SELECT playerID INTO max_height_player FROM (SELECT playerID FROM players WHERE team = team_in ORDER BY height DESC) WHERE ROWNUM <= 1; END;",
    "output": "CREATE PROCEDURE max_height_player(IN team_in STRING) AS VAR max_height_player STRING; max_height_player = (SELECT playerID FROM players WHERE team = team_in ORDER BY height DESC LIMIT 1); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 548,
    "task": "Write a stored procedure to find the total number of ties of a team in a given year and store the result in the variable total_ties.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the total number of ties of a team in a given year and store the result in the variable total_ties.",
    "input": "CREATE OR REPLACE PROCEDURE total_ties_team(team_in IN VARCHAR2, year_in IN INTEGER) IS BEGIN SELECT ties INTO total_ties FROM teams WHERE teamID = team_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE total_ties_team(IN team_in STRING, IN year_in INTEGER) AS VAR total_ties INTEGER; total_ties = (SELECT ties FROM teams WHERE teamID = team_in AND year = year_in); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 549,
    "task": "Write a stored procedure to compute the total penalty minutes of a player during a given year and store the result in the variable total_penaltyMinutes.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to compute the total penalty minutes of a player during a given year and store the result in the variable total_penaltyMinutes.",
    "input": "CREATE OR REPLACE PROCEDURE total_penaltyMinutes_player(playerID_in IN VARCHAR2, year_in IN INTEGER) IS BEGIN SELECT SUM(penaltyMinutes) INTO total_penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE total_penaltyMinutes_player(IN playerID_in STRING, IN year_in INTEGER) AS VAR total_penaltyMinutes INTEGER; total_penaltyMinutes = (SELECT SUM(penaltyMinutes) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 550,
    "task": "Write a stored procedure to find the player from a given team with the most assists in the entire database and store the result in var max_assists_player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the player from a given team with the most assists in the entire database and store the result in var max_assists_player.",
    "input": "CREATE OR REPLACE PROCEDURE max_assists_player(team_in IN VARCHAR2) IS BEGIN SELECT playerID INTO max_assists_player FROM (SELECT playerID FROM scoring WHERE teamID = team_in ORDER BY assists DESC) WHERE ROWNUM <= 1; END;",
    "output": "CREATE PROCEDURE max_assists_player(IN team_in STRING) AS VAR max_assists_player STRING; max_assists_player = (SELECT playerID FROM scoring WHERE teamID = team_in ORDER BY assists DESC LIMIT 1); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 551,
    "task": " Write a stored procedure to compute the winning percentage of a team in a given year and store the result in the variable win_per.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion -  Write a stored procedure to compute the winning percentage of a team in a given year and store the result in the variable win_per.",
    "input": "CREATE OR REPLACE PROCEDURE win_percentage_team(team_in IN VARCHAR2, year_in IN INTEGER) IS BEGIN SELECT games INTO total_games FROM teams WHERE teamID = team_in AND year = year_in; SELECT wins INTO total_wins FROM teams WHERE teamID = team_in AND year = year_in; win_per := total_wins/total_games; END;",
    "output": "CREATE PROCEDURE win_percentage_team(IN team_in STRING, IN year_in INTEGER) AS VAR win_per DECIMAL, total_games INTEGER, total_wins INTEGER; total_games = (SELECT games FROM teams WHERE teamID = team_in AND year = year_in); total_wins = (SELECT wins FROM teams WHERE teamID = team_in AND year = year_in); win_per = total_wins/total_games; THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 552,
    "task": "Write a stored procedure to find the player with the most stints in a given year and store the result in the variable max_stints_player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the player with the most stints in a given year and store the result in the variable max_stints_player.",
    "input": "CREATE OR REPLACE PROCEDURE max_stints_player(year_in IN INTEGER) IS BEGIN SELECT playerID INTO max_stints_player FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY stint DESC) WHERE ROWNUM <= 1; END;",
    "output": "CREATE PROCEDURE max_stints_player(IN year_in INTEGER) AS VAR max_stints_player STRING; max_stints_player = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY stint DESC LIMIT 1); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 553,
    "task": "Write a stored procedure to compute the total goals of a team in a single year and store the result in the variable total_goals.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to compute the total goals of a team in a single year and store the result in the variable total_goals.",
    "input": "CREATE OR REPLACE PROCEDURE total_goals_team(team_in IN VARCHAR2, year_in IN INTEGER) IS BEGIN SELECT SUM(goals) INTO total_goals FROM scoring JOIN teams ON scoring.teamID = teams.teamID WHERE teams.teamID = team_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE total_goals_team(IN team_in STRING, IN year_in INTEGER) AS VAR total_goals INTEGER; total_goals = (SELECT SUM(goals) FROM scoring JOIN teams ON scoring.teamID = teams.teamID WHERE teams.teamID = team_in AND year = year_in); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 554,
    "task": "Write a stored procedure to find all players who were born in a given country and store the total number in the variable total_players.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find all players who were born in a given country and store the total number in the variable total_players.",
    "input": "CREATE OR REPLACE PROCEDURE total_players_country(country_in IN VARCHAR2) IS BEGIN SELECT COUNT(*) INTO total_players FROM players WHERE birthCountry = country_in; END;",
    "output": "CREATE PROCEDURE total_players_country(IN country_in STRING) AS VAR total_players INTEGER; total_players = (SELECT COUNT(*) FROM players WHERE birthCountry = country_in); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 555,
    "task": "Write a stored procedure to find the highest scoring player in a specific year and store the result in the variable max_scoring_player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the highest scoring player in a specific year and store the result in the variable max_scoring_player.",
    "input": "CREATE OR REPLACE PROCEDURE max_scoring_player(year_in IN INTEGER) IS BEGIN SELECT playerID INTO max_scoring_player FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY (goals + assists) DESC) WHERE ROWNUM <= 1; END;",
    "output": "CREATE PROCEDURE max_scoring_player(IN year_in INTEGER) AS VAR max_scoring_player STRING; max_scoring_player = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY (goals + assists) DESC LIMIT 1); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 556,
    "task": "Write a stored procedure to find the sum of gamesWon by a given team in a single year and store the result in the variable total_games_won.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the sum of gamesWon by a given team in a single year and store the result in the variable total_games_won.",
    "input": "CREATE OR REPLACE PROCEDURE total_games_won_team(team_in IN VARCHAR2, year_in IN INTEGER) IS BEGIN SELECT SUM(games) INTO total_games_won FROM teams WHERE teamID = team_in AND year = year_in AND playoff = 'W'; END;",
    "output": "CREATE PROCEDURE total_games_won_team(IN team_in STRING, IN year_in INTEGER) AS VAR total_games_won INTEGER; total_games_won = (SELECT SUM(games) FROM teams WHERE teamID = team_in AND year = year_in AND playoff = 'W'); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 557,
    "task": "Write a stored procedure to get the birth city of a given player and store the result in the variable birth_city.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the birth city of a given player and store the result in the variable birth_city.",
    "input": "CREATE OR REPLACE PROCEDURE birth_city_player(playerID_in IN VARCHAR2) IS BEGIN SELECT birthCity INTO birth_city FROM players WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE birth_city_player(IN playerID_in STRING) AS VAR birth_city STRING; birth_city= (SELECT birthCity FROM players WHERE playerID = playerID_in); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 558,
    "task": "Write a stored procedure to compute the total overtimeLosses of a team in a given year and store the result in the variable total_overtimeLosses.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to compute the total overtimeLosses of a team in a given year and store the result in the variable total_overtimeLosses.",
    "input": "CREATE OR REPLACE PROCEDURE total_overtimeLosses_team(team_in IN VARCHAR2, year_in IN INTEGER) IS BEGIN SELECT overtimeLosses INTO total_overtimeLosses FROM teams WHERE teamID = team_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE total_overtimeLosses_team(IN team_in STRING, IN year_in INTEGER) AS VAR total_overtimeLosses INTEGER; total_overtimeLosses = (SELECT overtimeLosses FROM teams WHERE teamID = team_in AND year = year_in); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 559,
    "task": "Write a stored procedure to find the most experienced player in the entire database (has played the most number of years) and store the result in the var most_experienced_player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the most experienced player in the entire database (has played the most number of years) and store the result in the var most_experienced_player.",
    "input": "CREATE OR REPLACE PROCEDURE most_experienced_player() IS BEGIN SELECT playerID INTO most_experienced_player FROM (SELECT playerID FROM players ORDER BY (lastNHL - firstNHL) DESC) WHERE ROWNUM <= 1; END;",
    "output": "CREATE PROCEDURE most_experienced_player() AS VAR most_experienced_player STRING; most_experienced_player = (SELECT playerID FROM players ORDER BY (lastNHL - firstNHL) DESC LIMIT 1); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 560,
    "task": "Write a stored procedure to find out how much weight the heaviest player in the entire database is packing and store that weight in variable heaviest_player_weight.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find out how much weight the heaviest player in the entire database is packing and store that weight in variable heaviest_player_weight.",
    "input": "CREATE OR REPLACE PROCEDURE heaviest_player_weight() IS BEGIN SELECT MAX(weight) INTO heaviest_player_weight FROM players; END;",
    "output": "CREATE PROCEDURE heaviest_player_weight() AS VAR heaviest_player_weight INTEGER; heaviest_player_weight = (SELECT MAX(weight) FROM players); THROW 'SUCCESS';END_PROCEDURE;"
  },
  {
    "number": 561,
    "task": "How can you create a stored procedure for getting all scores of a player from a specific year in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting all scores of a player from a specific year in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_year_scores(playerId_in IN VARCHAR2, year_in IN INTEGER) IS BEGIN SELECT goals, assists, penaltyMinutes INTO goals, assists, penaltyMinutes FROM scoring WHERE playerID = playerId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_player_year_scores(IN playerId_in STRING, IN year_in INTEGER) AS VAR goals INTEGER, assists INTEGER, penaltyMinutes INTEGER; goals, assists, penaltyMinutes = (SELECT goals, assists, penaltyMinutes FROM scoring WHERE playerID = playerId_in AND year = year_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 562,
    "task": "How can you create a stored procedure for getting team names based on a given conference ID in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting team names based on a given conference ID in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_teams_by_conference(conferenceId_in IN VARCHAR2) IS BEGIN SELECT name INTO teamName FROM teams WHERE conferenceID = conferenceId_in; END;",
    "output": "CREATE PROCEDURE get_teams_by_conference(IN conferenceId_in STRING) AS VAR teamName STRING; teamName = (SELECT name FROM teams WHERE conferenceID = conferenceId_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 563,
    "task": "How can you create a stored procedure for getting player first and last names in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting player first and last names in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_names(playerId_in IN VARCHAR2) IS BEGIN SELECT firstName, lastName INTO firstName, lastName FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE get_player_names(IN playerId_in STRING) AS VAR firstName STRING, lastName STRING; firstName, lastName = (SELECT firstName, lastName FROM players WHERE playerID = playerId_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 564,
    "task": "How can you create a stored procedure for getting the total number of overtime losses of a team in a specific year in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting the total number of overtime losses of a team in a specific year in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_overtime_losses(teamId_in IN VARCHAR2, year_in IN INTEGER) IS BEGIN SELECT overtimeLosses INTO overtimeLosses FROM teams WHERE teamID = teamId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_overtime_losses(IN teamId_in STRING, IN year_in INTEGER) AS VAR overtimeLosses INTEGER; overtimeLosses = (SELECT overtimeLosses FROM teams WHERE teamID = teamId_in AND year = year_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 565,
    "task": "How can you create a stored procedure for getting the total points scored by a player in a particular year in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting the total points scored by a player in a particular year in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_total_score(playerId_in IN VARCHAR2, year_in IN INTEGER) AS goals INTEGER; assists INTEGER; total INTEGER; BEGIN SELECT goals, assists INTO goals, assists FROM scoring WHERE playerID = playerId_in AND year = year_in; total := goals + assists; END;",
    "output": "CREATE PROCEDURE get_total_score(IN playerId_in STRING, IN year_in INTEGER) AS VAR goals INTEGER, assists INTEGER; goals, assists = (SELECT goals, assists FROM scoring WHERE playerID = playerId_in AND year = year_in);  VAR total INTEGER; total = goals + assists;  THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 566,
    "task": "How can you create a stored procedure for getting the total assists of a player from a specific year in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting the total assists of a player from a specific year in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_year_assists(playerId_in IN VARCHAR2, year_in IN INTEGER) AS assists INTEGER; BEGIN SELECT assists INTO assists FROM scoring WHERE playerID = playerId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_player_year_assists(IN playerId_in STRING, IN year_in INTEGER) AS VAR assists INTEGER; assists = (SELECT assists FROM scoring WHERE playerID = playerId_in AND year = year_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 567,
    "task": "How can you create a stored procedure for getting the total penalty minutes of a player from a specific year in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting the total penalty minutes of a player from a specific year in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_year_penalty(playerId_in IN VARCHAR2, year_in IN INTEGER) AS penaltyMinutes INTEGER; BEGIN SELECT penaltyMinutes INTO penaltyMinutes FROM scoring WHERE playerID = playerId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_player_year_penalty(IN playerId_in STRING, IN year_in INTEGER) AS VAR penaltyMinutes INTEGER; penaltyMinutes = (SELECT penaltyMinutes FROM scoring WHERE playerID = playerId_in AND year = year_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 568,
    "task": "How can you create a stored procedure for getting the position of a player in a specific team in a specific year in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting the position of a player in a specific team in a specific year in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_position_year(playerId_in IN VARCHAR2, teamId_in IN VARCHAR2, year_in IN INTEGER) AS position VARCHAR2(50); BEGIN SELECT position INTO position FROM scoring WHERE playerID = playerId_in AND teamID = teamId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_player_position_year(IN playerId_in STRING, IN teamId_in STRING, IN year_in INTEGER) AS VAR position STRING; position = (SELECT position FROM scoring WHERE playerID = playerId_in AND teamID = teamId_in AND year = year_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 569,
    "task": "How can you create a stored procedure for getting the rank of a team in a specific year in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting the rank of a team in a specific year in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_rank(teamId_in IN VARCHAR2, year_in IN INTEGER) AS rank INTEGER; BEGIN SELECT rank INTO rank FROM teams WHERE teamID = teamId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_team_rank(IN teamId_in STRING, IN year_in INTEGER) AS VAR rank INTEGER; rank = (SELECT rank FROM teams WHERE teamID = teamId_in AND year = year_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 570,
    "task": "How can you create a stored procedure for getting the birth place of a player in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting the birth place of a player in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birth_place(playerId_in IN VARCHAR2) AS birthCountry VARCHAR2(100); birthState VARCHAR2(100); birthCity VARCHAR2(100); BEGIN SELECT birthCountry, birthState, birthCity INTO birthCountry, birthState, birthCity FROM players WHERE playerID = playerId_in; END;",
    "output": "CREATE PROCEDURE get_player_birth_place(IN playerId_in STRING) AS VAR birthCountry STRING, birthState STRING, birthCity STRING; birthCountry, birthState, birthCity = (SELECT birthCountry, birthState, birthCity FROM players WHERE playerID = playerId_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 571,
    "task": "How can you create a stored procedure for getting the games played by a player in a specific team in a specific year in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting the games played by a player in a specific team in a specific year in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_games_team_year(playerId_in IN VARCHAR2, teamId_in IN VARCHAR2, year_in IN INTEGER) AS gamesPlayed INTEGER; BEGIN SELECT gamesPlayed INTO gamesPlayed FROM scoring WHERE playerID = playerId_in AND teamID = teamId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_player_games_team_year(IN playerId_in STRING, IN teamId_in STRING, IN year_in INTEGER) AS VAR gamesPlayed INTEGER; gamesPlayed = (SELECT gamesPlayed FROM scoring WHERE playerID = playerId_in AND teamID = teamId_in AND year = year_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 572,
    "task": "How can you create a stored procedure for getting the team Id in which a player played in a specific year in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a stored procedure for getting the team Id in which a player played in a specific year in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_team_year(playerId_in IN VARCHAR2, year_in IN INTEGER) AS teamID VARCHAR2(100); BEGIN SELECT teamID INTO teamID FROM scoring WHERE playerID = playerId_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE get_player_team_year(IN playerId_in STRING, IN year_in INTEGER) AS VAR teamID STRING; teamID = (SELECT teamID FROM scoring WHERE playerID = playerId_in AND year = year_in); THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 573,
    "task": "Write a procedure to update player's weight.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to update player's weight.",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerWeight_in(playerID_in IN VARCHAR2, weight_in IN INTEGER) AS BEGIN UPDATE players SET weight = weight_in WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE updatePlayerWeight_in(IN playerID_in STRING, IN weight_in INTEGER) AS UPDATE players SET weight = weight_in WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 574,
    "task": "Write a procedure to delete entries in scoring table for a given year and stint.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to delete entries in scoring table for a given year and stint.",
    "input": "CREATE OR REPLACE PROCEDURE deleteScores_forYear_andStint_in(year_in IN INTEGER, stint_in IN INTEGER) AS BEGIN DELETE FROM scoring WHERE year = year_in AND stint = stint_in; END;",
    "output": "CREATE PROCEDURE deleteScores_forYear_andStint_in(IN year_in INTEGER, IN stint_in INTEGER) AS DELETE from scoring WHERE year = year_in AND stint = stint_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 575,
    "task": "Write a stored procedure to update player's first NHL game year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to update player's first NHL game year.",
    "input": "CREATE OR REPLACE PROCEDURE updateFirstNHL_in(playerID_in IN VARCHAR2, firstNHL_in IN INTEGER) AS BEGIN UPDATE players SET firstNHL = firstNHL_in WHERE playerID = playerID_in; END;",
    "output": "CREATE PROCEDURE updateFirstNHL_in(IN playerID_in STRING, IN firstNHL_in INTEGER) AS UPDATE players SET firstNHL = firstNHL_in WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 576,
    "task": "Create a stored procedure to increment game wins for a team for a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to increment game wins for a team for a given year.",
    "input": "CREATE OR REPLACE PROCEDURE incrementWins_forTeam_inYear_in(teamID_in IN VARCHAR2, year_in IN INTEGER) AS BEGIN UPDATE teams SET wins = wins + 1 WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE incrementWins_forTeam_inYear_in(IN teamID_in STRING, IN year_in INTEGER) AS UPDATE teams SET wins = wins + 1 WHERE teamID = teamID_in AND year = year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 577,
    "task": "Write a stored procedure that modifies a scoring entry for a player",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that modifies a scoring entry for a player",
    "input": "CREATE OR REPLACE PROCEDURE modifyScore_forPlayer_in(playerID_in IN VARCHAR2, year_in IN INTEGER, stint_in IN INTEGER, teamID_in IN VARCHAR2, position_in IN VARCHAR2, gamesPlayed_in IN INTEGER, goals_in IN INTEGER, assists_in IN INTEGER, penaltyMinutes_in IN INTEGER) AS BEGIN UPDATE scoring SET position = position_in, gamesPlayed = gamesPlayed_in, goals = goals_in, assists = assists_in, penaltyMinutes = penaltyMinutes_in WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in; END;",
    "output": "CREATE PROCEDURE modifyScore_forPlayer_in(IN playerID_in STRING, IN year_in INTEGER, IN stint_in INTEGER, IN teamID_in STRING, IN position_in STRING, IN gamesPlayed_in INTEGER, IN goals_in INTEGER, IN assists_in INTEGER, IN penaltyMinutes_in INTEGER) AS UPDATE scoring SET position = position_in, gamesPlayed = gamesPlayed_in, goals = goals_in, assists = assists_in, penaltyMinutes = penaltyMinutes_in WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 578,
    "task": "What's a Stored Procedure in NuoDB that captures a player based on their first name and returns their height and weight?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - What's a Stored Procedure in NuoDB that captures a player based on their first name and returns their height and weight?",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerHeightWeight_byFirstName(firstName IN VARCHAR2) AS playerHeight INTEGER; playerWeight INTEGER; BEGIN SELECT height, weight INTO playerHeight, playerWeight FROM players WHERE firstName = firstName_in; DBMS_OUTPUT.PUT_LINE('Player height: ' || playerHeight || ' Player weight: ' || playerWeight); END;",
    "output": "CREATE PROCEDURE getPlayerHeightWeight_byFirstName(in firstName String) AS VAR playerHeight INTEGER, playerWeight INTEGER; playerHeight, playerWeight = (SELECT height, weight FROM players WHERE firstName = firstName_in); THROW 'Player height: '||playerHeight||' Player weight: '||playerWeight; END_PROCEDURE;"
  },
  {
    "number": 579,
    "task": "Create a stored procedure that returns the total goals by a player in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns the total goals by a player in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE totalGoals_in_yr(playerID_in IN VARCHAR2, year_in IN INTEGER) AS totalGoals INTEGER; BEGIN SELECT SUM(goals) INTO totalGoals FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total Goals: ' || totalGoals); END;",
    "output": "CREATE PROCEDURE totalGoals_in_yr(in playerID_in String, in year_in Integer) AS VAR totalGoals INTEGER; totalGoals = (SELECT SUM(goals) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total Goals: '||totalGoals; END_PROCEDURE;"
  },
  {
    "number": 580,
    "task": "Write a stored procedure that retrieves the total games played by a team in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that retrieves the total games played by a team in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE totalGames_by_team_in_year(teamID_in IN VARCHAR2, year_in IN INTEGER) AS totalGames INTEGER; BEGIN SELECT games INTO totalGames FROM teams WHERE teamID = teamID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total Games: ' || totalGames); END;",
    "output": "CREATE PROCEDURE totalGames_by_team_in_year(in teamID_in String, in year_in Integer) AS VAR totalGames INTEGER; totalGames = (SELECT games FROM teams WHERE teamID = teamID_in AND year = year_in); THROW 'Total Games: '||totalGames; END_PROCEDURE;"
  },
  {
    "number": 581,
    "task": "Write a stored procedure that returns teams and their ranking of a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that returns teams and their ranking of a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE getRanking_by_year(year_in IN INTEGER) AS team VARCHAR2(255); rank INTEGER; BEGIN SELECT teamID, rank INTO team, rank FROM teams WHERE year = year_in; DBMS_OUTPUT.PUT_LINE('Team: ' || team || ' Rank: ' || rank); END;",
    "output": "CREATE PROCEDURE getRanking_by_year(in year_in Integer) AS VAR team String, rank INTEGER; team, rank = (SELECT teamID, rank FROM teams WHERE year = year_in); THROW 'Team: '||team||' Rank: '||rank; END_PROCEDURE;"
  },
  {
    "number": 582,
    "task": "Write a stored procedure to get the full name of a player given their playerID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the full name of a player given their playerID?",
    "input": "CREATE OR REPLACE PROCEDURE getFullName_by_playerID(playerID_in IN VARCHAR2) AS firstName VARCHAR2(255); lastName VARCHAR2(255); BEGIN SELECT firstName, lastName INTO firstName, lastName FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Full Name: ' || firstName || ' ' || lastName); END;",
    "output": "CREATE PROCEDURE getFullName_by_playerID(in playerID_in String) AS VAR firstName String, lastName String; firstName, lastName = (SELECT firstName, lastName FROM players WHERE playerID = playerID_in); THROW 'Full Name: '||firstName||' '||lastName; END_PROCEDURE;"
  },
  {
    "number": 583,
    "task": "How would you create a stored procedure to return the total number of players in a specific team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How would you create a stored procedure to return the total number of players in a specific team?",
    "input": "CREATE OR REPLACE PROCEDURE total_players_in_team(team_in IN VARCHAR2) AS total_count INTEGER; BEGIN SELECT COUNT(*) INTO total_count FROM Hockey WHERE Team = team_in; DBMS_OUTPUT.PUT_LINE('Total players in team: ' || total_count); END;",
    "output": "CREATE PROCEDURE total_players_in_team(team_in String) AS VAR total_count Integer = (SELECT COUNT(*) FROM Hockey WHERE Team = team_in); THROW 'Total players in team: ' || total_count; END_PROCEDURE;"
  },
  {
    "number": 584,
    "task": "How would you create a stored procedure to change the position of a specific player?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How would you create a stored procedure to change the position of a specific player?",
    "input": "CREATE OR REPLACE PROCEDURE change_player_position(id_in IN INTEGER, position_in IN VARCHAR2) AS BEGIN UPDATE Hockey SET Position = position_in WHERE Id = id_in; END;",
    "output": "CREATE PROCEDURE change_player_position(id_in BIGINT, position_in String) AS UPDATE Hockey SET Position = position_in WHERE Id = id_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 585,
    "task": "Create a stored procedure that calculates the average height of players in a specific team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the average height of players in a specific team.",
    "input": "CREATE OR REPLACE PROCEDURE average_height_of_players(team_in IN VARCHAR2) AS avg_height DECIMAL; BEGIN SELECT AVG(height) INTO avg_height FROM players WHERE teamID = team_in; DBMS_OUTPUT.PUT_LINE('Average height: ' || avg_height); END;",
    "output": "CREATE PROCEDURE average_height_of_players(team_in String) AS VAR avg_height Decimal = (SELECT AVG(height) FROM players WHERE teamID = team_in); THROW 'Average height: ' || avg_height; END_PROCEDURE;"
  },
  {
    "number": 586,
    "task": "Create a stored procedure to get the latest year a player was active in the NHL.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the latest year a player was active in the NHL.",
    "input": "CREATE OR REPLACE PROCEDURE latest_active_year(playerid_in IN VARCHAR2) AS active_year INTEGER; BEGIN SELECT MAX(year) INTO active_year FROM scoring WHERE playerID = playerid_in; DBMS_OUTPUT.PUT_LINE('Latest active year: ' || active_year); END;",
    "output": "CREATE PROCEDURE latest_active_year(playerid_in varchar(10)) AS VAR active_year Integer = (SELECT MAX(year) FROM scoring WHERE playerID = playerid_in); THROW 'Latest active year: ' || active_year; END_PROCEDURE;"
  },
  {
    "number": 587,
    "task": "How would you create a stored procedure to get the total number of wins by a team in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How would you create a stored procedure to get the total number of wins by a team in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE total_team_wins(year_in IN INTEGER, teamID_in IN VARCHAR2) AS total_wins INTEGER; BEGIN SELECT wins INTO total_wins FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Total wins: ' || total_wins); END;",
    "output": "CREATE PROCEDURE total_team_wins(year_in integer, teamID_in varchar(3)) AS VAR total_wins Integer = (SELECT wins FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'Total wins: ' || total_wins; END_PROCEDURE;"
  },
  {
    "number": 588,
    "task": "Create a stored procedure that fetches the highest scoring player in the NHL for a particular year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that fetches the highest scoring player in the NHL for a particular year.",
    "input": "CREATE OR REPLACE PROCEDURE highest_scoring_player(year_in IN INTEGER) AS player_id VARCHAR2(10); BEGIN SELECT playerID INTO player_id FROM (SELECT playerID, goals FROM scoring WHERE year = year_in ORDER BY goals DESC) WHERE ROWNUM = 1; DBMS_OUTPUT.PUT_LINE('Highest Scoring Player ID: ' || player_id); END;",
    "output": "CREATE PROCEDURE highest_scoring_player(year_in integer) AS VAR player_id varchar(10) = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC LIMIT 1); THROW 'Highest Scoring Player ID: ' || player_id; END_PROCEDURE;"
  },
  {
    "number": 589,
    "task": "How would you create a stored procedure to calculate the total teams in a particular year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How would you create a stored procedure to calculate the total teams in a particular year?",
    "input": "CREATE OR REPLACE PROCEDURE total_teams(year_in IN INTEGER) AS team_count INTEGER; BEGIN SELECT COUNT(DISTINCT teamID) INTO team_count FROM teams WHERE year = year_in; DBMS_OUTPUT.PUT_LINE('Total teams for year ' || year_in || ' : ' || team_count); END;",
    "output": "CREATE PROCEDURE total_teams(year_in integer) AS VAR team_count integer = (SELECT COUNT(DISTINCT teamID) FROM teams WHERE year = year_in); THROW 'Total teams for year ' || year_in || ' : ' || team_count; END_PROCEDURE;"
  },
  {
    "number": 590,
    "task": "How can you return the player with the most penalty minutes in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you return the player with the most penalty minutes in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE most_penalties_year(year_in IN INTEGER) AS player_id VARCHAR2(10); BEGIN SELECT playerID INTO player_id FROM (SELECT playerID, penaltyMinutes FROM scoring WHERE year = year_in ORDER BY penaltyMinutes DESC) WHERE ROWNUM = 1; DBMS_OUTPUT.PUT_LINE('Player with most penalties: ' || player_id); END;",
    "output": "CREATE PROCEDURE most_penalties_year(year_in integer) AS VAR player_id varchar(10) = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY penaltyMinutes DESC LIMIT 1); THROW 'Player with most penalties: ' || player_id; END_PROCEDURE;"
  },
  {
    "number": 591,
    "task": "How would you create a stored procedure to get the birth state of a specific player?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How would you create a stored procedure to get the birth state of a specific player?",
    "input": "CREATE OR REPLACE PROCEDURE get_birth_state(playerid_in IN VARCHAR2) AS birth_state VARCHAR2(50); BEGIN SELECT birthState INTO birth_state FROM players WHERE playerID = playerid_in; DBMS_OUTPUT.PUT_LINE('Birth state: ' || birth_state); END;",
    "output": "CREATE PROCEDURE get_birth_state(playerid_in varchar(10)) AS VAR birth_state String = (SELECT birthState FROM players WHERE playerID = playerid_in); THROW 'Birth state: ' || birth_state; END_PROCEDURE;"
  },
  {
    "number": 592,
    "task": "How would you create a stored procedure to update the division of a specific team in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How would you create a stored procedure to update the division of a specific team in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE update_team_division(year_in IN INTEGER, teamid_in IN VARCHAR2, division_in IN VARCHAR2) IS BEGIN UPDATE teams SET divisionID = division_in WHERE year = year_in AND teamID = teamid_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE update_team_division(year_in integer, teamid_in varchar(3), division_in varchar(2)) AS UPDATE teams SET divisionID = division_in WHERE year = year_in AND teamID = teamid_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 593,
    "task": "How would you create a stored procedure to add a new player to the database?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How would you create a stored procedure to add a new player to the database?",
    "input": "CREATE OR REPLACE PROCEDURE add_new_player(playerid_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2, height_in IN INTEGER, weight_in IN INTEGER, firstNHL_in IN INTEGER, lastNHL_in IN INTEGER, position_in IN VARCHAR2, birthYear_in IN INTEGER, birthMon_in IN INTEGER, birthDay_in IN INTEGER, birthCountry_in IN VARCHAR2, birthState_in IN VARCHAR2, birthCity_in IN VARCHAR2) IS BEGIN INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES (playerid_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE add_new_player(playerid_in varchar(10), firstName_in varchar(32), lastName_in varchar(32), height_in integer, weight_in integer, firstNHL_in integer, lastNHL_in integer, position_in varchar(8), birthYear_in integer, birthMon_in integer, birthDay_in integer, birthCountry_in varchar(32), birthState_in varchar(32), birthCity_in varchar(32)) AS INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES (playerid_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 594,
    "task": "How would you create a stored procedure to return all players from a specific birth city?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How would you create a stored procedure to return all players from a specific birth city?",
    "input": "CREATE OR REPLACE PROCEDURE get_players_from_city(birthCity_in IN VARCHAR2) IS player_ids VARCHAR2(4000); BEGIN SELECT LISTAGG(playerID, ',') WITHIN GROUP (ORDER BY playerID) INTO player_ids FROM players WHERE birthCity = birthCity_in; DBMS_OUTPUT.PUT_LINE('Players from ' || birthCity_in || ' : ' || player_ids); END;",
    "output": "CREATE PROCEDURE get_players_from_city(birthCity_in varchar(32)) AS VAR player_ids String = (SELECT GROUP_CONCAT(playerID) FROM players WHERE birthCity = birthCity_in); THROW 'Players from ' || birthCity_in || ' : ' || player_ids; END_PROCEDURE;"
  },
  {
    "number": 595,
    "task": "How would you create a stored procedure to return the team with the most losses in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How would you create a stored procedure to return the team with the most losses in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE team_with_most_losses(year_in IN INTEGER) AS team_id VARCHAR2(3); BEGIN SELECT teamID INTO team_id FROM (SELECT teamID, losses FROM teams WHERE year = year_in ORDER BY losses DESC) WHERE ROWNUM = 1; DBMS_OUTPUT.PUT_LINE('Team with most losses: ' || team_id); END;",
    "output": "CREATE PROCEDURE team_with_most_losses(year_in integer) AS VAR team_id varchar(3) = (SELECT teamID FROM teams WHERE year = year_in ORDER BY losses DESC LIMIT 1); THROW 'Team with most losses: ' || team_id; END_PROCEDURE;"
  },
  {
    "number": 596,
    "task": "Create a stored procedure to return the player with the least games played in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return the player with the least games played in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE player_least_games(year_in IN INTEGER) AS player_id VARCHAR2(10); BEGIN SELECT playerID INTO player_id FROM (SELECT playerID, gamesPlayed FROM scoring WHERE year = year_in ORDER BY gamesPlayed ASC) WHERE ROWNUM = 1; DBMS_OUTPUT.PUT_LINE('Player with least games: ' || player_id); END;",
    "output": "CREATE PROCEDURE player_least_games(year_in integer) AS VAR player_id varchar(10) = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY gamesPlayed ASC LIMIT 1); THROW 'Player with least games: ' || player_id; END_PROCEDURE;"
  },
  {
    "number": 597,
    "task": "Create a NuoDB stored procedure to find the player name and position given the player number in the Hockey table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB stored procedure to find the player name and position given the player number in the Hockey table.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerNameAndPosition(inNumber IN INTEGER) AS playerName VARCHAR2(50); playerPosition VARCHAR2(50); BEGIN SELECT Name, Position INTO playerName, playerPosition FROM Hockey WHERE Number = inNumber; DBMS_OUTPUT.PUT_LINE(playerName || ' ' || playerPosition); END;",
    "output": "CREATE PROCEDURE getPlayerNameAndPosition(inNumber INTEGER) AS VAR playerName STRING, playerPosition STRING; playerName, playerPosition = (SELECT Name, Position FROM Hockey WHERE Number = inNumber); THROW playerName || ' ' || playerPosition; END_PROCEDURE;"
  },
  {
    "number": 598,
    "task": "Design a NuoDB stored procedure to determine how many stints a player had in a given year using the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a NuoDB stored procedure to determine how many stints a player had in a given year using the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE getStintCount(playerIn IN VARCHAR2, yearIn IN INTEGER) AS stintCount INTEGER; BEGIN SELECT COUNT(stint) INTO stintCount FROM scoring WHERE playerID = playerIn AND year = yearIn; DBMS_OUTPUT.PUT_LINE(TO_CHAR(stintCount)); END;",
    "output": "CREATE PROCEDURE getStintCount(playerIn STRING, yearIn INT) AS VAR stintCount INT; stintCount = (SELECT COUNT(stint) FROM scoring WHERE playerID = playerIn AND year = yearIn); THROW convert(stintCount); END_PROCEDURE;"
  },
  {
    "number": 599,
    "task": "Devise a NuoDB stored procedure to calculate the total goals scored by a team in a year from the scoring and teams tables.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Devise a NuoDB stored procedure to calculate the total goals scored by a team in a year from the scoring and teams tables.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamGoalsInYear(teamIdIn IN VARCHAR2, yearIn IN INTEGER) AS teamGoals INTEGER; BEGIN SELECT SUM(goals) INTO teamGoals FROM scoring WHERE teamID = teamIdIn AND year = yearIn; DBMS_OUTPUT.PUT_LINE(TO_CHAR(teamGoals)); END;",
    "output": "CREATE PROCEDURE getTeamGoalsInYear(teamIdIn STRING, yearIn INT) AS VAR teamGoals INT; teamGoals = (SELECT SUM(goals) FROM scoring WHERE teamID = teamIdIn AND year = yearIn); THROW convert(teamGoals); END_PROCEDURE;"
  },
  {
    "number": 600,
    "task": "Devise a NuoDB stored procedure to compute the average height of players from the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Devise a NuoDB stored procedure to compute the average height of players from the players table.",
    "input": "CREATE OR REPLACE PROCEDURE getAveragePlayerHeight AS averageHeight NUMBER; BEGIN SELECT AVG(height) INTO averageHeight FROM players; DBMS_OUTPUT.PUT_LINE(TO_CHAR(averageHeight)); END;",
    "output": "CREATE PROCEDURE getAveragePlayerHeight() AS VAR averageHeight FLOAT; averageHeight = (SELECT AVG(height) FROM players); THROW convert(averageHeight); END_PROCEDURE;"
  },
  {
    "number": 601,
    "task": "Design a NuoDB stored procedure to count the number of players born in a specific country from the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a NuoDB stored procedure to count the number of players born in a specific country from the players table.",
    "input": "CREATE OR REPLACE PROCEDURE countPlayersBirthCountry(countryIn IN VARCHAR2) AS playerCount INTEGER; BEGIN SELECT COUNT(*) INTO playerCount FROM players WHERE birthCountry = countryIn; DBMS_OUTPUT.PUT_LINE(TO_CHAR(playerCount)); END;",
    "output": "CREATE PROCEDURE countPlayersBirthCountry(countryIn STRING) AS VAR playerCount INT; playerCount = (SELECT COUNT(*) FROM players WHERE birthCountry = countryIn); THROW convert(playerCount); END_PROCEDURE;"
  },
  {
    "number": 602,
    "task": "Design a NuoDB stored procedure to retrieve the total games won by a team in a year from the teams table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Design a NuoDB stored procedure to retrieve the total games won by a team in a year from the teams table.",
    "input": "CREATE OR REPLACE PROCEDURE getTotalWins(teamIdIn IN VARCHAR2, yearIn IN INTEGER) AS winCount INTEGER; BEGIN SELECT wins INTO winCount FROM teams WHERE teamID = teamIdIn AND year = yearIn; DBMS_OUTPUT.PUT_LINE(TO_CHAR(winCount)); END;",
    "output": "CREATE PROCEDURE getTotalWins(teamIdIn STRING, yearIn INT) AS VAR winCount INT; winCount = (SELECT wins FROM teams WHERE teamID = teamIdIn AND year = yearIn); THROW convert(winCount); END_PROCEDURE;"
  },
  {
    "number": 603,
    "task": "Devise a NuoDB stored procedure to calculate the total number of ties by a team in a given year using the teams table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Devise a NuoDB stored procedure to calculate the total number of ties by a team in a given year using the teams table.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamTieCount(teamIdIn IN VARCHAR2, yearIn IN INTEGER) AS tieCount INTEGER; BEGIN SELECT ties INTO tieCount FROM teams WHERE teamID = teamIdIn AND year = yearIn; DBMS_OUTPUT.PUT_LINE(TO_CHAR(tieCount)); END;",
    "output": "CREATE PROCEDURE getTeamTieCount(teamIdIn STRING, yearIn INT) AS VAR tieCount INT; tieCount = (SELECT ties FROM teams WHERE teamID = teamIdIn AND year = yearIn); THROW convert(tieCount); END_PROCEDURE;"
  },
  {
    "number": 604,
    "task": "Devise a NuoDB stored procedure to retrieve the highest number of goals scored by a player in a year from the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Devise a NuoDB stored procedure to retrieve the highest number of goals scored by a player in a year from the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE getMaxGoals(yearIn IN INTEGER) AS maxGoals INTEGER; BEGIN SELECT MAX(goals) INTO maxGoals FROM scoring WHERE year = yearIn; DBMS_OUTPUT.PUT_LINE(TO_CHAR(maxGoals)); END;",
    "output": "CREATE PROCEDURE getMaxGoals(yearIn INT) AS VAR maxGoals INT; maxGoals = (SELECT MAX(goals) FROM scoring WHERE year = yearIn); THROW convert(maxGoals); END_PROCEDURE;"
  },
  {
    "number": 605,
    "task": "Write a NuoDB stored procedure that provides the total weight of all players from the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB stored procedure that provides the total weight of all players from the players table.",
    "input": "CREATE OR REPLACE PROCEDURE getTotalPlayerWeight AS totalWeight INTEGER; BEGIN SELECT SUM(weight) INTO totalWeight FROM players; DBMS_OUTPUT.PUT_LINE(TO_CHAR(totalWeight)); END;",
    "output": "CREATE PROCEDURE getTotalPlayerWeight() AS VAR totalWeight INT; totalWeight = (SELECT SUM(weight) FROM players); THROW convert(totalWeight); END_PROCEDURE;"
  },
  {
    "number": 606,
    "task": "Generate a NuoDB stored procedure to determine the total number of players from a particular birth country in the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a NuoDB stored procedure to determine the total number of players from a particular birth country in the players table.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerCountFromCountry(countryIn IN VARCHAR2) AS playerCount INTEGER; BEGIN SELECT COUNT(*) INTO playerCount FROM players WHERE birthCountry = countryIn; DBMS_OUTPUT.PUT_LINE(TO_CHAR(playerCount)); END;",
    "output": "CREATE PROCEDURE getPlayerCountFromCountry(countryIn STRING) AS VAR playerCount INT; playerCount = (SELECT COUNT(*) FROM players WHERE birthCountry = countryIn); THROW convert(playerCount); END_PROCEDURE;"
  },
  {
    "number": 607,
    "task": "Compose a NuoDB stored procedure to calculate the total number of games played by a player from the scoring table given the player ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Compose a NuoDB stored procedure to calculate the total number of games played by a player from the scoring table given the player ID.",
    "input": "CREATE OR REPLACE PROCEDURE getTotalPlayerGames(playerIn IN VARCHAR2) AS gamesCount INTEGER; BEGIN SELECT SUM(gamesPlayed) INTO gamesCount FROM scoring WHERE playerID = playerIn; DBMS_OUTPUT.PUT_LINE(TO_CHAR(gamesCount)); END;",
    "output": "CREATE PROCEDURE getTotalPlayerGames(playerIn STRING) AS VAR gamesCount INT; gamesCount = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = playerIn); THROW convert(gamesCount); END_PROCEDURE;"
  },
  {
    "number": 608,
    "task": "Generate a NuoDB stored procedure to calculate the average number of goals scored by a player from the scoring table given the player ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a NuoDB stored procedure to calculate the average number of goals scored by a player from the scoring table given the player ID.",
    "input": "CREATE OR REPLACE PROCEDURE getAveragePlayerGoals(playerIn IN VARCHAR2) AS averageGoals NUMBER; BEGIN SELECT AVG(goals) INTO averageGoals FROM scoring WHERE playerID = playerIn; DBMS_OUTPUT.PUT_LINE(TO_CHAR(averageGoals)); END;",
    "output": "CREATE PROCEDURE getAveragePlayerGoals(playerIn STRING) AS VAR averageGoals FLOAT; averageGoals = (SELECT AVG(goals) FROM scoring WHERE playerID = playerIn); THROW convert(averageGoals); END_PROCEDURE;"
  },
  {
    "number": 609,
    "task": "Compose a NuoDB stored procedure to determine the birth city of a player from the players table given the player ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Compose a NuoDB stored procedure to determine the birth city of a player from the players table given the player ID.",
    "input": "",
    "output": "CREATE PROCEDURE getPlayerBirthCity(playerIdIn STRING) AS VAR playerBirthCity STRING; playerBirthCity = (SELECT birthCity FROM players WHERE playerID = playerIdIn); THROW playerBirthCity; END_PROCEDURE;"
  },
  {
    "number": 610,
    "task": "How to create a stored procedure to find the heaviest player in a hockey team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to find the heaviest player in a hockey team?",
    "input": "",
    "output": "CREATE PROCEDURE get_heaviest_player(IN team_in String) AS VAR max_weight INTEGER; VAR player_id STRING = (SELECT playerID FROM players WHERE weight = max_weight AND team = team_in); THROW player_id; END_PROCEDURE;"
  },
  {
    "number": 611,
    "task": "How can you get the count of players in a specific hockey team, using a stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you get the count of players in a specific hockey team, using a stored procedure?",
    "input": "",
    "output": "CREATE PROCEDURE count_players(IN team_id_in String) AS VAR player_count INTEGER = (SELECT COUNT(*) FROM Hockey WHERE Team = team_id_in); THROW player_count; END_PROCEDURE;"
  },
  {
    "number": 612,
    "task": "Write a stored procedure to find out the total number of games played by a team in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find out the total number of games played by a team in a given year.",
    "input": "",
    "output": "CREATE PROCEDURE find_games_played(IN team_id_in STRING, IN year_in INTEGER) AS VAR total_games INTEGER = (SELECT SUM(games) FROM teams WHERE teamID = team_id_in AND year = year_in); THROW total_games; END_PROCEDURE;"
  },
  {
    "number": 613,
    "task": "Create a stored procedure to get the most common position in a team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the most common position in a team.",
    "input": "",
    "output": "CREATE PROCEDURE get_common_position(IN team_in STRING) AS VAR common_position STRING = (SELECT Position, COUNT(*) as count FROM Hockey WHERE Team = team_in GROUP BY Position ORDER BY count DESC LIMIT 1); THROW common_position; END_PROCEDURE;"
  },
  {
    "number": 614,
    "task": "How to create a stored procedure that returns the player with the least penalty minutes in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the player with the least penalty minutes in a given year?",
    "input": "",
    "output": "CREATE PROCEDURE find_least_penalties(IN year_in INTEGER) AS VAR player_id STRING = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY penaltyMinutes ASC LIMIT 1); THROW player_id; END_PROCEDURE;"
  },
  {
    "number": 615,
    "task": "How can you get the youngest player in a specific hockey team, using a stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you get the youngest player in a specific hockey team, using a stored procedure?",
    "input": "",
    "output": "CREATE PROCEDURE youngest_player(IN team_id_in String) AS VAR youngest INTEGER = (SELECT MIN(birthYear) FROM players WHERE team = team_id_in); THROW youngest; END_PROCEDURE;"
  },
  {
    "number": 616,
    "task": "How to create a stored procedure to get the player who has played the most games in a specific team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to get the player who has played the most games in a specific team?",
    "input": "",
    "output": "CREATE PROCEDURE most_games(IN team_in String) AS VAR player_id STRING = (SELECT playerID FROM scoring WHERE teamID = team_in GROUP BY playerID ORDER BY SUM(gamesPlayed) DESC LIMIT 1); THROW player_id; END_PROCEDURE;"
  },
  {
    "number": 617,
    "task": "Write a stored procedure to find out the player with the fewest goals in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find out the player with the fewest goals in a given year.",
    "input": "",
    "output": "CREATE PROCEDURE find_least_scorer(IN year_in INTEGER) AS VAR least_scorer_id STRING = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals ASC LIMIT 1); THROW least_scorer_id; END_PROCEDURE;"
  },
  {
    "number": 618,
    "task": "How can you get the lightest player in a specific hockey team, using a stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you get the lightest player in a specific hockey team, using a stored procedure?",
    "input": "",
    "output": "CREATE PROCEDURE get_lightest_player(IN team_in String) AS VAR min_weight INTEGER; VAR player_id STRING = (SELECT playerID FROM players WHERE weight = min_weight AND team = team_in); THROW player_id; END_PROCEDURE;"
  },
  {
    "number": 619,
    "task": "How to create a stored procedure that returns the player with the most penalty minutes in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the player with the most penalty minutes in a given year?",
    "input": "",
    "output": "CREATE PROCEDURE find_most_penalties(IN year_in INTEGER) AS VAR player_id STRING = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY penaltyMinutes DESC LIMIT 1); THROW player_id; END_PROCEDURE;"
  },
  {
    "number": 620,
    "task": "How to create a stored procedure to get the total number of losses for a specific team in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to get the total number of losses for a specific team in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE total_losses(team_in IN VARCHAR2, year_in IN INTEGER) AS total_losses INTEGER; BEGIN SELECT losses INTO total_losses FROM teams WHERE teamID = team_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(TO_CHAR(total_losses)); END;",
    "output": "CREATE PROCEDURE total_losses(IN team_in String, IN year_in INTEGER) AS VAR total_losses INTEGER = (SELECT losses FROM teams WHERE teamID = team_in AND year = year_in); THROW total_losses; END_PROCEDURE;"
  },
  {
    "number": 621,
    "task": "Write a stored procedure to find out the total number of wins for a team in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find out the total number of wins for a team in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE total_wins(team_id_in IN VARCHAR2, year_in IN INTEGER) AS total_wins INTEGER; BEGIN SELECT wins INTO total_wins FROM teams WHERE teamID = team_id_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(TO_CHAR(total_wins)); END;",
    "output": "CREATE PROCEDURE total_wins(IN team_id_in STRING, IN year_in INTEGER) AS VAR total_wins INTEGER = (SELECT wins FROM teams WHERE teamID = team_id_in AND year = year_in); THROW total_wins; END_PROCEDURE;"
  },
  {
    "number": 622,
    "task": "Create a stored procedure that gets the total number of ties for a specific team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that gets the total number of ties for a specific team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE total_ties(team_in IN VARCHAR2, year_in IN INTEGER) AS total_ties INTEGER; BEGIN SELECT ties INTO total_ties FROM teams WHERE teamID = team_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(TO_CHAR(total_ties)); END;",
    "output": "CREATE PROCEDURE total_ties(IN team_in String, IN year_in INTEGER) AS VAR total_ties INTEGER = (SELECT ties FROM teams WHERE teamID = team_in AND year = year_in); THROW total_ties; END_PROCEDURE;"
  },
  {
    "number": 623,
    "task": "Write a stored procedure to get information about a player from the 'players' table using their 'playerID'",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get information about a player from the 'players' table using their 'playerID'",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerInfo_in(playerID_in IN VARCHAR2) IS playerInfo players%ROWTYPE; BEGIN SELECT * INTO playerInfo FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(playerInfo); END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerInfo_in(playerID_in String) AS VAR playerInfo String = (SELECT * FROM players WHERE playerID = playerID_in); THROW playerInfo; END_PROCEDURE;"
  },
  {
    "number": 624,
    "task": "Create a stored procedure to insert a new player into the 'players' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to insert a new player into the 'players' table",
    "input": "CREATE OR REPLACE PROCEDURE addPlayer_in(playerID_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2) AS BEGIN INSERT INTO players(playerID, firstName, lastName) VALUES(playerID_in, firstName_in, lastName_in); COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE addPlayer_in(playerID_in String, firstName_in String, lastName_in String) AS INSERT INTO players(playerID, firstName, lastName) VALUES(playerID_in, firstName_in, lastName_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 625,
    "task": "Create a stored procedure to update the 'height' of a player in the 'players' table using their 'playerID'",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to update the 'height' of a player in the 'players' table using their 'playerID'",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerHeight_in(playerID_in IN VARCHAR2, height_in IN INTEGER) AS BEGIN UPDATE players SET height = height_in WHERE playerID = playerID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerHeight_in(playerID_in String, height_in Integer) AS UPDATE players SET height = height_in WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 626,
    "task": "Write a stored procedure to delete a player from the 'players' table using their 'playerID'",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to delete a player from the 'players' table using their 'playerID'",
    "input": "CREATE OR REPLACE PROCEDURE deletePlayer_in(playerID_in IN VARCHAR2) AS BEGIN DELETE FROM players WHERE playerID = playerID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE deletePlayer_in(playerID_in String) AS DELETE FROM players WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 627,
    "task": "Create a stored procedure to get the total 'wins' of a team from the 'teams' table using their 'teamID'",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the total 'wins' of a team from the 'teams' table using their 'teamID'",
    "input": "CREATE OR REPLACE PROCEDURE getTeamWins_in(teamID_in IN VARCHAR2) AS teamWins INTEGER; BEGIN SELECT wins INTO teamWins FROM teams WHERE teamID = teamID_in; DBMS_OUTPUT.PUT_LINE(TO_CHAR(teamWins)); END;",
    "output": "CREATE OR REPLACE PROCEDURE getTeamWins_in(teamID_in String) AS VAR teamWins Integer = (SELECT wins FROM teams WHERE teamID = teamID_in); THROW teamWins; END_PROCEDURE;"
  },
  {
    "number": 628,
    "task": "Create stored procedure to insert a new team into the 'teams' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create stored procedure to insert a new team into the 'teams' table",
    "input": "CREATE OR REPLACE PROCEDURE addTeam_in(teamID_in IN VARCHAR2, name_in IN VARCHAR2, conferenceID_in IN VARCHAR2, divisionID_in IN VARCHAR2, rank_in IN INTEGER) AS BEGIN INSERT INTO teams(teamID, name, conferenceID, divisionID, rank) VALUES(teamID_in, name_in, conferenceID_in, divisionID_in, rank_in); COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE addTeam_in(teamID_in String, name_in String, conferenceID_in String, divisionID_in String, rank_in Integer) AS INSERT INTO teams(teamID, name, conferenceID, divisionID, rank) VALUES(teamID_in, name_in, conferenceID_in, divisionID_in, rank_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 629,
    "task": "Write a stored procedure to update the 'conferenceID' of a team in the 'teams' table using their 'teamID'",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to update the 'conferenceID' of a team in the 'teams' table using their 'teamID'",
    "input": "CREATE OR REPLACE PROCEDURE updateTeamConference_in(teamID_in IN VARCHAR2, conferenceID_in IN VARCHAR2) AS BEGIN UPDATE teams SET conferenceID = conferenceID_in WHERE teamID = teamID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE updateTeamConference_in(teamID_in String, conferenceID_in String) AS UPDATE teams SET conferenceID = conferenceID_in WHERE teamID = teamID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 630,
    "task": "Write a stored procedure to delete a team from the 'teams' table using their 'teamID'",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to delete a team from the 'teams' table using their 'teamID'",
    "input": "CREATE OR REPLACE PROCEDURE deleteTeam_in(teamID_in IN VARCHAR2) AS BEGIN DELETE FROM teams WHERE teamID = teamID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE deleteTeam_in(teamID_in String) AS DELETE FROM teams WHERE teamID = teamID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 631,
    "task": "Create a stored procedure to get the 'goals' of a player from the 'scoring' table using their 'playerID'",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the 'goals' of a player from the 'scoring' table using their 'playerID'",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerGoals_in(playerID_in IN VARCHAR2) AS playerGoals INTEGER; BEGIN SELECT goals INTO playerGoals FROM scoring WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(TO_CHAR(playerGoals)); END;",
    "output": "CREATE OR REPLACE PROCEDURE getPlayerGoals_in(playerID_in String) AS VAR playerGoals Integer = (SELECT goals FROM scoring WHERE playerID = playerID_in); THROW playerGoals; END_PROCEDURE;"
  },
  {
    "number": 632,
    "task": "Write a stored procedure to insert a new score into the 'scoring' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to insert a new score into the 'scoring' table",
    "input": "CREATE OR REPLACE PROCEDURE addScore_in(playerID_in IN VARCHAR2, year_in IN INTEGER, stint_in IN INTEGER, teamID_in IN VARCHAR2, position_in IN VARCHAR2, gamesPlayed_in IN INTEGER, goals_in IN INTEGER, assists_in IN INTEGER, penaltyMinutes_in IN INTEGER) AS BEGIN INSERT INTO scoring(playerID, year, stint, teamID, position, gamesPlayed, goals, assists, penaltyMinutes) VALUES(playerID_in, year_in, stint_in, teamID_in, position_in, gamesPlayed_in, goals_in, assists_in, penaltyMinutes_in); COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE addScore_in(playerID_in String, year_in Integer, stint_in Integer, teamID_in String, position_in String, gamesPlayed_in Integer, goals_in Integer, assists_in Integer, penaltyMinutes_in Integer) AS INSERT INTO scoring(playerID, year, stint, teamID, position, gamesPlayed, goals, assists, penaltyMinutes) VALUES(playerID_in, year_in, stint_in, teamID_in, position_in, gamesPlayed_in, goals_in, assists_in, penaltyMinutes_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 633,
    "task": "Create a stored procedure to update the 'assists' of a player in the 'scoring' table using their 'playerID'",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to update the 'assists' of a player in the 'scoring' table using their 'playerID'",
    "input": "CREATE OR REPLACE PROCEDURE updatePlayerAssists_in(playerID_in IN VARCHAR2, assists_in IN INTEGER) AS BEGIN UPDATE scoring SET assists = assists_in WHERE playerID = playerID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE updatePlayerAssists_in(playerID_in String, assists_in Integer) AS UPDATE scoring SET assists = assists_in WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 634,
    "task": "Create a stored procedure to delete a score from the 'scoring' table using a player's 'playerID'",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to delete a score from the 'scoring' table using a player's 'playerID'",
    "input": "CREATE OR REPLACE PROCEDURE deleteScore_in(playerID_in IN VARCHAR2) AS BEGIN DELETE FROM scoring WHERE playerID = playerID_in; COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE OR REPLACE PROCEDURE deleteScore_in(playerID_in String) AS DELETE FROM scoring WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 635,
    "task": "Write a stored procedure to get the count of all players in the 'players' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the count of all players in the 'players' table",
    "input": "CREATE OR REPLACE PROCEDURE getCountOfPlayers_in AS countOfPlayers INTEGER; BEGIN SELECT COUNT(*) INTO countOfPlayers FROM players; DBMS_OUTPUT.PUT_LINE(TO_CHAR(countOfPlayers)); END;",
    "output": "CREATE OR REPLACE PROCEDURE getCountOfPlayers_in() AS VAR countOfPlayers Integer = (SELECT COUNT(*) FROM players); THROW countOfPlayers; END_PROCEDURE;"
  },
  {
    "number": 636,
    "task": "Create a stored procedure to get the count of all teams in the 'teams' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the count of all teams in the 'teams' table",
    "input": "CREATE OR REPLACE PROCEDURE getCountOfTeams_in AS countOfTeams INTEGER; BEGIN SELECT COUNT(*) INTO countOfTeams FROM teams; DBMS_OUTPUT.PUT_LINE(TO_CHAR(countOfTeams)); END;",
    "output": "CREATE OR REPLACE PROCEDURE getCountOfTeams_in() AS VAR countOfTeams Integer = (SELECT COUNT(*) FROM teams); THROW countOfTeams; END_PROCEDURE;"
  },
  {
    "number": 637,
    "task": "Write a stored procedure to get the count of all scores in the 'scoring' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the count of all scores in the 'scoring' table",
    "input": "CREATE OR REPLACE PROCEDURE getCountOfScores_in AS countOfScores INTEGER; BEGIN SELECT COUNT(*) INTO countOfScores FROM scoring; DBMS_OUTPUT.PUT_LINE(TO_CHAR(countOfScores)); END;",
    "output": "CREATE OR REPLACE PROCEDURE getCountOfScores_in() AS VAR countOfScores Integer = (SELECT COUNT(*) FROM scoring); THROW countOfScores; END_PROCEDURE;"
  },
  {
    "number": 638,
    "task": "Create a stored procedure to get the average 'height' of all players in the 'players' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the average 'height' of all players in the 'players' table",
    "input": "CREATE OR REPLACE PROCEDURE getAvgPlayerHeight_in AS avgPlayerHeight INTEGER; BEGIN SELECT AVG(height) INTO avgPlayerHeight FROM players; DBMS_OUTPUT.PUT_LINE(TO_CHAR(avgPlayerHeight)); END;",
    "output": "CREATE OR REPLACE PROCEDURE getAvgPlayerHeight_in() AS VAR avgPlayerHeight Integer = (SELECT AVG(height) FROM players); THROW avgPlayerHeight; END_PROCEDURE;"
  },
  {
    "number": 639,
    "task": "Create a stored procedure to get the average 'wins' of all teams in the 'teams' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the average 'wins' of all teams in the 'teams' table",
    "input": "CREATE OR REPLACE PROCEDURE getAvgTeamWins_in AS avgTeamWins INTEGER; BEGIN SELECT AVG(wins) INTO avgTeamWins FROM teams; DBMS_OUTPUT.PUT_LINE(TO_CHAR(avgTeamWins)); END;",
    "output": "CREATE OR REPLACE PROCEDURE getAvgTeamWins_in() AS VAR avgTeamWins Integer = (SELECT AVG(wins) FROM teams); THROW avgTeamWins; END_PROCEDURE;"
  },
  {
    "number": 640,
    "task": "Write a stored procedure to get the average 'goals' of all players in the 'scoring' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the average 'goals' of all players in the 'scoring' table",
    "input": "CREATE OR REPLACE PROCEDURE getAvgPlayerGoals_in AS avgPlayerGoals INTEGER; BEGIN SELECT AVG(goals) INTO avgPlayerGoals FROM scoring; DBMS_OUTPUT.PUT_LINE(TO_CHAR(avgPlayerGoals)); END;",
    "output": "CREATE OR REPLACE PROCEDURE getAvgPlayerGoals_in() AS VAR avgPlayerGoals Integer = (SELECT AVG(goals) FROM scoring); THROW avgPlayerGoals; END_PROCEDURE;"
  },
  {
    "number": 641,
    "task": "Write a stored procedure to get the maximum 'height' of all players in the 'players' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the maximum 'height' of all players in the 'players' table",
    "input": "CREATE OR REPLACE PROCEDURE getMaxPlayerHeight_in AS maxPlayerHeight INTEGER; BEGIN SELECT MAX(height) INTO maxPlayerHeight FROM players; DBMS_OUTPUT.PUT_LINE(TO_CHAR(maxPlayerHeight)); END;",
    "output": "CREATE OR REPLACE PROCEDURE getMaxPlayerHeight_in() AS VAR maxPlayerHeight Integer = (SELECT MAX(height) FROM players); THROW maxPlayerHeight; END_PROCEDURE;"
  },
  {
    "number": 642,
    "task": "Create a stored procedure to get the minimum 'losses' of all teams in the 'teams' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the minimum 'losses' of all teams in the 'teams' table",
    "input": "CREATE OR REPLACE PROCEDURE getMinTeamLosses_in AS minTeamLosses INTEGER; BEGIN SELECT MIN(losses) INTO minTeamLosses FROM teams; DBMS_OUTPUT.PUT_LINE(TO_CHAR(minTeamLosses)); END;",
    "output": "CREATE OR REPLACE PROCEDURE getMinTeamLosses_in() AS VAR minTeamLosses Integer = (SELECT MIN(losses) FROM teams); THROW minTeamLosses; END_PROCEDURE;"
  },
  {
    "number": 643,
    "task": "Create a stored procedure that throws the player information by taking player number as input.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that throws the player information by taking player number as input.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerInfo_byPlayerNumber_in (playerNumber_in IN INTEGER) AS name VARCHAR2(100); position VARCHAR2(100); team VARCHAR2(100); BEGIN SELECT Name, Position, Team INTO name, position, team FROM hockey WHERE number = playerNumber_in; DBMS_OUTPUT.PUT_LINE('Player Name: ' || name || ', Position: ' || position || ', Team: ' || team); END;",
    "output": "CREATE PROCEDURE getPlayerInfo_byPlayerNumber_in(IN playerNumber_in INTEGER) AS VAR name STRING, position STRING, team STRING; name, position, team = (SELECT Name, Position, Team FROM hockey WHERE number = playerNumber_in); THROW 'Player Name: ' || name || ', Position: ' || position || ', Team: ' || team; END_PROCEDURE;"
  },
  {
    "number": 644,
    "task": "Write a stored procedure to fetch team info by given year and team ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to fetch team info by given year and team ID.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamInfo_byYearAndTeamID_in (year_in IN INTEGER, teamID_in IN VARCHAR2) AS name VARCHAR2(100); conferenceID VARCHAR2(100); divisionID VARCHAR2(100); BEGIN SELECT name, conferenceID, divisionID INTO name, conferenceID, divisionID FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Team Name: ' || name || ', Conference ID: ' || conferenceID || ', Division ID: ' || divisionID); END;",
    "output": "CREATE PROCEDURE getTeamInfo_byYearAndTeamID_in(IN year_in INTEGER, IN teamID_in STRING) AS VAR name STRING, conferenceID STRING, divisionID STRING; name, conferenceID, divisionID = (SELECT name, conferenceID, divisionID FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'Team Name: ' || name || ', Conference ID: ' || conferenceID || ', Division ID: ' || divisionID; END_PROCEDURE;"
  },
  {
    "number": 645,
    "task": "Create a stored procedure that calculates average player weight.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates average player weight.",
    "input": "CREATE OR REPLACE PROCEDURE avgPlayerWeight AS avgWeight NUMBER; BEGIN SELECT AVG(weight) INTO avgWeight FROM players; DBMS_OUTPUT.PUT_LINE('Average Player Weight: ' || TO_CHAR(avgWeight)); END;",
    "output": "CREATE PROCEDURE avgPlayerWeight() AS VAR avgWeight DOUBLE = (SELECT AVG(weight) FROM players); THROW 'Average Player Weight: ' || avgWeight; END_PROCEDURE;"
  },
  {
    "number": 646,
    "task": "Write a stored procedure that finds the tallest player in the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that finds the tallest player in the players table.",
    "input": "CREATE OR REPLACE PROCEDURE findTallestPlayer AS playerID VARCHAR2(100); height INTEGER; BEGIN SELECT playerID, MAX(height) INTO playerID, height FROM players; DBMS_OUTPUT.PUT_LINE('PlayerID: ' || playerID || ', Height: ' || TO_CHAR(height)); END;",
    "output": "CREATE PROCEDURE findTallestPlayer() AS VAR playerID STRING, height INTEGER; playerID, height = (SELECT playerID, MAX(height) FROM players); THROW 'PlayerID: ' || playerID || ', Height: ' || height; END_PROCEDURE;"
  },
  {
    "number": 647,
    "task": "Create a stored procedure that gets total number of games played by a player in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that gets total number of games played by a player in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE getTotalGamesPlayed_byPlayerAndYear_in (playerID_in IN VARCHAR2, year_in IN INTEGER) AS totalGames INTEGER; BEGIN SELECT SUM(gamesPlayed) INTO totalGames FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total Games Played: ' || TO_CHAR(totalGames)); END;",
    "output": "CREATE PROCEDURE getTotalGamesPlayed_byPlayerAndYear_in(IN playerID_in STRING, IN year_in INTEGER) AS VAR totalGames INTEGER = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total Games Played: ' || totalGames; END_PROCEDURE;"
  },
  {
    "number": 648,
    "task": "Create a stored procedure that counts number of players in a given team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that counts number of players in a given team.",
    "input": "CREATE OR REPLACE PROCEDURE countPlayers_byTeam_in (team_in IN VARCHAR2) AS playerCount INTEGER; BEGIN SELECT COUNT(*) INTO playerCount FROM hockey WHERE Team = team_in; DBMS_OUTPUT.PUT_LINE('Number of players: ' || TO_CHAR(playerCount)); END;",
    "output": "CREATE PROCEDURE countPlayers_byTeam_in(IN team_in STRING) AS VAR playerCount INTEGER = (SELECT COUNT(*) FROM hockey WHERE Team = team_in); THROW 'Number of players: ' || playerCount; END_PROCEDURE;"
  },
  {
    "number": 649,
    "task": "Create a stored procedure to find a player who scored maximum goals in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find a player who scored maximum goals in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE findPlayer_maxGoals_BYYear_in (year_in IN INTEGER) AS playerID VARCHAR2(100); maxGoals INTEGER; BEGIN SELECT playerID, MAX(goals) INTO playerID, maxGoals FROM scoring WHERE year = year_in; DBMS_OUTPUT.PUT_LINE('PlayerID: ' || playerID || ', Maximum Goals: ' || TO_CHAR(maxGoals)); END;",
    "output": "CREATE PROCEDURE findPlayer_maxGoals_BYYear_in(IN year_in INTEGER) AS VAR playerID STRING, maxGoals INTEGER; playerID, maxGoals = (SELECT playerID, MAX(goals) FROM scoring WHERE year = year_in); THROW 'PlayerID: ' || playerID || ', Maximum Goals: ' || maxGoals; END_PROCEDURE;"
  },
  {
    "number": 650,
    "task": "Create a stored procedure that calculates the average number of games played by teams in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that calculates the average number of games played by teams in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE avgGamesPlayed_byYear_in (year_in IN INTEGER) AS averageGames NUMBER; BEGIN SELECT AVG(games) INTO averageGames FROM teams WHERE year = year_in; DBMS_OUTPUT.PUT_LINE('Average Games Played: ' || TO_CHAR(averageGames)); END;",
    "output": "CREATE PROCEDURE avgGamesPlayed_byYear_in(IN year_in INTEGER) AS VAR averageGames DOUBLE = (SELECT AVG(games) FROM teams WHERE year = year_in); THROW 'Average Games Played: ' || averageGames; END_PROCEDURE;"
  },
  {
    "number": 651,
    "task": "Write a stored procedure to calculate the total weight for all players.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to calculate the total weight for all players.",
    "input": "CREATE OR REPLACE PROCEDURE totalWeight_allPlayers AS totalWeight INTEGER; BEGIN SELECT SUM(weight) INTO totalWeight FROM players; DBMS_OUTPUT.PUT_LINE('Total Weight of All Players: ' || TO_CHAR(totalWeight)); END;",
    "output": "CREATE PROCEDURE totalWeight_allPlayers() AS VAR totalWeight INTEGER = (SELECT SUM(weight) FROM players); THROW 'Total Weight of All Players: ' || totalWeight; END_PROCEDURE;"
  },
  {
    "number": 652,
    "task": "Create a stored procedure to get all information of a player by given player ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get all information of a player by given player ID.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerInfo_byPlayerID_in (playerID_in IN VARCHAR2) AS firstName VARCHAR2(100); lastName VARCHAR2(100); height INTEGER; weight INTEGER; firstNHL INTEGER; lastNHL INTEGER; position VARCHAR2(100); BEGIN SELECT firstName, lastName, height, weight, firstNHL, lastNHL, position INTO firstName, lastName, height, weight, firstNHL, lastNHL, position FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Player Info: ' || firstName || ' ' || lastName || ', Height: ' || TO_CHAR(height) || ', Weight: ' || TO_CHAR(weight) || ', First NHL: ' || TO_CHAR(firstNHL) || ', Last NHL: ' || TO_CHAR(lastNHL) || ', Position: ' || position); END;",
    "output": "CREATE PROCEDURE getPlayerInfo_byPlayerID_in(IN playerID_in STRING) AS VAR firstName STRING, lastName STRING, height INTEGER, weight INTEGER, firstNHL INTEGER, lastNHL INTEGER, position STRING; firstName, lastName, height, weight, firstNHL, lastNHL, position = (SELECT firstName, lastName, height, weight, firstNHL, lastNHL, position FROM players WHERE playerID = playerID_in); THROW 'Player Info: ' || firstName || ' ' || lastName || ', Height: ' || height || ', Weight: ' || weight || ', First NHL: ' || firstNHL || ', Last NHL: ' || lastNHL || ', Position: ' || position; END_PROCEDURE;"
  },
  {
    "number": 653,
    "task": "Create a stored procedure to get a player's birth place by given player ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get a player's birth place by given player ID.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerBirthPlace_byPlayerID_in (playerID_in IN VARCHAR2) AS birthCountry VARCHAR2(100); birthState VARCHAR2(100); birthCity VARCHAR2(100); BEGIN SELECT birthCountry, birthState, birthCity INTO birthCountry, birthState, birthCity FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Player Birth Place: ' || birthCountry || ', ' || birthState || ', ' || birthCity); END;",
    "output": "CREATE PROCEDURE getPlayerBirthPlace_byPlayerID_in(IN playerID_in STRING) AS VAR birthCountry STRING, birthState STRING, birthCity STRING; birthCountry, birthState, birthCity = (SELECT birthCountry, birthState, birthCity FROM players WHERE playerID = playerID_in); THROW 'Player Birth Place: ' || birthCountry || ', ' || birthState || ', ' || birthCity; END_PROCEDURE;"
  },
  {
    "number": 654,
    "task": "Create a procedure to get player's scoring details by player ID and a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure to get player's scoring details by player ID and a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE getScoringDetails_byPlayerIDAndYear_in (playerID_in IN VARCHAR2, year_in IN INTEGER) AS gamesPlayed INTEGER; goals INTEGER; assists INTEGER; penaltyMinutes INTEGER; BEGIN SELECT gamesPlayed, goals, assists, penaltyMinutes INTO gamesPlayed, goals, assists, penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('gamesPlayed: ' || TO_CHAR(gamesPlayed) || ', goals: ' || TO_CHAR(goals) || ', assists: ' || TO_CHAR(assists) || ', penaltyMinutes: ' || TO_CHAR(penaltyMinutes)); END;",
    "output": "CREATE PROCEDURE getScoringDetails_byPlayerIDAndYear_in(IN playerID_in STRING, IN year_in INTEGER) AS VAR gamesPlayed INTEGER, goals INTEGER, assists INTEGER, penaltyMinutes INTEGER; gamesPlayed, goals, assists, penaltyMinutes = (SELECT gamesPlayed, goals, assists, penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'gamesPlayed: ' || gamesPlayed || ', goals: ' || goals || ', assists: ' || assists || ', penaltyMinutes: ' || penaltyMinutes; END_PROCEDURE;"
  },
  {
    "number": 655,
    "task": "Write a stored procedure to get the number of assists by a player in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the number of assists by a player in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE getAssists_byPlayerIDAndYear_in (playerID_in IN VARCHAR2, year_in IN INTEGER) AS assists INTEGER; BEGIN SELECT SUM(assists) INTO assists FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Number of Assists: ' || TO_CHAR(assists)); END;",
    "output": "CREATE PROCEDURE getAssists_byPlayerIDAndYear_in(IN playerID_in STRING, IN year_in INTEGER) AS VAR assists INTEGER = (SELECT SUM(assists) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Number of Assists: ' || assists; END_PROCEDURE;"
  },
  {
    "number": 656,
    "task": "Write a stored procedure which throws team rank by given year and team ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure which throws team rank by given year and team ID.",
    "input": "CREATE OR REPLACE PROCEDURE teamRank_byYearAndTeamID_in (year_in IN INTEGER, teamID_in IN VARCHAR2) AS rank INTEGER; BEGIN SELECT rank INTO rank FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Team Rank: ' || TO_CHAR(rank)); END;",
    "output": "CREATE PROCEDURE teamRank_byYearAndTeamID_in(IN year_in INTEGER, IN teamID_in STRING) AS VAR rank INTEGER = (SELECT rank FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'Team Rank: ' || rank; END_PROCEDURE;"
  },
  {
    "number": 657,
    "task": "Create a stored procedure to get the maximum goal score of a team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the maximum goal score of a team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE maxGoalScore_byYearAndTeamID_in (year_in IN INTEGER, teamID_in IN VARCHAR2) AS maxGoals INTEGER; BEGIN SELECT MAX(goals) INTO maxGoals FROM scoring WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Maximum Goal Score: ' || TO_CHAR(maxGoals)); END;",
    "output": "CREATE PROCEDURE maxGoalScore_byYearAndTeamID_in(IN year_in INTEGER, IN teamID_in STRING) AS VAR maxGoals INTEGER = (SELECT MAX(goals) FROM scoring WHERE year = year_in AND teamID = teamID_in); THROW 'Maximum Goal Score: ' || maxGoals; END_PROCEDURE;"
  },
  {
    "number": 658,
    "task": "Create a stored procedure that gets the total number of ties by a team in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that gets the total number of ties by a team in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamTies_byYearAndTeamID_in (year_in IN INTEGER, teamID_in IN VARCHAR2) AS ties INTEGER; BEGIN SELECT ties INTO ties FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Total Ties: ' || TO_CHAR(ties)); END;",
    "output": "CREATE PROCEDURE getTeamTies_byYearAndTeamID_in(IN year_in INTEGER, IN teamID_in STRING) AS VAR ties INTEGER = (SELECT ties FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'Total Ties: ' || ties; END_PROCEDURE;"
  },
  {
    "number": 659,
    "task": "Write a stored procedure to get a player's birth date by given player ID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get a player's birth date by given player ID.",
    "input": "CREATE OR REPLACE PROCEDURE getBirthDate_byPlayerID_in (playerID_in IN VARCHAR2) AS birthYear INTEGER; birthMon INTEGER; birthDay INTEGER; BEGIN SELECT birthYear, birthMon, birthDay INTO birthYear, birthMon, birthDay FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Birth Date: ' || TO_CHAR(birthYear) || '-' || TO_CHAR(birthMon) || '-' || TO_CHAR(birthDay)); END;",
    "output": "CREATE PROCEDURE getBirthDate_byPlayerID_in(IN playerID_in STRING) AS VAR birthYear INTEGER, birthMon INTEGER, birthDay INTEGER; birthYear, birthMon, birthDay = (SELECT birthYear, birthMon, birthDay FROM players WHERE playerID = playerID_in); THROW 'Birth Date: ' || birthYear || '-' || birthMon || '-' || birthDay; END_PROCEDURE;"
  },
  {
    "number": 660,
    "task": "Create a stored procedure to get the number of wins by a team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the number of wins by a team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamWins_byYearAndTeamID_in (year_in IN INTEGER, teamID_in IN VARCHAR2) AS wins INTEGER; BEGIN SELECT wins INTO wins FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Total Wins: ' || TO_CHAR(wins)); END;",
    "output": "CREATE PROCEDURE getTeamWins_byYearAndTeamID_in(IN year_in INTEGER, IN teamID_in STRING) AS VAR wins INTEGER = (SELECT wins FROM teams WHERE year = year_in AND teamID = teamID_in); THROW 'Total Wins: ' || wins; END_PROCEDURE;"
  },
  {
    "number": 661,
    "task": "Create a stored procedure to get the player who played maximum games in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the player who played maximum games in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE getMaxGamesPlayedPlayer_byYear_in (year_in IN INTEGER) AS playerID VARCHAR2(255); maxGames INTEGER; BEGIN SELECT playerID, MAX(gamesPlayed) INTO playerID, maxGames FROM scoring WHERE year = year_in; DBMS_OUTPUT.PUT_LINE('PlayerID: ' || playerID || ', Maximum Games Played: ' || TO_CHAR(maxGames)); END;",
    "output": "CREATE PROCEDURE getMaxGamesPlayedPlayer_byYear_in(IN year_in INTEGER) AS VAR playerID STRING, maxGames INTEGER; playerID, maxGames = (SELECT playerID, MAX(gamesPlayed) FROM scoring WHERE year = year_in); THROW 'PlayerID: ' || playerID || ', Maximum Games Played: ' || maxGames; END_PROCEDURE;"
  },
  {
    "number": 662,
    "task": "Create a stored procedure to get penalty minutes of a player in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get penalty minutes of a player in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE getPenaltyMinutes_byPlayerIDAndYear_in (playerID_in IN VARCHAR2, year_in IN INTEGER) AS penaltyMinutes INTEGER; BEGIN SELECT penaltyMinutes INTO penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Penalty Minutes: ' || TO_CHAR(penaltyMinutes)); END;",
    "output": "CREATE PROCEDURE getPenaltyMinutes_byPlayerIDAndYear_in(IN playerID_in STRING, IN year_in INTEGER) AS VAR penaltyMinutes INTEGER = (SELECT penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Penalty Minutes: ' || penaltyMinutes; END_PROCEDURE;"
  },
  {
    "number": 663,
    "task": "Create a stored procedure to get the name of a hockey player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the name of a hockey player.",
    "input": "CREATE OR REPLACE PROCEDURE get_hockey_player_name (number_in IN INTEGER) AS name VARCHAR2(255); BEGIN SELECT Name INTO name FROM Hockey WHERE Number = number_in; DBMS_OUTPUT.PUT_LINE(name); END;",
    "output": "CREATE PROCEDURE get_hockey_player_name(IN number_in INTEGER) AS VAR name STRING = (SELECT Name FROM Hockey WHERE Number = number_in); THROW name; END_PROCEDURE;"
  },
  {
    "number": 664,
    "task": "Create a procedure to return the number of games won by a team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure to return the number of games won by a team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE get_wins_by_team (year_in IN INTEGER, teamID_in IN VARCHAR2) AS wins INTEGER; BEGIN SELECT wins INTO wins FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE(TO_CHAR(wins)); END;",
    "output": "CREATE PROCEDURE get_wins_by_team(IN year_in INTEGER, IN teamID_in STRING) AS VAR wins INTEGER = (SELECT wins FROM teams WHERE year = year_in AND teamID = teamID_in); THROW wins; END_PROCEDURE;"
  },
  {
    "number": 665,
    "task": "Write a stored procedure to get the birth country of a player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the birth country of a player.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birth_country(playerID_in IN VARCHAR2) AS birthCountry VARCHAR2(255); BEGIN SELECT birthCountry INTO birthCountry FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(birthCountry); END;",
    "output": "CREATE PROCEDURE get_player_birth_country(IN playerID_in STRING) AS VAR birthCountry STRING = (SELECT birthCountry FROM players WHERE playerID = playerID_in); THROW birthCountry; END_PROCEDURE;"
  },
  {
    "number": 666,
    "task": "Create a procedure to get the name of the team a player belongs to.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure to get the name of the team a player belongs to.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_team(id_in IN NUMBER) AS team VARCHAR2(255); BEGIN SELECT Team INTO team FROM Hockey WHERE Id = id_in; DBMS_OUTPUT.PUT_LINE(team); END;",
    "output": "CREATE PROCEDURE get_player_team(IN id_in BIGINT) AS VAR team STRING = (SELECT Team FROM Hockey WHERE Id = id_in); THROW team; END_PROCEDURE;"
  },
  {
    "number": 667,
    "task": "How to create a stored procedure that returns the position of a specific hockey player?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the position of a specific hockey player?",
    "input": "CREATE OR REPLACE PROCEDURE get_hockey_player_position(number_in IN INTEGER) AS position VARCHAR2(255); BEGIN SELECT Position INTO position FROM Hockey WHERE Number = number_in; DBMS_OUTPUT.PUT_LINE(position); END;",
    "output": "CREATE PROCEDURE get_hockey_player_position(IN number_in INTEGER) AS VAR position STRING = (SELECT Position FROM Hockey WHERE Number = number_in); THROW position; END_PROCEDURE;"
  },
  {
    "number": 668,
    "task": "How to create a procedure that returns the number of losses a team had in a year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a procedure that returns the number of losses a team had in a year?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_losses(year_in IN INTEGER, teamID_in IN VARCHAR2) AS losses INTEGER; BEGIN SELECT losses INTO losses FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE(TO_CHAR(losses)); END;",
    "output": "CREATE PROCEDURE get_team_losses(IN year_in INTEGER, IN teamID_in STRING) AS VAR losses INTEGER = (SELECT losses FROM teams WHERE year = year_in AND teamID = teamID_in); THROW losses; END_PROCEDURE;"
  },
  {
    "number": 669,
    "task": "How to get the birth state of a player in a stored procedure?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the birth state of a player in a stored procedure?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birth_state(playerID_in IN VARCHAR2) AS birthState VARCHAR2(255); BEGIN SELECT birthState INTO birthState FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(birthState); END;",
    "output": "CREATE PROCEDURE get_player_birth_state(IN playerID_in STRING) AS VAR birthState STRING = (SELECT birthState FROM players WHERE playerID = playerID_in); THROW birthState; END_PROCEDURE;"
  },
  {
    "number": 670,
    "task": "Develop a stored procedure to retrieve the assists of a player in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Develop a stored procedure to retrieve the assists of a player in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_assists(playerID_in IN VARCHAR2, year_in IN INTEGER) AS assists INTEGER; BEGIN SELECT assists INTO assists FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(TO_CHAR(assists)); END;",
    "output": "CREATE PROCEDURE get_player_assists(IN playerID_in STRING, IN year_in INTEGER) AS VAR assists INTEGER = (SELECT assists FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW assists; END_PROCEDURE;"
  },
  {
    "number": 671,
    "task": "Generate a procedure to get the number of ties a team had in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a procedure to get the number of ties a team had in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE get_team_ties(year_in IN INTEGER, teamID_in IN VARCHAR2) AS ties INTEGER; BEGIN SELECT ties INTO ties FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE(TO_CHAR(ties)); END;",
    "output": "CREATE PROCEDURE get_team_ties(IN year_in INTEGER, IN teamID_in STRING) AS VAR ties INTEGER = (SELECT ties FROM teams WHERE year = year_in AND teamID = teamID_in); THROW ties; END_PROCEDURE;"
  },
  {
    "number": 672,
    "task": "How to create a stored procedure that returns the birth city of a player?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the birth city of a player?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_birth_city(playerID_in IN VARCHAR2) AS birthCity VARCHAR2(255); BEGIN SELECT birthCity INTO birthCity FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(birthCity); END;",
    "output": "CREATE PROCEDURE get_player_birth_city(IN playerID_in STRING) AS VAR birthCity STRING = (SELECT birthCity FROM players WHERE playerID = playerID_in); THROW birthCity; END_PROCEDURE;"
  },
  {
    "number": 673,
    "task": "Write a stored procedure to get the name of a player along with the team they play for by using the player's number.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the name of a player along with the team they play for by using the player's number.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_and_team(number_in IN INTEGER) AS name VARCHAR2(255); team VARCHAR2(255); BEGIN SELECT Name INTO name FROM Hockey WHERE Number = number_in; SELECT Team INTO team FROM Hockey WHERE Number = number_in; DBMS_OUTPUT.PUT_LINE(name || ' ' || team); END;",
    "output": "CREATE PROCEDURE get_player_and_team(IN number_in INTEGER) AS VAR name STRING = (SELECT Name FROM Hockey WHERE Number = number_in); VAR team STRING = (SELECT Team FROM Hockey WHERE Number = number_in); THROW name || ' ' || team; END_PROCEDURE;"
  },
  {
    "number": 674,
    "task": "How to create a stored procedure that returns the division of a team for a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the division of a team for a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_division(year_in IN INTEGER, teamID_in IN VARCHAR2) AS divisionID VARCHAR2(255); BEGIN SELECT divisionID INTO divisionID FROM teams WHERE year = year_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE(divisionID); END;",
    "output": "CREATE PROCEDURE get_team_division(IN year_in INTEGER, IN teamID_in STRING) AS VAR divisionID STRING = (SELECT divisionID FROM teams WHERE year = year_in AND teamID = teamID_in); THROW divisionID; END_PROCEDURE;"
  },
  {
    "number": 675,
    "task": "Write a stored procedure to get the first year a player played in NHL",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the first year a player played in NHL",
    "input": "CREATE OR REPLACE PROCEDURE get_player_firstNHL_year(playerID_in IN VARCHAR2) AS firstNHL INTEGER; BEGIN SELECT firstNHL INTO firstNHL FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(TO_CHAR(firstNHL)); END;",
    "output": "CREATE PROCEDURE get_player_firstNHL_year(IN playerID_in STRING) AS VAR firstNHL INTEGER = (SELECT firstNHL FROM players WHERE playerID = playerID_in); THROW firstNHL; END_PROCEDURE;"
  },
  {
    "number": 676,
    "task": "Generate a stored procedure to retrieve the last year a player played in NHL",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a stored procedure to retrieve the last year a player played in NHL",
    "input": "CREATE OR REPLACE PROCEDURE get_player_lastNHL_year(playerID_in IN VARCHAR2) AS lastNHL INTEGER; BEGIN SELECT lastNHL INTO lastNHL FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE(TO_CHAR(lastNHL)); END;",
    "output": "CREATE PROCEDURE get_player_lastNHL_year(IN playerID_in STRING) AS VAR lastNHL INTEGER = (SELECT lastNHL FROM players WHERE playerID = playerID_in); THROW lastNHL; END_PROCEDURE;"
  },
  {
    "number": 677,
    "task": "Create a stored procedure to get the player's position and Goals in a particular year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the player's position and Goals in a particular year.",
    "input": "CREATE OR REPLACE PROCEDURE get_player_position_goals(playerID_in IN VARCHAR2, year_in IN INTEGER) AS position VARCHAR2(255); goals INTEGER; BEGIN SELECT position, goals INTO position, goals FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(position || ' ' || TO_CHAR(goals)); END;",
    "output": "CREATE PROCEDURE get_player_position_goals(IN playerID_in STRING, IN year_in INTEGER) AS VAR position STRING = (SELECT position FROM scoring WHERE playerID = playerID_in AND year = year_in); VAR goals INTEGER = (SELECT goals FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW position || ' ' || goals; END_PROCEDURE;"
  },
  {
    "number": 678,
    "task": "Write a stored procedure that selects the first and last name of a player based on their playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that selects the first and last name of a player based on their playerID.",
    "input": "CREATE OR REPLACE PROCEDURE selectPlayerName(playerID_in IN VARCHAR2) AS firstName VARCHAR2(255); lastName VARCHAR2(255); BEGIN SELECT firstName, lastName INTO firstName, lastName FROM players WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('First Name: ' || firstName || ', Last Name: ' || lastName); END;",
    "output": "CREATE PROCEDURE selectPlayerName(IN playerID_in STRING) AS VAR firstName STRING, lastName STRING; firstName, lastName = (SELECT firstName, lastName FROM players WHERE playerID = playerID_in); THROW 'First Name: ' || firstName || ', Last Name: ' || lastName; END_PROCEDURE;"
  },
  {
    "number": 679,
    "task": "Create a stored procedure that returns team details based on teamID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that returns team details based on teamID.",
    "input": "CREATE OR REPLACE PROCEDURE getTeamDetails(teamID_in IN VARCHAR2) AS teamName VARCHAR2(255); conferenceID VARCHAR2(255); divisionID VARCHAR2(255); BEGIN SELECT name, conferenceID, divisionID INTO teamName, conferenceID, divisionID FROM teams WHERE teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Team Name: ' || teamName || ', Conference ID: ' || conferenceID || ', Division ID: ' || divisionID); END;",
    "output": "CREATE PROCEDURE getTeamDetails(IN teamID_in STRING) AS VAR teamName STRING, conferenceID STRING, divisionID STRING; teamName, conferenceID, divisionID = (SELECT name, conferenceID, divisionID FROM teams WHERE teamID = teamID_in); THROW 'Team Name: ' || teamName || ', Conference ID: ' || conferenceID || ', Division ID: ' || divisionID; END_PROCEDURE;"
  },
  {
    "number": 680,
    "task": "Create a stored procedure to count number of goals scored by a particular player in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to count number of goals scored by a particular player in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE countPlayerGoals(playerID_in IN VARCHAR2, year_in IN INTEGER) AS goalCount INTEGER; BEGIN SELECT SUM(goals) INTO goalCount FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total goals scored: ' || TO_CHAR(goalCount)); END;",
    "output": "CREATE PROCEDURE countPlayerGoals(IN playerID_in STRING, IN year_in INTEGER) AS VAR goalCount INTEGER; goalCount = (SELECT SUM(goals) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total goals scored: ' || goalCount; END_PROCEDURE;"
  },
  {
    "number": 681,
    "task": "Create a stored procedure to get the details of a Hockey player based on their id.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to get the details of a Hockey player based on their id.",
    "input": "CREATE OR REPLACE PROCEDURE getHockeyDetails(Id_in IN NUMBER) AS Number NUMBER; Name VARCHAR2(255); Position VARCHAR2(255); Team VARCHAR2(255); BEGIN SELECT Number, Name, Position, Team INTO Number, Name, Position, Team FROM Hockey WHERE Id = Id_in; DBMS_OUTPUT.PUT_LINE('Number: ' || TO_CHAR(Number) ||', Name: '|| Name ||', Position: '|| Position ||', Team: '|| Team); END;",
    "output": "CREATE PROCEDURE getHockeyDetails(IN Id_in BIGINT) AS VAR Number INTEGER, Name STRING, Position STRING, Team STRING; Number, Name, Position, Team = (SELECT Number, Name, Position, Team FROM Hockey WHERE Id = Id_in); THROW 'Number: ' || Number ||', Name: '|| Name ||', Position: '|| Position ||', Team: '|| Team; END_PROCEDURE;"
  },
  {
    "number": 682,
    "task": "Create a stored procedure to update the position of a Hockey player based on their id.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to update the position of a Hockey player based on their id.",
    "input": "CREATE OR REPLACE PROCEDURE updateHockeyPosition(Id_in IN NUMBER, Position_in IN VARCHAR2) AS BEGIN UPDATE Hockey SET Position = Position_in WHERE Id = Id_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE updateHockeyPosition(IN Id_in BIGINT, IN Position_in STRING) AS EXECUTE IMMEDIATE 'UPDATE Hockey SET Position = ? WHERE Id = ?' USING VALUES Position_in, Id_in; THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 683,
    "task": "Write a stored procedure to delete a player from the Hockey table based on their id.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to delete a player from the Hockey table based on their id.",
    "input": "CREATE OR REPLACE PROCEDURE deleteHockeyPlayer(Id_in IN NUMBER) AS BEGIN DELETE FROM Hockey WHERE Id = Id_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END;",
    "output": "CREATE PROCEDURE deleteHockeyPlayer(IN Id_in BIGINT) AS EXECUTE IMMEDIATE 'DELETE FROM Hockey WHERE Id = ?' USING VALUES Id_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 684,
    "task": "Create a stored procedure to insert a new team into the teams table with provided details.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to insert a new team into the teams table with provided details.",
    "input": "CREATE OR REPLACE PROCEDURE insertTeam(year_in IN NUMBER, teamID_in IN VARCHAR2, name_in IN VARCHAR2, conferenceID_in IN VARCHAR2, divisionID_in IN VARCHAR2, rank_in IN NUMBER) IS BEGIN EXECUTE IMMEDIATE 'INSERT INTO teams(year, teamID, name, conferenceID, divisionID, rank) VALUES (:1, :2, :3, :4, :5, :6)' USING year_in, teamID_in, name_in, conferenceID_in, divisionID_in, rank_in; END;",
    "output": "CREATE PROCEDURE insertTeam(IN year_in INTEGER, IN teamID_in STRING, IN name_in STRING, IN conferenceID_in STRING, IN divisionID_in STRING, IN rank_in INTEGER) AS EXECUTE IMMEDIATE 'INSERT INTO teams(year, teamID, name, conferenceID, divisionID, rank) VALUES (?, ?, ?, ?, ?, ?)' USING VALUES year_in, teamID_in, name_in, conferenceID_in, divisionID_in, rank_in; THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 685,
    "task": "Write a stored procedure to find the total number of wins by a team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the total number of wins by a team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE totalTeamWins(teamID_in IN VARCHAR2, year_in IN NUMBER, totalWins OUT NUMBER) IS BEGIN SELECT SUM(wins) INTO totalWins FROM teams WHERE teamID = teamID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE totalTeamWins(IN teamID_in STRING, IN year_in INTEGER) AS VAR totalWins INTEGER; totalWins = (SELECT SUM(wins) FROM teams WHERE teamID = teamID_in AND year = year_in); THROW 'Total wins: ' || totalWins; END_PROCEDURE;"
  },
  {
    "number": 686,
    "task": "Create a stored procedure to update the conferenceID of a specific team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to update the conferenceID of a specific team.",
    "input": "CREATE OR REPLACE PROCEDURE updateConferenceID(teamID_in IN VARCHAR2, conferenceID_in IN VARCHAR2) IS BEGIN EXECUTE IMMEDIATE 'UPDATE teams SET conferenceID = :1 WHERE teamID = :2' USING conferenceID_in, teamID_in; END;",
    "output": "CREATE PROCEDURE updateConferenceID(IN teamID_in STRING, IN conferenceID_in STRING) AS EXECUTE IMMEDIATE 'UPDATE teams SET conferenceID = ? WHERE teamID = ?' USING VALUES conferenceID_in, teamID_in; THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 687,
    "task": "Create a stored procedure to delete a record from scoring table based on playerID, year, stint and teamID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to delete a record from scoring table based on playerID, year, stint and teamID.",
    "input": "CREATE OR REPLACE PROCEDURE deleteScoring(playerID_in IN VARCHAR2, year_in IN NUMBER, stint_in IN NUMBER, teamID_in IN VARCHAR2) IS BEGIN EXECUTE IMMEDIATE 'DELETE FROM scoring WHERE playerID = :1 AND year = :2 AND stint = :3 AND teamID = :4' USING playerID_in, year_in, stint_in, teamID_in; END;",
    "output": "CREATE PROCEDURE deleteScoring(IN playerID_in STRING, IN year_in INTEGER, IN stint_in INTEGER, IN teamID_in STRING) AS EXECUTE IMMEDIATE 'DELETE FROM scoring WHERE playerID = ? AND year = ? AND stint = ? AND teamID = ?' USING VALUES playerID_in, year_in, stint_in, teamID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 688,
    "task": "Write a stored procedure that returns stints and position of a player based on their playerID and year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that returns stints and position of a player based on their playerID and year.",
    "input": "CREATE OR REPLACE PROCEDURE selectPlayerStintsPosition(playerID_in IN VARCHAR2, year_in IN NUMBER, stint OUT NUMBER, position OUT VARCHAR2) IS BEGIN SELECT stint, position INTO stint, position FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE selectPlayerStintsPosition(IN playerID_in STRING, IN year_in INTEGER) AS VAR stint INTEGER, position STRING; stint, position = (SELECT stint, position FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Stint: ' || stint || ', Position: ' || position; END_PROCEDURE;"
  },
  {
    "number": 689,
    "task": "Write a stored procedure to insert a new scoring record into the scoring table with provided details.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to insert a new scoring record into the scoring table with provided details.",
    "input": "CREATE OR REPLACE PROCEDURE insertScoring(playerID_in IN VARCHAR2, year_in IN NUMBER, stint_in IN NUMBER, teamID_in IN VARCHAR2, position_in IN VARCHAR2, gamesPlayed_in IN NUMBER, goals_in IN NUMBER, assists_in IN NUMBER, penaltyMinutes_in IN NUMBER) IS BEGIN EXECUTE IMMEDIATE 'INSERT INTO scoring(playerID, year, stint, teamID, position, gamesPlayed, goals, assists, penaltyMinutes) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9)' USING playerID_in, year_in, stint_in, teamID_in, position_in, gamesPlayed_in, goals_in, assists_in, penaltyMinutes_in; END;",
    "output": "CREATE PROCEDURE insertScoring(IN playerID_in STRING, IN year_in INTEGER, IN stint_in INTEGER, IN teamID_in STRING, IN position_in STRING, IN gamesPlayed_in INTEGER, IN goals_in INTEGER, IN assists_in INTEGER, IN penaltyMinutes_in INTEGER) AS EXECUTE IMMEDIATE 'INSERT INTO scoring(playerID, year, stint, teamID, position, gamesPlayed, goals, assists, penaltyMinutes) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)' USING VALUES playerID_in, year_in, stint_in, teamID_in, position_in, gamesPlayed_in, goals_in, assists_in, penaltyMinutes_in; THROW 'SUCCCESS'; END_PROCEDURE;"
  },
  {
    "number": 690,
    "task": "Create a stored procedure to find the total number of assists by a player in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the total number of assists by a player in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE totalPlayerAssists(playerID_in IN VARCHAR2, year_in IN NUMBER, totalAssists OUT NUMBER) IS BEGIN SELECT SUM(assists) INTO totalAssists FROM scoring WHERE playerID = playerID_in AND year = year_in; END;",
    "output": "CREATE PROCEDURE totalPlayerAssists(IN playerID_in STRING, IN year_in INTEGER) AS VAR totalAssists INTEGER; totalAssists = (SELECT SUM(assists) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total assists: ' || totalAssists; END_PROCEDURE;"
  },
  {
    "number": 690,
    "task": "Create a stored procedure to find the total number of assists by a player in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to find the total number of assists by a player in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE totalPlayerAssists(playerID_in IN VARCHAR2, year_in IN NUMBER) IS totalAssists NUMBER; BEGIN SELECT SUM(assists) INTO totalAssists FROM scoring WHERE playerID = playerID_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('Total assists: ' || totalAssists); END totalPlayerAssists;",
    "output": "CREATE PROCEDURE totalPlayerAssists(IN playerID_in STRING, IN year_in INTEGER) AS VAR totalAssists INTEGER; totalAssists = (SELECT SUM(assists) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW 'Total assists: ' || totalAssists; END_PROCEDURE;"
  },
  {
    "number": 691,
    "task": "Write a stored procedure that returns all details of a scoring record based on playerID, year, stint and teamID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that returns all details of a scoring record based on playerID, year, stint and teamID.",
    "input": "CREATE OR REPLACE PROCEDURE selectScoringDetails(playerID_in IN VARCHAR2, year_in IN NUMBER, stint_in IN NUMBER, teamID_in IN VARCHAR2) IS gamesPlayed NUMBER; goals NUMBER; assists NUMBER; penaltyMinutes NUMBER; BEGIN SELECT gamesPlayed, goals, assists, penaltyMinutes INTO gamesPlayed, goals, assists, penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in; DBMS_OUTPUT.PUT_LINE('Games Played: ' || gamesPlayed || ', Goals: ' || goals || ', Assists: ' || assists || ', Penalty Minutes: ' || penaltyMinutes); END selectScoringDetails;",
    "output": "CREATE PROCEDURE selectScoringDetails(IN playerID_in STRING, IN year_in INTEGER, IN stint_in INTEGER, IN teamID_in STRING) AS VAR gamesPlayed INTEGER, goals INTEGER, assists INTEGER, penaltyMinutes INTEGER; gamesPlayed, goals, assists, penaltyMinutes = (SELECT gamesPlayed, goals, assists, penaltyMinutes FROM scoring WHERE playerID = playerID_in AND year = year_in AND stint = stint_in AND teamID = teamID_in); THROW 'Games Played: ' || gamesPlayed || ', Goals: ' || goals || ', Assists: ' || assists || ', Penalty Minutes: ' || penaltyMinutes; END_PROCEDURE;"
  },
  {
    "number": 692,
    "task": "Select all players from the 'players' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Select all players from the 'players' table",
    "input": "CREATE OR REPLACE PROCEDURE selectAllPlayers IS TYPE players_table IS TABLE OF VARCHAR2(255); allPlayers players_table; BEGIN SELECT playerID BULK COLLECT INTO allPlayers FROM players; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END selectAllPlayers;",
    "output": "CREATE PROCEDURE selectAllPlayers AS VAR allPlayers = (SELECT playerID FROM players); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 693,
    "task": "Select all teams from the 'teams' table",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Select all teams from the 'teams' table",
    "input": "CREATE OR REPLACE PROCEDURE selectAllTeams IS TYPE teams_table IS TABLE OF VARCHAR2(255); allTeams teams_table; BEGIN SELECT teamID BULK COLLECT INTO allTeams FROM teams; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END selectAllTeams;",
    "output": "CREATE PROCEDURE selectAllTeams AS VAR allTeams = (SELECT teamID FROM teams); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 694,
    "task": "Count all hockey players",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Count all hockey players",
    "input": "CREATE OR REPLACE PROCEDURE countAllHockeyPlayers IS countPlayers NUMBER; BEGIN SELECT COUNT(Id) INTO countPlayers FROM Hockey; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END countAllHockeyPlayers;",
    "output": "CREATE PROCEDURE countAllHockeyPlayers AS VAR countPlayers = (SELECT COUNT(Id) FROM Hockey); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 695,
    "task": "How to create a stored procedure that pulls a player's first name, last name, and the number of goals they scored for a specified year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that pulls a player's first name, last name, and the number of goals they scored for a specified year?",
    "input": "CREATE OR REPLACE PROCEDURE get_player_goals_in_year(player_id_in IN VARCHAR2, year_in IN NUMBER) IS first_name VARCHAR2(255); last_name VARCHAR2(255); goal_count NUMBER; BEGIN SELECT firstName, lastName INTO first_name, last_name FROM players WHERE playerID = player_id_in; SELECT goals INTO goal_count FROM scoring WHERE playerID = player_id_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(first_name || ' ' || last_name || ' scored ' || goal_count || ' goals in ' || year_in || '.'); END get_player_goals_in_year;",
    "output": "CREATE OR REPLACE PROCEDURE get_player_goals_in_year(player_id_in STRING, year_in INTEGER) AS VAR first_name STRING, last_name STRING, goal_count INTEGER; first_name, last_name = (SELECT firstName, lastName FROM players WHERE playerID = player_id_in); goal_count = (SELECT goals FROM scoring WHERE playerID = player_id_in AND year = year_in); THROW first_name || ' ' || last_name || ' scored ' || goal_count || ' goals in ' || year_in || '.'; END_PROCEDURE;"
  },
  {
    "number": 696,
    "task": "How to create a stored procedure that pulls a team's total wins for a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that pulls a team's total wins for a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_wins_in_year(team_id_in IN VARCHAR2, year_in IN NUMBER) IS team_name VARCHAR2(255); win_count NUMBER; BEGIN SELECT name INTO team_name FROM teams WHERE teamID = team_id_in AND year = year_in; SELECT wins INTO win_count FROM teams WHERE teamID = team_id_in AND year = year_in; DBMS_OUTPUT.PUT_LINE(team_name || ' had ' || win_count || ' wins in ' || year_in || '.'); END get_team_wins_in_year;",
    "output": "CREATE OR REPLACE PROCEDURE get_team_wins_in_year(team_id_in STRING, year_in INTEGER) AS VAR team_name STRING, win_count INTEGER; team_name = (SELECT name FROM teams WHERE teamID = team_id_in AND year = year_in); win_count = (SELECT wins FROM teams WHERE teamID = team_id_in AND year = year_in); THROW team_name || ' had ' || win_count || ' wins in ' || year_in || '.'; END_PROCEDURE;"
  },
  {
    "number": 698,
    "task": "Write a stored procedure that retrieves the first and last name of the player who has scored the most goals in the 'scoring' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that retrieves the first and last name of the player who has scored the most goals in the 'scoring' table.",
    "input": "CREATE OR REPLACE PROCEDURE top_scorer AS playerID players.playerID%TYPE; topScorer_firstName players.firstName%TYPE; topScorer_lastName players.lastName%TYPE; BEGIN SELECT playerID INTO playerID FROM (SELECT playerID FROM scoring ORDER BY goals DESC) WHERE ROWNUM = 1; SELECT firstName, lastName INTO topScorer_firstName, topScorer_lastName FROM players WHERE playerID = playerID; DBMS_OUTPUT.PUT_LINE('Player: ' || topScorer_firstName || ' ' || topScorer_lastName); END top_scorer;",
    "output": "CREATE PROCEDURE top_scorer AS VAR playerID String = (SELECT playerID FROM scoring ORDER BY goals DESC LIMIT 1), topScorer_firstName String, topScorer_lastName String; topScorer_firstName, topScorer_lastName = (SELECT firstName,lastName FROM players WHERE playerID = playerID); THROW 'Player: '||topScorer_firstName||' '||topScorer_lastName; END_PROCEDURE;"
  },
  {
    "number": 699,
    "task": "Write a stored procedure to list the playerID of each player who has played in more than 300 games.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to list the playerID of each player who has played in more than 300 games.",
    "input": "CREATE OR REPLACE PROCEDURE frequent_players AS CURSOR frequentPlayerID_cur IS SELECT playerID FROM players JOIN scoring ON scoring.playerID = players.playerID WHERE scoring.gamesPlayed > 300; frequentPlayerID players.playerID%TYPE; BEGIN OPEN frequentPlayerID_cur; LOOP FETCH frequentPlayerID_cur INTO frequentPlayerID; EXIT WHEN frequentPlayerID_cur%NOTFOUND; DBMS_OUTPUT.PUT_LINE('frequentPlayerID=' || frequentPlayerID); END LOOP; CLOSE frequentPlayerID_cur; END frequent_players;",
    "output": "CREATE PROCEDURE frequent_players AS VAR frequentPlayerID String= (SELECT playerID FROM players, scoring WHERE scoring.playerID = players.playerID AND scoring.gamesPlayed > 300); THROW 'frequentPlayerID='||frequentPlayerID; END_PROCEDURE;"
  },
  {
    "number": 700,
    "task": "Write a stored procedure to list all the distinct teams a player has played for.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to list all the distinct teams a player has played for.",
    "input": "CREATE OR REPLACE PROCEDURE list_player_teams(playerID_in IN players.playerID%TYPE) AS team_list scoring.team%TYPE; CURSOR teams_cur IS SELECT DISTINCT team FROM scoring WHERE playerID = playerID_in; BEGIN OPEN teams_cur; LOOP FETCH teams_cur INTO team_list; EXIT WHEN teams_cur%NOTFOUND; DBMS_OUTPUT.PUT_LINE('Teams=' || team_list); END LOOP; CLOSE teams_cur; END list_player_teams;",
    "output": "CREATE PROCEDURE list_player_teams(IN playerID_in String) AS VAR team_list String = (SELECT DISTINCT team FROM scoring WHERE playerID = playerID_in); THROW 'Teams='||team_list; END_PROCEDURE;"
  },
  {
    "number": 701,
    "task": "Write a stored procedure that retrieves the name of the team with the most wins in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that retrieves the name of the team with the most wins in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE top_team(year_in IN teams.year%TYPE) AS teamID teams.teamID%TYPE; topTeam_name teams.name%TYPE; BEGIN SELECT teamID INTO teamID FROM (SELECT teamID FROM teams WHERE year = year_in ORDER BY wins DESC) WHERE ROWNUM = 1; SELECT name INTO topTeam_name FROM teams WHERE teamID = teamID; DBMS_OUTPUT.PUT_LINE('Top team: ' || topTeam_name); END top_team;",
    "output": "CREATE PROCEDURE top_team(IN year_in INTEGER) AS VAR teamID String = (SELECT teamID FROM teams WHERE year = year_in ORDER BY wins DESC LIMIT 1), topTeam_name String; topTeam_name = (SELECT name FROM teams WHERE teamID = teamID); THROW 'Top team: '||topTeam_name; END_PROCEDURE;"
  },
  {
    "number": 702,
    "task": "Write a stored procedure that calculates the total number of games played by a player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that calculates the total number of games played by a player.",
    "input": "CREATE OR REPLACE PROCEDURE total_games(playerID_in IN players.playerID%TYPE) AS totalGames scoring.gamesPlayed%TYPE; BEGIN SELECT SUM(gamesPlayed) INTO totalGames FROM scoring WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Total games=' || totalGames); END total_games;",
    "output": "CREATE PROCEDURE total_games(IN playerID_in String) AS VAR totalGames INTEGER = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = playerID_in); THROW 'Total games='+totalGames; END_PROCEDURE;"
  },
  {
    "number": 703,
    "task": "Write a stored procedure to retrieve the player who scored most goals in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to retrieve the player who scored most goals in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE yearly_top_scorer(year_in IN scoring.year%TYPE) AS playerID players.playerID%TYPE; topScorer_name players.firstName%TYPE; BEGIN SELECT playerID INTO playerID FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC) WHERE ROWNUM = 1; SELECT firstName || ' ' || lastName INTO topScorer_name FROM players WHERE playerID = playerID; DBMS_OUTPUT.PUT_LINE('Top scorer: ' || topScorer_name); END yearly_top_scorer;",
    "output": "CREATE PROCEDURE yearly_top_scorer(IN year_in INTEGER) AS VAR playerID String = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC LIMIT 1), topScorer_name String; topScorer_name = (SELECT firstName||' '||lastName FROM players WHERE playerID = playerID); THROW 'Top scorer: '||topScorer_name; END_PROCEDURE;"
  },
  {
    "number": 704,
    "task": "Write a stored procedure to check if a player has played for a specific team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to check if a player has played for a specific team.",
    "input": "CREATE OR REPLACE PROCEDURE check_team(playerID_in IN players.playerID%TYPE, team_in IN scoring.team%TYPE) AS player_team scoring.team%TYPE; BEGIN SELECT team INTO player_team FROM scoring WHERE playerID = playerID_in AND team = team_in; DBMS_OUTPUT.PUT_LINE('Player played for team:' || player_team); EXCEPTION WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('Player did not play for the team.'); END check_team;",
    "output": "CREATE PROCEDURE check_team(IN playerID_in String, IN team_in String) AS VAR player_team String = (SELECT team FROM scoring WHERE playerID = playerID_in AND team = team_in); THROW 'Player played for team:'||player_team; END_PROCEDURE;"
  },
  {
    "number": 705,
    "task": "Write a stored procedure to get the total number of goals and assists by a player.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the total number of goals and assists by a player.",
    "input": "CREATE OR REPLACE PROCEDURE total_goals_assists(playerID_in IN players.playerID%TYPE) AS totalGoals scoring.goals%TYPE; totalAssists scoring.assists%TYPE; BEGIN SELECT SUM(goals) INTO totalGoals FROM scoring WHERE playerID = playerID_in; SELECT SUM(assists) INTO totalAssists FROM scoring WHERE playerID = playerID_in; DBMS_OUTPUT.PUT_LINE('Total goals=' || totalGoals || ', Total assists=' || totalAssists); END total_goals_assists;",
    "output": "CREATE PROCEDURE total_goals_assists(IN playerID_in String) AS VAR totalGoals INTEGER = (SELECT SUM(goals) FROM scoring WHERE playerID = playerID_in), totalAssists INTEGER = (SELECT SUM(assists) FROM scoring WHERE playerID = playerID_in); THROW 'Total goals='+totalGoals||', Total assists='+totalAssists; END_PROCEDURE;"
  },
  {
    "number": 706,
    "task": "Write a stored procedure to get the average weight of players in a specific position.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the average weight of players in a specific position.",
    "input": "CREATE OR REPLACE PROCEDURE avg_weight(position_in IN players.position%TYPE) AS ave_weight players.weight%TYPE; BEGIN SELECT AVG(weight) INTO ave_weight FROM players WHERE position = position_in; DBMS_OUTPUT.PUT_LINE('Average weight=' || ave_weight); END avg_weight;",
    "output": "CREATE PROCEDURE avg_weight(IN position_in String) AS VAR ave_weight INTEGER = (SELECT AVG(weight) FROM players WHERE position = position_in); THROW 'Average weight='+ave_weight; END_PROCEDURE;"
  },
  {
    "number": 707,
    "task": "Write a stored procedure to get the names of all players who have received a specific number of penalty minutes.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the names of all players who have received a specific number of penalty minutes.",
    "input": "CREATE OR REPLACE PROCEDURE get_penalized_players(penaltyMinutes_in IN scoring.penaltyMinutes%TYPE) AS penalizedPlayers CURSOR IS SELECT firstName || ' ' || lastName FROM players JOIN scoring ON scoring.playerID = players.playerID WHERE penaltyMinutes = penaltyMinutes_in; player_name players.firstName%TYPE; BEGIN OPEN penalizedPlayers; LOOP FETCH penalizedPlayers INTO player_name; EXIT WHEN penalizedPlayers%NOTFOUND; DBMS_OUTPUT.PUT_LINE('Penalized Players=' || player_name); END LOOP; CLOSE penalizedPlayers; END get_penalized_players;",
    "output": "CREATE PROCEDURE get_penalized_players(IN penaltyMinutes_in INTEGER) AS VAR penalizedPlayers String = (SELECT firstName||' '||lastName FROM players,scoring WHERE scoring.playerID = players.playerID AND penaltyMinutes = penaltyMinutes_in); THROW 'Penalized Players='+penalizedPlayers; END_PROCEDURE;"
  },
  {
    "number": 708,
    "task": "Write a stored procedure to return the player who has played the most number of games in the 'scoring' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to return the player who has played the most number of games in the 'scoring' table.",
    "input": "CREATE OR REPLACE PROCEDURE most_played AS playerID players.playerID%TYPE; mostPlayedPlayer_firstName players.firstName%TYPE; mostPlayedPlayer_lastName players.lastName%TYPE; BEGIN SELECT playerID INTO playerID FROM (SELECT playerID FROM scoring ORDER BY gamesPlayed DESC) WHERE ROWNUM = 1; SELECT firstName, lastName INTO mostPlayedPlayer_firstName, mostPlayedPlayer_lastName FROM players WHERE playerID = playerID; DBMS_OUTPUT.PUT_LINE('Player with most games: ' || mostPlayedPlayer_firstName || ' ' || mostPlayedPlayer_lastName); END most_played;",
    "output": "CREATE PROCEDURE most_played AS VAR playerID String = (SELECT playerID FROM scoring ORDER BY gamesPlayed DESC LIMIT 1), mostPlayedPlayer_firstName String, mostPlayedPlayer_lastName String; mostPlayedPlayer_firstName, mostPlayedPlayer_lastName = (SELECT firstName,lastName FROM players WHERE playerID = playerID); THROW 'Player with most games: '||mostPlayedPlayer_firstName||' '||mostPlayedPlayer_lastName; END_PROCEDURE;"
  },
  {
    "number": 709,
    "task": "Write a stored procedure to get the team with the least losses in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the team with the least losses in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE best_defense(year_in IN teams.year%TYPE) AS teamID teams.teamID%TYPE; bestDefense_name teams.name%TYPE; BEGIN SELECT teamID INTO teamID FROM (SELECT teamID FROM teams WHERE year = year_in ORDER BY losses ASC) WHERE ROWNUM = 1; SELECT name INTO bestDefense_name FROM teams WHERE teamID = teamID; DBMS_OUTPUT.PUT_LINE('Best defense: ' || bestDefense_name); END best_defense;",
    "output": "CREATE PROCEDURE best_defense(IN year_in INTEGER) AS VAR teamID String = (SELECT teamID FROM teams WHERE year = year_in ORDER BY losses ASC LIMIT 1), bestDefense_name String; bestDefense_name = (SELECT name FROM teams WHERE teamID = teamID); THROW 'Best defense: '||bestDefense_name; END_PROCEDURE;"
  },
  {
    "number": 710,
    "task": "Write a stored procedure to retrieve the total number of games won by a team in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to retrieve the total number of games won by a team in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE yearly_wins(year_in IN teams.year%TYPE, team_in IN teams.teamID%TYPE) AS yearlyWins teams.wins%TYPE; BEGIN SELECT wins INTO yearlyWins FROM teams WHERE year = year_in AND teamID = team_in; DBMS_OUTPUT.PUT_LINE('Yearly wins=' || yearlyWins); END yearly_wins;",
    "output": "CREATE PROCEDURE yearly_wins(IN year_in INTEGER, IN team_in String) AS VAR yearlyWins INTEGER = (SELECT wins FROM teams WHERE year = year_in AND teamID = team_in); THROW 'Yearly wins='+yearlyWins; END_PROCEDURE;"
  },
  {
    "number": 711,
    "task": "Write a stored procedure to list all the players who have played for a specific team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to list all the players who have played for a specific team.",
    "input": "CREATE OR REPLACE PROCEDURE list_team_players(team_in IN scoring.teamID%TYPE) AS playerList CURSOR IS SELECT firstName || ' ' || lastName FROM players JOIN scoring ON scoring.playerID = players.playerID WHERE scoring.teamID = team_in; player_name players.firstName%TYPE; BEGIN OPEN playerList; LOOP FETCH playerList INTO player_name; EXIT WHEN playerList%NOTFOUND; DBMS_OUTPUT.PUT_LINE('Players=' || player_name); END LOOP; CLOSE playerList; END list_team_players;",
    "output": "CREATE PROCEDURE list_team_players(IN team_in String) AS VAR playerList String = (SELECT firstName||' '||lastName FROM players, scoring WHERE scoring.playerID = players.playerID AND scoring.teamID = team_in); THROW 'Players='||playerList; END_PROCEDURE;"
  },
  {
    "number": 712,
    "task": "Write a stored procedure to get the total number of ties a team had in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get the total number of ties a team had in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE yearly_ties(year_in IN teams.year%TYPE, team_in IN teams.teamID%TYPE) AS yearlyTies teams.ties%TYPE; BEGIN SELECT ties INTO yearlyTies FROM teams WHERE year = year_in AND teamID = team_in; DBMS_OUTPUT.PUT_LINE('Yearly ties=' || yearlyTies); END yearly_ties;",
    "output": "CREATE PROCEDURE yearly_ties(IN year_in INTEGER, IN team_in String) AS VAR yearlyTies INTEGER = (SELECT ties FROM teams WHERE year = year_in AND teamID = team_in); THROW 'Yearly ties='+yearlyTies; END_PROCEDURE;"
  },
  {
    "number": 713,
    "task": "Write a stored procedure to return playerID, teamID and position of each player who has played as a 'Forward'",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to return playerID, teamID and position of each player who has played as a 'Forward'",
    "input": "CREATE OR REPLACE PROCEDURE get_forward_players AS forwardPlayers CURSOR IS SELECT playerID, teamID, position FROM scoring WHERE position = 'Forward'; player_record scoring%ROWTYPE; BEGIN OPEN forwardPlayers; LOOP FETCH forwardPlayers INTO player_record; EXIT WHEN forwardPlayers%NOTFOUND; DBMS_OUTPUT.PUT_LINE('Forward Players=' || player_record.playerID || ', ' || player_record.teamID || ', ' || player_record.position); END LOOP; CLOSE forwardPlayers; END get_forward_players;",
    "output": "CREATE PROCEDURE get_forward_players AS VAR forwardPlayers String = (SELECT playerID, teamID, position FROM scoring WHERE position = 'Forward'); THROW 'Forward Players='+forwardPlayers; END_PROCEDURE;"
  },
  {
    "number": 714,
    "task": "Write a stored procedure to find the maximum lastNHL year among all players.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the maximum lastNHL year among all players.",
    "input": "CREATE OR REPLACE PROCEDURE max_lastNHL AS max_lastNHL_year players.lastNHL%TYPE; BEGIN SELECT MAX(lastNHL) INTO max_lastNHL_year FROM players; DBMS_OUTPUT.PUT_LINE('Maximum lastNHL year=' || max_lastNHL_year); END max_lastNHL;",
    "output": "CREATE PROCEDURE max_lastNHL AS VAR max_lastNHL_year INTEGER = (SELECT MAX(lastNHL) FROM players); THROW 'Maximum lastNHL year='+max_lastNHL_year; END_PROCEDURE;"
  },
  {
    "number": 715,
    "task": "How can I write a stored procedure in NuoDB SQL to get a player's height by given player id?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can I write a stored procedure in NuoDB SQL to get a player's height by given player id?",
    "input": "CREATE OR REPLACE PROCEDURE get_height_by_id(player_id_in IN players.playerID%TYPE) AS player_height players.height%TYPE; BEGIN SELECT height INTO player_height FROM players WHERE playerID = player_id_in; DBMS_OUTPUT.PUT_LINE(player_height); END get_height_by_id;",
    "output": "CREATE PROCEDURE get_height_by_id(IN player_id_in STRING) AS VAR player_height INTEGER; player_height = (SELECT height FROM players WHERE playerID=player_id_in); THROW player_height; END_PROCEDURE;"
  },
  {
    "number": 716,
    "task": "How can I write a SQL stored procedure in NuoDB to return the team of a player by their player ID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can I write a SQL stored procedure in NuoDB to return the team of a player by their player ID?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_by_player_id(player_id_in IN scoring.playerID%TYPE) AS team_name Hockey.Team%TYPE; BEGIN SELECT Team INTO team_name FROM Hockey WHERE Id=(SELECT DISTINCT teamID FROM scoring WHERE playerID=player_id_in); DBMS_OUTPUT.PUT_LINE(team_name); END get_team_by_player_id;",
    "output": "CREATE PROCEDURE get_team_by_player_id(IN player_id_in STRING) AS VAR team_name STRING; team_name = (SELECT Team FROM Hockey WHERE Id=(SELECT DISTINCT teamID FROM scoring WHERE playerID=player_id_in)); THROW team_name; END_PROCEDURE;"
  },
  {
    "number": 717,
    "task": "How to write a NuoDB SQL Stored Procedure to retrieve the last player's name in the players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a NuoDB SQL Stored Procedure to retrieve the last player's name in the players table?",
    "input": "CREATE OR REPLACE PROCEDURE last_player_name AS player_name players.firstName%TYPE; BEGIN SELECT firstName INTO player_name FROM (SELECT firstName FROM players ORDER BY playerID DESC) WHERE ROWNUM = 1; DBMS_OUTPUT.PUT_LINE(player_name); END last_player_name;",
    "output": "CREATE PROCEDURE last_player_name AS VAR player_name STRING; player_name = (SELECT firstName FROM players ORDER BY playerID DESC LIMIT 1); THROW player_name; END_PROCEDURE;"
  },
  {
    "number": 718,
    "task": "Write a NuoDB SQL Stored Procedure to calculate the average height of all players?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to calculate the average height of all players?",
    "input": "CREATE OR REPLACE PROCEDURE average_height AS avg_height DOUBLE; BEGIN SELECT AVG(height) INTO avg_height FROM players; DBMS_OUTPUT.PUT_LINE(avg_height); END average_height;",
    "output": "CREATE PROCEDURE average_height AS VAR avg_height DOUBLE; avg_height = (SELECT AVG(height) FROM players); THROW avg_height; END_PROCEDURE;"
  },
  {
    "number": 719,
    "task": "How to write a NuoDB SQL Stored Procedure to count the total number of records in the players table?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a NuoDB SQL Stored Procedure to count the total number of records in the players table?",
    "input": "CREATE OR REPLACE PROCEDURE total_players AS total NUMBER; BEGIN SELECT COUNT(*) INTO total FROM players; DBMS_OUTPUT.PUT_LINE(total); END total_players;",
    "output": "CREATE PROCEDURE total_players AS VAR total INTEGER; total = (SELECT COUNT(*) FROM players); THROW total; END_PROCEDURE;"
  },
  {
    "number": 720,
    "task": "Write a NuoDB SQL Stored Procedure that retrieves a list of all player's names from the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that retrieves a list of all player's names from the players table.",
    "input": "CREATE OR REPLACE PROCEDURE all_player_names AS CURSOR player_cursor IS SELECT firstName FROM players; player_name players.firstName%TYPE; BEGIN OPEN player_cursor; LOOP FETCH player_cursor INTO player_name; EXIT WHEN player_cursor%NOTFOUND; DBMS_OUTPUT.PUT_LINE(player_name); END LOOP; CLOSE player_cursor; END all_player_names;",
    "output": "CREATE PROCEDURE all_player_names AS VAR players_list STRING; players_list = (SELECT STRING_AGG(firstName, ', ') FROM players); THROW players_list; END_PROCEDURE;"
  },
  {
    "number": 721,
    "task": "How to create a NuoDB SQL Stored Procedure to find the number of goals scored by a player in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL Stored Procedure to find the number of goals scored by a player in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE get_yearly_goals(player_id_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) AS yearly_goals scoring.goals%TYPE; BEGIN SELECT SUM(goals) INTO yearly_goals FROM scoring WHERE playerID=player_id_in AND year=year_in; DBMS_OUTPUT.PUT_LINE(yearly_goals); END get_yearly_goals;",
    "output": "CREATE PROCEDURE get_yearly_goals(IN player_id_in STRING, IN year_in INTEGER) AS VAR yearly_goals INTEGER; yearly_goals = (SELECT SUM(goals) FROM scoring WHERE playerID=player_id_in AND year=year_in); THROW yearly_goals; END_PROCEDURE;"
  },
  {
    "number": 722,
    "task": "How can I write a stored procedure in NuoDB SQL to get a player's weight by given player id?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can I write a stored procedure in NuoDB SQL to get a player's weight by given player id?",
    "input": "CREATE OR REPLACE PROCEDURE get_weight_by_id(player_id_in IN players.playerID%TYPE) AS player_weight players.weight%TYPE; BEGIN SELECT weight INTO player_weight FROM players WHERE playerID=player_id_in; DBMS_OUTPUT.PUT_LINE(player_weight); END get_weight_by_id;",
    "output": "CREATE PROCEDURE get_weight_by_id(IN player_id_in STRING) AS VAR player_weight INTEGER; player_weight = (SELECT weight FROM players WHERE playerID=player_id_in); THROW player_weight; END_PROCEDURE;"
  },
  {
    "number": 723,
    "task": "How to write a NuoDB SQL Stored Procedure to count the total number of games won by a team in a specific year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a NuoDB SQL Stored Procedure to count the total number of games won by a team in a specific year?",
    "input": "CREATE OR REPLACE PROCEDURE count_wins(team_id_in IN teams.teamID%TYPE, year_in IN teams.year%TYPE) AS total_wins teams.wins%TYPE; BEGIN SELECT SUM(wins) INTO total_wins FROM teams WHERE teamID=team_id_in AND year=year_in; DBMS_OUTPUT.PUT_LINE(total_wins); END count_wins;",
    "output": "CREATE PROCEDURE count_wins(IN team_id_in STRING, IN year_in INTEGER) AS VAR total_wins INTEGER; total_wins = (SELECT SUM(wins) FROM teams WHERE teamID=team_id_in AND year=year_in); THROW total_wins; END_PROCEDURE;"
  },
  {
    "number": 724,
    "task": "Write a NuoDB SQL Stored Procedure to get a player's position by their player ID?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to get a player's position by their player ID?",
    "input": "CREATE OR REPLACE PROCEDURE get_position_by_id(player_id_in IN players.playerID%TYPE) AS player_position players.position%TYPE; BEGIN SELECT position INTO player_position FROM players WHERE playerID=player_id_in; DBMS_OUTPUT.PUT_LINE(player_position); END get_position_by_id;",
    "output": "CREATE PROCEDURE get_position_by_id(IN player_id_in STRING) AS VAR player_position STRING; player_position = (SELECT position FROM players WHERE playerID=player_id_in); THROW player_position; END_PROCEDURE;"
  },
  {
    "number": 725,
    "task": "How can I write a SQL stored procedure in NuoDB to return the total goals of a team in a particular year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can I write a SQL stored procedure in NuoDB to return the total goals of a team in a particular year?",
    "input": "CREATE OR REPLACE PROCEDURE get_team_goals_by_year(team_id_in IN scoring.teamID%TYPE, year_in IN scoring.year%TYPE) AS team_goals scoring.goals%TYPE; BEGIN SELECT SUM(goals) INTO team_goals FROM scoring WHERE teamID=team_id_in AND year=year_in; DBMS_OUTPUT.PUT_LINE(team_goals); END get_team_goals_by_year;",
    "output": "CREATE PROCEDURE get_team_goals_by_year(IN team_id_in STRING, IN year_in INTEGER) AS VAR team_goals INTEGER; team_goals = (SELECT SUM(goals) FROM scoring WHERE teamID=team_id_in AND year=year_in); THROW team_goals; END_PROCEDURE;"
  },
  {
    "number": 726,
    "task": "Write a NuoDB SQL Stored Procedure that retrieves the last name of a player given their player id.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that retrieves the last name of a player given their player id.",
    "input": "CREATE OR REPLACE PROCEDURE get_last_name_by_id(player_id_in IN players.playerID%TYPE) AS last_name players.lastName%TYPE; BEGIN SELECT lastName INTO last_name FROM players WHERE playerID=player_id_in; DBMS_OUTPUT.PUT_LINE(last_name); END get_last_name_by_id;",
    "output": "CREATE PROCEDURE get_last_name_by_id(IN player_id_in STRING) AS VAR last_name STRING; last_name = (SELECT lastName FROM players WHERE playerID=player_id_in); THROW last_name; END_PROCEDURE;"
  },
  {
    "number": 727,
    "task": "How to write a NuoDB SQL Stored Procedure to calculate the heaviest player's weight?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a NuoDB SQL Stored Procedure to calculate the heaviest player's weight?",
    "input": "CREATE OR REPLACE PROCEDURE max_weight AS max_wt players.weight%TYPE; BEGIN SELECT MAX(weight) INTO max_wt FROM players; DBMS_OUTPUT.PUT_LINE(max_wt); END max_weight;",
    "output": "CREATE PROCEDURE max_weight AS VAR max_wt INTEGER; max_wt = (SELECT MAX(weight) FROM players); THROW max_wt; END_PROCEDURE;"
  },
  {
    "number": 728,
    "task": "Write a stored procedure in NuoDB SQL to update the player position in the hockey table identified by a specific id.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL to update the player position in the hockey table identified by a specific id.",
    "input": "CREATE OR REPLACE PROCEDURE UpdatePlayerPositionById(id_in IN hockey.Id%TYPE, position_in IN hockey.Position%TYPE) AS BEGIN UPDATE hockey SET Position = position_in WHERE Id = id_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END UpdatePlayerPositionById;",
    "output": "CREATE OR REPLACE PROCEDURE UpdatePlayerPositionById(IN id_in BIGINT, IN position_in STRING) AS UPDATE hockey SET Position = position_in WHERE Id = id_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 729,
    "task": "Create a stored procedure that fetches the sum of all goals made by a player in a particular year in NuoDB SQL.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that fetches the sum of all goals made by a player in a particular year in NuoDB SQL.",
    "input": "CREATE OR REPLACE PROCEDURE FetchPlayerGoalsByYear(player_id_in IN scoring.playerID%TYPE, year_in IN scoring.year%TYPE) AS total_goals scoring.goals%TYPE; BEGIN SELECT SUM(goals) INTO total_goals FROM scoring WHERE playerID = player_id_in AND year = year_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END FetchPlayerGoalsByYear;",
    "output": "CREATE OR REPLACE PROCEDURE FetchPlayerGoalsByYear(IN player_id_in STRING, IN year_in INTEGER) AS VAR total_goals INTEGER; total_goals = (SELECT SUM(goals) FROM scoring WHERE playerID = player_id_in AND year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 730,
    "task": "Write a stored procedure in NuoDB SQL that inserts a new player into the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL that inserts a new player into the players table.",
    "input": "CREATE OR REPLACE PROCEDURE InsertPlayer(playerID_in IN players.playerID%TYPE, firstName_in IN players.firstName%TYPE, lastName_in IN players.lastName%TYPE, height_in IN players.height%TYPE, weight_in IN players.weight%TYPE, firstNHL_in IN players.firstNHL%TYPE, lastNHL_in IN players.lastNHL%TYPE, position_in IN players.position%TYPE, birthYear_in IN players.birthYear%TYPE, birthMon_in IN players.birthMon%TYPE, birthDay_in IN players.birthDay%TYPE, birthCountry_in IN players.birthCountry%TYPE, birthState_in IN players.birthState%TYPE, birthCity_in IN players.birthCity%TYPE) AS BEGIN INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES(playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); COMMIT; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END InsertPlayer;",
    "output": "CREATE OR REPLACE PROCEDURE InsertPlayer(IN playerID_in STRING, IN firstName_in STRING, IN lastName_in STRING, IN height_in INTEGER, IN weight_in INTEGER, IN firstNHL_in INTEGER, IN lastNHL_in INTEGER, IN position_in STRING, IN birthYear_in INTEGER, IN birthMon_in INTEGER, IN birthDay_in INTEGER, IN birthCountry_in STRING, IN birthState_in STRING, IN birthCity_in STRING) AS INSERT INTO players(playerID, firstName, lastName, height, weight, firstNHL, lastNHL, position, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity) VALUES(playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, lastNHL_in, position_in, birthYear_in, birthMon_in, birthDay_in, birthCountry_in, birthState_in, birthCity_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 731,
    "task": "Create a stored procedure in NuoDB SQL to fetch the Country where the most number of players are born.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure in NuoDB SQL to fetch the Country where the most number of players are born.",
    "input": "CREATE OR REPLACE PROCEDURE FetchMostCommonBirthCountry AS country_name players.birthCountry%TYPE; BEGIN SELECT birthCountry INTO country_name FROM players GROUP BY birthCountry ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END FetchMostCommonBirthCountry;",
    "output": "CREATE OR REPLACE PROCEDURE FetchMostCommonBirthCountry AS VAR country_name STRING; country_name = (SELECT birthCountry FROM players GROUP BY birthCountry ORDER BY COUNT(*) DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 732,
    "task": "Write a stored procedure in NuoDB SQL to calculate the average weight of players of a certain team in a particular year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL to calculate the average weight of players of a certain team in a particular year.",
    "input": "CREATE OR REPLACE PROCEDURE CalculateAverageTeamWeight(teamID_in IN scoring.teamID%TYPE, year_in IN scoring.year%TYPE) AS avg_weight NUMBER; BEGIN SELECT AVG(players.weight) INTO avg_weight FROM players JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamID_in AND scoring.year = year_in; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END CalculateAverageTeamWeight;",
    "output": "CREATE OR REPLACE PROCEDURE CalculateAverageTeamWeight(IN teamID_in STRING, IN year_in INTEGER) AS VAR avg_weight INTEGER; avg_weight = (SELECT AVG(players.weight) FROM players JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamID_in AND scoring.year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 733,
    "task": "Create a NuoDB SQL stored procedure to find the player who has the maximum height.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL stored procedure to find the player who has the maximum height.",
    "input": "CREATE OR REPLACE PROCEDURE FetchTallPlayer AS tall_player players.playerID%TYPE; BEGIN SELECT playerID INTO tall_player FROM players ORDER BY height DESC FETCH FIRST 1 ROWS ONLY; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END FetchTallPlayer;",
    "output": "CREATE OR REPLACE PROCEDURE FetchTallPlayer AS VAR tall_player STRING; tall_player = (SELECT playerID FROM players ORDER BY height DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 734,
    "task": "Write a stored procedure in NuoDB SQL to fetch the player with the most penalty minutes in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL to fetch the player with the most penalty minutes in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE FetchPlayerWithMostPenalties(year_in IN scoring.year%TYPE) AS player_id scoring.playerID%TYPE; BEGIN SELECT playerID INTO player_id FROM scoring WHERE year = year_in ORDER BY penaltyMinutes DESC FETCH FIRST 1 ROWS ONLY; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END FetchPlayerWithMostPenalties;",
    "output": "CREATE OR REPLACE PROCEDURE FetchPlayerWithMostPenalties(IN year_in INTEGER) AS VAR player_id STRING; player_id = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY penaltyMinutes DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 735,
    "task": "Create a NuoDB SQL stored procedure to return the player with the grade with the maximum assists in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL stored procedure to return the player with the grade with the maximum assists in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE FetchTopAssistPlayer(year_in IN scoring.year%TYPE) AS player_id scoring.playerID%TYPE; BEGIN SELECT playerID INTO player_id FROM scoring WHERE year = year_in ORDER BY assists DESC FETCH FIRST 1 ROWS ONLY; DBMS_OUTPUT.PUT_LINE('SUCCESS'); END FetchTopAssistPlayer;",
    "output": "CREATE OR REPLACE PROCEDURE FetchTopAssistPlayer(IN year_in INTEGER) AS VAR player_id STRING; player_id = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY assists DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 736,
    "task": "Write a stored procedure in NuoDB SQL that updates the team conference in the teams table identified by a specific teamID and year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL that updates the team conference in the teams table identified by a specific teamID and year.",
    "input": "CREATE OR REPLACE PROCEDURE UpdateTeamConference(year_in IN NUMBER, teamID_in IN VARCHAR2, conferenceID_in IN VARCHAR2) AS BEGIN UPDATE teams SET conferenceID = conferenceID_in WHERE year = year_in AND teamID = teamID_in; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE UpdateTeamConference(IN year_in INTEGER, IN teamID_in STRING, IN conferenceID_in STRING) AS UPDATE teams SET conferenceID = conferenceID_in WHERE year = year_in AND teamID = teamID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 737,
    "task": "Write a stored procedure in NuoDB SQL that deletes a player from the players table who retired before year 2000.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL that deletes a player from the players table who retired before year 2000.",
    "input": "CREATE OR REPLACE PROCEDURE DeletePlayerRetiredPre2000(playerID_in IN VARCHAR2) AS BEGIN DELETE FROM players WHERE playerID = playerID_in AND lastNHL < 2000; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE DeletePlayerRetiredPre2000(IN playerID_in STRING) AS DELETE FROM players WHERE playerID = playerID_in AND lastNHL < 2000; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 738,
    "task": "Create a stored procedure in NuoDB SQL to calculate the average height of players who played in a certain team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure in NuoDB SQL to calculate the average height of players who played in a certain team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE CalculateAverageTeamHeight(teamID_in IN VARCHAR2, year_in IN NUMBER) AS avg_height NUMBER; BEGIN SELECT AVG(players.height) INTO avg_height FROM players JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamID_in AND scoring.year = year_in; END;",
    "output": "CREATE OR REPLACE PROCEDURE CalculateAverageTeamHeight(IN teamID_in STRING, IN year_in INTEGER) AS VAR avg_height INTEGER; avg_height = (SELECT AVG(players.height) FROM players JOIN scoring ON players.playerID = scoring.playerID WHERE scoring.teamID = teamID_in AND scoring.year = year_in); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 739,
    "task": "Write a stored procedure in NuoDB SQL that updates the position of a player in the scoring table for a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL that updates the position of a player in the scoring table for a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE UpdatePlayerPosition(playerID_in IN VARCHAR2, year_in IN NUMBER, position_in IN VARCHAR2) AS BEGIN UPDATE scoring SET position = position_in WHERE playerID = playerID_in AND year = year_in; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE UpdatePlayerPosition(IN playerID_in STRING, IN year_in INTEGER, IN position_in STRING) AS UPDATE scoring SET position = position_in WHERE playerID = playerID_in AND year = year_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 740,
    "task": "Create a stored procedure in NuoDB SQL to find the player who has scored the maximum goals in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure in NuoDB SQL to find the player who has scored the maximum goals in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE FetchTopGoalScorer(year_in IN NUMBER) AS player_id VARCHAR2(100); BEGIN SELECT playerID INTO player_id FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC) WHERE ROWNUM = 1; END;",
    "output": "CREATE OR REPLACE PROCEDURE FetchTopGoalScorer(IN year_in INTEGER) AS VAR player_id STRING; player_id = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 741,
    "task": "Write a stored procedure in NuoDB SQL to update the birth place details of a player in the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL to update the birth place details of a player in the players table.",
    "input": "CREATE OR REPLACE PROCEDURE UpdatePlayerBirthDetails(playerID_in IN VARCHAR2, country_in IN VARCHAR2, state_in IN VARCHAR2, city_in IN VARCHAR2) AS BEGIN UPDATE players SET birthCountry = country_in, birthState = state_in, birthCity = city_in WHERE playerID = playerID_in; COMMIT; END;",
    "output": "CREATE OR REPLACE PROCEDURE UpdatePlayerBirthDetails(IN playerID_in STRING, IN country_in STRING, IN state_in STRING, IN city_in STRING) AS UPDATE players SET birthCountry = country_in, birthState = state_in, birthCity = city_in WHERE playerID = playerID_in; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 742,
    "task": "Create a stored procedure in NuoDB SQL to fetch the average weight and height of all players.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure in NuoDB SQL to fetch the average weight and height of all players.",
    "input": "CREATE OR REPLACE PROCEDURE FetchAvgPlayerDetails AS avg_weight NUMBER; avg_height NUMBER; BEGIN SELECT AVG(weight) INTO avg_weight FROM players; SELECT AVG(height) INTO avg_height FROM players; END;",
    "output": "CREATE OR REPLACE PROCEDURE FetchAvgPlayerDetails AS VAR avg_weight INTEGER; VAR avg_height INTEGER; avg_weight = (SELECT AVG(weight) FROM players); avg_height = (SELECT AVG(height) FROM players); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 743,
    "task": "Write a stored procedure in NuoDB SQL to find the name of the top performing team in a specific year based on wins.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL to find the name of the top performing team in a specific year based on wins.",
    "input": "CREATE OR REPLACE PROCEDURE FetchTopTeam(year_in IN NUMBER) AS team_name VARCHAR2(100); BEGIN SELECT name INTO team_name FROM (SELECT name FROM teams WHERE year = year_in ORDER BY wins DESC) WHERE ROWNUM = 1; END;",
    "output": "CREATE OR REPLACE PROCEDURE FetchTopTeam(IN year_in INTEGER) AS VAR team_name STRING; team_name = (SELECT name FROM teams WHERE year = year_in ORDER BY wins DESC LIMIT 1); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 744,
    "task": "Create a stored procedure in NuoDB SQL to fetch the team with the player who has scored the maximum goals in a given year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure in NuoDB SQL to fetch the team with the player who has scored the maximum goals in a given year.",
    "input": "CREATE OR REPLACE PROCEDURE FetchTopTeamWithGoalScorer(year_in IN NUMBER) AS team_id VARCHAR2(255); BEGIN SELECT teamID INTO team_id FROM scoring WHERE year = year_in AND goals = (SELECT max(goals) FROM scoring WHERE year = year_in); END FetchTopTeamWithGoalScorer;",
    "output": "CREATE OR REPLACE PROCEDURE FetchTopTeamWithGoalScorer(IN year_in INTEGER) AS VAR team_id STRING; team_id = (SELECT teamID FROM scoring WHERE year = year_in AND goals = (SELECT max(goals) FROM scoring WHERE year = year_in)); THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 745,
    "task": "Write a stored procedure in NuoDB SQL that deletes criteria that a team lost all games in a year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure in NuoDB SQL that deletes criteria that a team lost all games in a year.",
    "input": "CREATE OR REPLACE PROCEDURE DeleteTeam(year_in IN NUMBER, teamID_in IN VARCHAR2) AS BEGIN DELETE FROM teams WHERE year = year_in AND teamID = teamID_in AND wins = 0; END DeleteTeam;",
    "output": "CREATE OR REPLACE PROCEDURE DeleteTeam(IN year_in INTEGER, IN teamID_in STRING) AS DELETE FROM teams WHERE year = year_in AND teamID = teamID_in AND wins = 0; THROW 'SUCCESS'; END_PROCEDURE;"
  },
  {
    "number": 746,
    "task": "Write a procedure to get the height of a player given their playerID",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to get the height of a player given their playerID",
    "input": "CREATE OR REPLACE PROCEDURE get_height(playerID_in IN VARCHAR2) AS playerHeight NUMBER; BEGIN SELECT height INTO playerHeight FROM players WHERE playerID = playerID_in; END get_height;",
    "output": "CREATE PROCEDURE get_height(IN playerID_in String) AS VAR playerHeight INTEGER;  playerHeight = (SELECT height FROM players WHERE playerID = playerID_in); THROW playerHeight; END_PROCEDURE;"
  },
  {
    "number": 747,
    "task": "Create a procedure to get number of wins for a team in a given year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure to get number of wins for a team in a given year",
    "input": "CREATE OR REPLACE PROCEDURE get_wins(teamID_in IN VARCHAR2, year_in IN NUMBER) AS teamWins NUMBER; BEGIN SELECT wins INTO teamWins FROM teams WHERE teamID = teamID_in AND year = year_in; END get_wins;",
    "output": "CREATE PROCEDURE get_wins(IN teamID_in String, IN year_in INTEGER) AS VAR teamWins INTEGER; teamWins = (SELECT wins FROM teams WHERE teamID = teamID_in AND year = year_in); THROW teamWins;  END_PROCEDURE;"
  },
  {
    "number": 748,
    "task": "Craft a procedure to get the total number of goals by a team in a specific year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Craft a procedure to get the total number of goals by a team in a specific year",
    "input": "CREATE OR REPLACE PROCEDURE team_goals(year_in IN NUMBER, teamID_in IN VARCHAR2) AS teamGoals NUMBER; BEGIN SELECT SUM(goals) INTO teamGoals FROM scoring WHERE teamID = teamID_in AND year = year_in; END team_goals;",
    "output": "CREATE PROCEDURE team_goals(IN year_in INTEGER, IN teamID_in String) AS VAR teamGoals INTEGER; teamGoals = (SELECT SUM(goals) FROM scoring WHERE teamID = teamID_in AND year = year_in); THROW teamGoals; END_PROCEDURE;"
  },
  {
    "number": 749,
    "task": "Write a procedure to retrieve the count of players from a specific birth country",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to retrieve the count of players from a specific birth country",
    "input": "CREATE OR REPLACE PROCEDURE count_players_country(birthCountry_in IN VARCHAR2) AS countPlayers NUMBER; BEGIN SELECT COUNT(*) INTO countPlayers FROM players WHERE birthCountry = birthCountry_in; END count_players_country;",
    "output": "CREATE PROCEDURE count_players_country(IN birthCountry_in String) AS VAR countPlayers INTEGER; countPlayers = (SELECT COUNT(*) FROM players WHERE birthCountry = birthCountry_in); THROW countPlayers; END_PROCEDURE;"
  },
  {
    "number": 750,
    "task": "Craft a procedure to fetch player who played most games in a given year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Craft a procedure to fetch player who played most games in a given year",
    "input": "CREATE OR REPLACE PROCEDURE max_games_player(year_in IN NUMBER) AS maxGamesPlayerID VARCHAR2(255); BEGIN SELECT playerID INTO maxGamesPlayerID FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY gamesPlayed DESC) WHERE ROWNUM <= 1; END max_games_player;",
    "output": "CREATE PROCEDURE max_games_player(IN year_in INTEGER) AS VAR maxGamesPlayerID String; maxGamesPlayerID = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY gamesPlayed DESC LIMIT 1); THROW maxGamesPlayerID; END_PROCEDURE;"
  },
  {
    "number": 751,
    "task": "Write a procedure to get the average weight of players in a specific team",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to get the average weight of players in a specific team",
    "input": "CREATE OR REPLACE PROCEDURE average_weight_team(team_in IN VARCHAR2) AS avgWeight NUMBER; BEGIN SELECT AVG(weight) INTO avgWeight FROM scoring INNER JOIN players ON scoring.playerID = players.playerID WHERE teamID = team_in; END average_weight_team;",
    "output": "CREATE PROCEDURE average_weight_team(IN team_in String) AS VAR avgWeight INTEGER; avgWeight = (SELECT AVG(weight) from scoring INNER JOIN players ON scoring.playerID = players.playerID WHERE teamID = team_in); THROW avgWeight; END_PROCEDURE;"
  },
  {
    "number": 752,
    "task": "Craft a procedure to get the total goals scored in a specific year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Craft a procedure to get the total goals scored in a specific year",
    "input": "CREATE OR REPLACE PROCEDURE total_goals_year(year_in IN NUMBER) AS totalGoals NUMBER; BEGIN SELECT SUM(goals) INTO totalGoals FROM scoring WHERE year = year_in; END total_goals_year;",
    "output": "CREATE PROCEDURE total_goals_year(IN year_in INTEGER) AS VAR totalGoals INTEGER; totalGoals = (SELECT SUM(goals) FROM scoring WHERE year = year_in); THROW totalGoals; END_PROCEDURE;"
  },
  {
    "number": 753,
    "task": "Write a procedure to return the total assists by a player in a specific year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a procedure to return the total assists by a player in a specific year",
    "input": "CREATE OR REPLACE PROCEDURE total_assists(playerID_in IN VARCHAR2, year_in IN NUMBER) AS totalAssists NUMBER; BEGIN SELECT SUM(assists) INTO totalAssists FROM scoring WHERE playerID = playerID_in AND year = year_in; END total_assists;",
    "output": "CREATE PROCEDURE total_assists(IN playerID_in String, IN year_in INTEGER) AS VAR totalAssists INTEGER; totalAssists = (SELECT SUM(assists) FROM scoring WHERE playerID = playerID_in AND year = year_in); THROW totalAssists; END_PROCEDURE;"
  },
  {
    "number": 754,
    "task": "Generate a procedure to retrieve the minimum height of all players",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a procedure to retrieve the minimum height of all players",
    "input": "CREATE OR REPLACE PROCEDURE minimum_height AS minHeight NUMBER; BEGIN SELECT MIN(height) INTO minHeight FROM players; END minimum_height;",
    "output": "CREATE PROCEDURE minimum_height() AS VAR minHeight INTEGER; minHeight = (SELECT MIN(height) FROM players); THROW minHeight; END_PROCEDURE;"
  },
  {
    "number": 755,
    "task": "Create a procedure to retrieve the name of the player with the maximum number of career goals",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure to retrieve the name of the player with the maximum number of career goals",
    "input": "CREATE OR REPLACE PROCEDURE max_goals AS playerName VARCHAR2(255); BEGIN SELECT players.playerID INTO playerName FROM (SELECT players.playerID FROM scoring INNER JOIN players ON scoring.playerID = players.playerID GROUP BY scoring.playerID ORDER BY SUM(goals) DESC) WHERE ROWNUM <= 1; END max_goals;",
    "output": "CREATE PROCEDURE max_goals() AS VAR playerName STRING; playerName = (SELECT players.playerID FROM scoring INNER JOIN players ON scoring.playerID = players.playerID GROUP BY scoring.playerID ORDER BY SUM(goals) DESC LIMIT 1); THROW playerName; END_PROCEDURE;"
  },
  {
    "number": 756,
    "task": "Craft a procedure to retrieve the ID of the player who played least games in a specific year",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Craft a procedure to retrieve the ID of the player who played least games in a specific year",
    "input": "CREATE OR REPLACE PROCEDURE least_games(year_in IN NUMBER) AS leastGamesPlayerID VARCHAR2(255); BEGIN SELECT playerID INTO leastGamesPlayerID FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY gamesPlayed ASC) WHERE ROWNUM <= 1; END least_games;",
    "output": "CREATE PROCEDURE least_games(IN year_in INTEGER) AS VAR leastGamesPlayerID String; leastGamesPlayerID = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY gamesPlayed ASC LIMIT 1); THROW leastGamesPlayerID; END_PROCEDURE;"
  },
  {
    "number": 757,
    "task": "Write a stored procedure to count the number of players from a given country in the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to count the number of players from a given country in the players table.",
    "input": "CREATE OR REPLACE PROCEDURE player_count_by_country(countryName_in IN VARCHAR2) AS country_count NUMBER; BEGIN SELECT COUNT(*) INTO country_count FROM players WHERE birthCountry = countryName_in; END player_count_by_country;",
    "output": "CREATE OR REPLACE PROCEDURE player_count_by_country(IN countryName_in STRING) AS VAR country_count INTEGER = (SELECT COUNT(*) FROM players WHERE birthCountry = countryName_in); THROW country_count; END_PROCEDURE;"
  },
  {
    "number": 758,
    "task": "Write a stored procedure that returns the name of the player with the most goals in all teams for a specified year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that returns the name of the player with the most goals in all teams for a specified year.",
    "input": "CREATE OR REPLACE PROCEDURE top_scorer(year_in IN NUMBER) AS scorer_id VARCHAR2(255); scorer_name VARCHAR2(255); BEGIN SELECT playerID INTO scorer_id FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC) WHERE ROWNUM <= 1; SELECT firstName || ' ' || lastName INTO scorer_name FROM players WHERE playerID = scorer_id; END top_scorer;",
    "output": "CREATE OR REPLACE PROCEDURE top_scorer(IN year_in INTEGER) AS VAR scorer_id STRING = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals DESC LIMIT 1); VAR scorer_name STRING = (SELECT firstName || ' ' || lastName FROM players WHERE playerID = scorer_id); THROW scorer_name; END_PROCEDURE;"
  },
  {
    "number": 759,
    "task": "Write a stored procedure to find the average weight of all players.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the average weight of all players.",
    "input": "CREATE OR REPLACE PROCEDURE avg_weight AS avgWt NUMBER; BEGIN SELECT AVG(weight) INTO avgWt FROM players; END avg_weight;",
    "output": "CREATE OR REPLACE PROCEDURE avg_weight() AS VAR avgWt INTEGER = (SELECT AVG(weight) FROM players); THROW avgWt; END_PROCEDURE;"
  },
  {
    "number": 760,
    "task": "Write a stored procedure that returns the total number of games played by a team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that returns the total number of games played by a team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE games_played(teamID_in IN VARCHAR2, year_in IN NUMBER) AS total_games NUMBER; BEGIN SELECT games INTO total_games FROM teams WHERE teamID = teamID_in AND year = year_in; END games_played;",
    "output": "CREATE OR REPLACE PROCEDURE games_played(IN teamID_in STRING, IN year_in INTEGER) AS VAR total_games INTEGER = (SELECT games FROM teams WHERE teamID = teamID_in AND year = year_in); THROW total_games; END_PROCEDURE;"
  },
  {
    "number": 761,
    "task": "Write a stored procedure that retrieves the birth date of a player given their playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that retrieves the birth date of a player given their playerID.",
    "input": "CREATE OR REPLACE PROCEDURE player_birth_date(playerID_in IN VARCHAR2) AS birth_date VARCHAR2(255); BEGIN SELECT TO_CHAR(birthYear) || '-' || TO_CHAR(birthMon) || '-' || TO_CHAR(birthDay) INTO birth_date FROM players WHERE playerID = playerID_in; END player_birth_date;",
    "output": "CREATE OR REPLACE PROCEDURE player_birth_date(IN playerID_in STRING) AS VAR birth_date STRING = (SELECT concatenation(birthYear,'-', birthMon,'-', birthDay) FROM players WHERE playerID = playerID_in); THROW birth_date; END_PROCEDURE;"
  },
  {
    "number": 762,
    "task": "Write a stored procedure that finds the number of distinct positions available in the database.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that finds the number of distinct positions available in the database.",
    "input": "CREATE OR REPLACE PROCEDURE count_positions AS position_count NUMBER; BEGIN SELECT COUNT(DISTINCT position) INTO position_count FROM players; END count_positions;",
    "output": "CREATE OR REPLACE PROCEDURE count_positions() AS VAR position_count INTEGER = (SELECT COUNT(DISTINCT position) FROM players); THROW position_count; END_PROCEDURE;"
  },
  {
    "number": 763,
    "task": "Write a stored procedure that gives the tallest player in the players table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that gives the tallest player in the players table.",
    "input": "CREATE OR REPLACE PROCEDURE tallest_player AS tallest_player_id VARCHAR2(255); tallest_player_name VARCHAR2(255); BEGIN SELECT playerID INTO tallest_player_id FROM (SELECT playerID FROM players ORDER BY height DESC) WHERE ROWNUM <= 1; SELECT firstName || ' ' || lastName INTO tallest_player_name FROM players WHERE playerID = tallest_player_id; END tallest_player;",
    "output": "CREATE OR REPLACE PROCEDURE tallest_player() AS VAR tallest_player_id STRING = (SELECT playerID FROM players ORDER BY height DESC LIMIT 1); VAR tallest_player_name STRING = (SELECT firstName || ' ' || lastName FROM players WHERE playerID = tallest_player_id); THROW tallest_player_name; END_PROCEDURE;"
  },
  {
    "number": 764,
    "task": "Write a stored procedure to compute the win rate of a specified team in a certain year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to compute the win rate of a specified team in a certain year.",
    "input": "CREATE OR REPLACE PROCEDURE win_rate(teamID_in IN VARCHAR2, year_in IN NUMBER) AS win_rate NUMBER; BEGIN SELECT (wins / games) INTO win_rate FROM teams WHERE teamID = teamID_in AND year = year_in; END win_rate;",
    "output": "CREATE OR REPLACE PROCEDURE win_rate(IN teamID_in STRING, IN year_in INTEGER) AS VAR win_rate FLOAT = (SELECT (wins / games) FROM teams WHERE teamID = teamID_in AND year = year_in); THROW win_rate; END_PROCEDURE;"
  },
  {
    "number": 765,
    "task": "Write a stored procedure that gives the player who has played the largest number of games.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that gives the player who has played the largest number of games.",
    "input": "CREATE OR REPLACE PROCEDURE most_played_player AS most_played_id VARCHAR2(255); most_played_name VARCHAR2(255); BEGIN SELECT playerID INTO most_played_id FROM (SELECT playerID FROM scoring GROUP BY playerID ORDER BY SUM(gamesPlayed) DESC) WHERE ROWNUM <= 1; SELECT firstName || ' ' || lastName INTO most_played_name FROM players WHERE playerID = most_played_id; END most_played_player;",
    "output": "CREATE OR REPLACE PROCEDURE most_played_player() AS VAR most_played_id STRING = (SELECT playerID FROM scoring GROUP BY playerID ORDER BY SUM(gamesPlayed) DESC LIMIT 1); VAR most_played_name STRING = (SELECT firstName || ' ' || lastName FROM players WHERE playerID = most_played_id); THROW most_played_name; END_PROCEDURE;"
  },
  {
    "number": 766,
    "task": "Write a stored procedure that gives the number of players who have ever played for a specific team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that gives the number of players who have ever played for a specific team.",
    "input": "CREATE OR REPLACE PROCEDURE player_count_for_team(teamID_in IN VARCHAR2) AS player_count NUMBER; BEGIN SELECT COUNT(DISTINCT playerID) INTO player_count FROM scoring WHERE teamID = teamID_in; END player_count_for_team;",
    "output": "CREATE OR REPLACE PROCEDURE player_count_for_team(IN teamID_in STRING) AS VAR player_count INTEGER = (SELECT COUNT(DISTINCT playerID) FROM scoring WHERE teamID = teamID_in); THROW player_count; END_PROCEDURE;"
  },
  {
    "number": 767,
    "task": "Write a stored procedure that finds the player who made the most assists in all teams for a specified year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that finds the player who made the most assists in all teams for a specified year.",
    "input": "CREATE OR REPLACE PROCEDURE top_assister(year_in IN NUMBER) AS assister_id VARCHAR2(255); assister_name VARCHAR2(255); BEGIN SELECT playerID INTO assister_id FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY assists DESC) WHERE ROWNUM <= 1; SELECT firstName || ' ' || lastName INTO assister_name FROM players WHERE playerID = assister_id; END top_assister;",
    "output": "CREATE OR REPLACE PROCEDURE top_assister(IN year_in INTEGER) AS VAR assister_id STRING = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY assists DESC LIMIT 1); VAR assister_name STRING = (SELECT firstName || ' ' || lastName FROM players WHERE playerID = assister_id); THROW assister_name; END_PROCEDURE;"
  },
  {
    "number": 768,
    "task": "Write a stored procedure that returns the total number of losses of a team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that returns the total number of losses of a team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE total_losses(teamID_in IN VARCHAR2, year_in IN NUMBER) AS total_losses NUMBER; BEGIN SELECT losses INTO total_losses FROM teams WHERE teamID = teamID_in AND year = year_in; END total_losses;",
    "output": "CREATE OR REPLACE PROCEDURE total_losses(IN teamID_in STRING, IN year_in INTEGER) AS VAR total_losses INTEGER = (SELECT losses FROM teams WHERE teamID = teamID_in AND year = year_in); THROW total_losses; END_PROCEDURE;"
  },
  {
    "number": 769,
    "task": "Write a stored procedure that retrieves the number of players born in a specific month in a certain year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that retrieves the number of players born in a specific month in a certain year.",
    "input": "CREATE OR REPLACE PROCEDURE player_birth_month_count(birthmon_in IN NUMBER, birthyear_in IN NUMBER) AS count NUMBER; BEGIN SELECT COUNT(*) INTO count FROM players WHERE birthMon = birthmon_in AND birthYear = birthyear_in; END player_birth_month_count;",
    "output": "CREATE OR REPLACE PROCEDURE player_birth_month_count(IN birthmon_in INTEGER, IN birthyear_in INTEGER) AS VAR count INTEGER = (SELECT COUNT(*) FROM players WHERE birthMon = birthmon_in AND birthYear = birthyear_in); THROW count; END_PROCEDURE;"
  },
  {
    "number": 770,
    "task": "Write a stored procedure that gives the most used position in the scoring table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that gives the most used position in the scoring table.",
    "input": "CREATE OR REPLACE PROCEDURE common_position AS position VARCHAR2(255); BEGIN SELECT position INTO position FROM (SELECT position FROM scoring GROUP BY position ORDER BY COUNT(*) DESC) WHERE ROWNUM <= 1; END common_position;",
    "output": "CREATE OR REPLACE PROCEDURE common_position() AS VAR position STRING = (SELECT position FROM scoring GROUP BY position ORDER BY COUNT(*) DESC LIMIT 1); THROW position; END_PROCEDURE;"
  },
  {
    "number": 771,
    "task": "Write a stored procedure that returns the player with the lowest number of goals in a specific year for all teams.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that returns the player with the lowest number of goals in a specific year for all teams.",
    "input": "CREATE OR REPLACE PROCEDURE least_scorer(year_in IN NUMBER) AS scorer_id VARCHAR2(255); scorer_name VARCHAR2(255); BEGIN SELECT playerID INTO scorer_id FROM (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals ASC) WHERE ROWNUM <= 1; SELECT firstName || ' ' || lastName INTO scorer_name FROM players WHERE playerID = scorer_id; END least_scorer;",
    "output": "CREATE OR REPLACE PROCEDURE least_scorer(IN year_in INTEGER) AS VAR scorer_id STRING = (SELECT playerID FROM scoring WHERE year = year_in ORDER BY goals ASC LIMIT 1); VAR scorer_name STRING = (SELECT firstName || ' ' || lastName FROM players WHERE playerID = scorer_id); THROW scorer_name; END_PROCEDURE;"
  },
  {
    "number": 772,
    "task": "Write a stored procedure to find the number of ties of a team in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to find the number of ties of a team in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE num_ties(teamID_in IN VARCHAR2, year_in IN NUMBER) AS num_ties NUMBER; BEGIN SELECT ties INTO num_ties FROM teams WHERE teamID = teamID_in AND year = year_in; END num_ties;",
    "output": "CREATE OR REPLACE PROCEDURE num_ties(IN teamID_in STRING, IN year_in INTEGER) AS VAR num_ties INTEGER = (SELECT ties FROM teams WHERE teamID = teamID_in AND year = year_in); THROW num_ties; END_PROCEDURE;"
  },
  {
    "number": 773,
    "task": "Write a stored procedure that finds the team with the highest number of wins in a specified year and returns the teamID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that finds the team with the highest number of wins in a specified year and returns the teamID.",
    "input": "CREATE OR REPLACE PROCEDURE best_team(year_in IN NUMBER) AS best_team_id VARCHAR2(255); BEGIN SELECT teamID INTO best_team_id FROM (SELECT teamID FROM teams WHERE year = year_in ORDER BY wins DESC) WHERE ROWNUM <= 1; END best_team;",
    "output": "CREATE OR REPLACE PROCEDURE best_team(IN year_in INTEGER) AS VAR best_team_id STRING = (SELECT teamID FROM teams WHERE year = year_in ORDER BY wins DESC LIMIT 1); THROW best_team_id; END_PROCEDURE;"
  },
  {
    "number": 774,
    "task": "Write a stored procedure that counts the teams that a specified player has scored against in a certain year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that counts the teams that a specified player has scored against in a certain year.",
    "input": "CREATE OR REPLACE PROCEDURE count_teams_scored_against(playerID_in IN VARCHAR2, year_in IN NUMBER) AS team_count NUMBER; BEGIN SELECT COUNT(DISTINCT teamID) INTO team_count FROM scoring WHERE playerID = playerID_in AND year = year_in AND goals > 0; END count_teams_scored_against;",
    "output": "CREATE OR REPLACE PROCEDURE count_teams_scored_against(IN playerID_in STRING, IN year_in INTEGER) AS VAR team_count INTEGER = (SELECT COUNT(DISTINCT teamID) FROM scoring WHERE playerID = playerID_in AND year = year_in AND goals > 0); THROW team_count; END_PROCEDURE;"
  },
  {
    "number": 775,
    "task": "Write a stored procedure that retrieves the earliest year a player started playing in the NHL given their playerID.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure that retrieves the earliest year a player started playing in the NHL given their playerID.",
    "input": "CREATE OR REPLACE PROCEDURE player_first_year(playerID_in IN VARCHAR2) AS first_year NUMBER; BEGIN SELECT firstNHL INTO first_year FROM players WHERE playerID = playerID_in; END player_first_year;",
    "output": "CREATE OR REPLACE PROCEDURE player_first_year(IN playerID_in STRING) AS VAR first_year INTEGER = (SELECT firstNHL FROM players WHERE playerID = playerID_in); THROW first_year; END_PROCEDURE;"
  },
  {
    "number": 1000,
    "task": "Create a NuoDB Stored Procedure to insert a new record in the players table and handle possible error scenarios",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB Stored Procedure to insert a new record in the players table and handle possible error scenarios",
    "input": "CREATE OR REPLACE PROCEDURE add_new_player(playerID_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2, height_in IN NUMBER, weight_in IN NUMBER, firstNHL_in IN NUMBER, position_in IN VARCHAR2) AS BEGIN INSERT INTO players (playerID, firstName, lastName, height, weight, firstNHL, position) VALUES (playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, position_in); EXCEPTION WHEN OTHERS THEN dbms_output.put_line(SQLERRM); END add_new_player;",
    "output": "DROP PROCEDURE IF EXISTS add_new_player; CREATE PROCEDURE add_new_player (playerID_in STRING, firstName_in STRING, lastName_in STRING, height_in INTEGER, weight_in INTEGER, firstNHL_in INTEGER, position_in STRING) RETURNS new_entry(msg STRING) AS TRY INSERT INTO players (playerID, firstName, lastName, height, weight, firstNHL, position) VALUES (playerID_in, firstName_in, lastName_in, height_in, weight_in, firstNHL_in, position_in); CATCH(error) INSERT INTO new_entry VALUES (error); RETURN ; END_TRY; THROW 'Player Record Inserted Successfully'; END_PROCEDURE;"
  },
  {
    "number": 1001,
    "task": "Create a NuoDB Stored Procedure that returns the years a certain player has been in each team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB Stored Procedure that returns the years a certain player has been in each team.",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_years_in_each_team(playerID_in IN VARCHAR2) AS vfirstnhl NUMBER; vlastnhl NUMBER; BEGIN SELECT FIRSTNHL, LASTNHL INTO vfirstnhl, vlastnhl FROM players where PLAYERID = playerID_in; FOR i IN vfirstnhl..vlastnhl LOOP FOR rec IN (SELECT year, team FROM teams JOIN scoring ON teams.year = scoring.year AND teams.teamID = scoring.teamID WHERE playerid = playerID_in AND YEAR = i ORDER BY year, team) LOOP dbms_output.put_line('Year: ' || rec.year || ', Team: ' || rec.team); END LOOP; END LOOP; END prc_get_years_in_each_team;",
    "output": "CREATE PROCEDURE prc_get_years_in_each_team(IN playerID_in string) RETURNS tbl_years_in_each_team (Year integer, Teamid string) AS VAR vfirstnhl integer, vlastnhl integer; vfirstnhl, vlastnhl = (SELECT FIRSTNHL, LASTNHL FROM players where PLAYERID = playerID_in); WHILE (vfirstnhl <= vlastnhl) INSERT into tbl_years_in_each_team select year, team from teams join scoring on teams.year = scoring.year and teams.teamID = scoring.teamID where playerid = playerID_in and YEAR = vfirstnhl ORDER BY year, team; vfirstnhl=vfirstnhl+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1002,
    "task": "Write an NuoDB SQL Stored Procedure that returns the total number of players for a specific team and year. The procedure will take two parameters: team ID and year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write an NuoDB SQL Stored Procedure that returns the total number of players for a specific team and year. The procedure will take two parameters: team ID and year.",
    "input": "CREATE OR REPLACE PROCEDURE total_players_in_team(teamID_in IN VARCHAR2, year_in IN NUMBER) AS playersCount NUMBER; BEGIN SELECT COUNT(*) INTO playersCount FROM players p JOIN scoring s ON p.playerid = s.playerid WHERE s.year = year_in AND s.teamID = teamID_in; dbms_output.put_line('Total Players: ' || playersCount); END total_players_in_team;",
    "output": "CREATE PROCEDURE total_players_in_team(IN teamID_in STRING, IN year_in INTEGER) RETURNS total_players_tab(playersCount INTEGER) AS VAR playersCount INTEGER = (SELECT COUNT(*) FROM players p JOIN scoring s ON p.playerid = s.playerid WHERE s.year = year_in AND s.teamID = teamID_in);INSERT INTO total_players_tab VALUES (playersCount);END_PROCEDURE;"
  },
  {
    "number": 1003,
    "task": "How to create a stored procedure which inserts into a table the number of games played by a given player in each year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure which inserts into a table the number of games played by a given player in each year?",
    "input": "CREATE OR REPLACE PROCEDURE prc_games_played(iPlayer IN VARCHAR2) AS vfirstnhl NUMBER; vlastnhl NUMBER; BEGIN SELECT FIRSTNHL, LASTNHL INTO vfirstnhl, vlastnhl FROM players where PLAYERID = iPlayer; FOR i IN vfirstnhl..vlastnhl LOOP FOR rec IN (SELECT year, sum(gamesPlayed) as gamesPlayed FROM scoring WHERE playerid = iPlayer AND YEAR = i GROUP BY year) LOOP dbms_output.put_line('Year: ' || rec.year || ', Games Played: ' || rec.gamesPlayed); END LOOP; END LOOP; END prc_games_played;",
    "output": "DROP PROCEDURE IF EXISTS prc_games_played; CREATE PROCEDURE prc_games_played(IN iPlayer STRING) RETURNS games_table(Year INTEGER, Games_Played INTEGER) AS VAR vfirstnhl INTEGER, vlastnhl INTEGER; vfirstnhl, vlastnhl = (SELECT FIRSTNHL, LASTNHL FROM players where PLAYERID = iPlayer); WHILE (vfirstnhl <= vlastnhl) INSERT INTO games_table SELECT year, sum(gamesPlayed) FROM scoring WHERE playerid = iPlayer AND YEAR = vfirstnhl GROUP BY year; vfirstnhl=vfirstnhl+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1004,
    "task": "How to create a stored procedure that returns number of players per team for a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns number of players per team for a given year?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_players_per_team_by_year(iYear IN NUMBER) AS vTeam VARCHAR2(10); vPlayerCount NUMBER; BEGIN FOR rec IN (SELECT teamID FROM teams WHERE year = iYear) LOOP vTeam := rec.teamID; SELECT COUNT(*) INTO vPlayerCount FROM scoring WHERE teamID = vTeam AND year = iYear; dbms_output.put_line('Team: ' || vTeam || ', Player Count: ' || vPlayerCount); END LOOP; END prc_get_players_per_team_by_year;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_players_per_team_by_year; CREATE PROCEDURE prc_get_players_per_team_by_year(IN iYear integer) RETURNS tbl_output(Team string, PlayerCount integer) AS VAR vTeam string; VAR vPlayerCount integer; FOR SELECT teamID FROM teams WHERE year = iYear; vTeam = teamID; vPlayerCount = (SELECT COUNT(*) FROM scoring WHERE teamID = vTeam AND year = iYear); INSERT INTO tbl_output VALUES(vTeam, vPlayerCount); END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1005,
    "task": "How to create a procedure that provides Team statistics based on a specified stat type?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a procedure that provides Team statistics based on a specified stat type?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_team_statistics(iType IN VARCHAR2, iTeam IN VARCHAR2, iYear IN NUMBER) AS vOutstr VARCHAR2(100); BEGIN SELECT CASE iType WHEN 'Rank' THEN 'Rank=' || TO_CHAR(Rank) WHEN 'Record' THEN 'Record=' || TO_CHAR(wins) || '-' || TO_CHAR(losses) || '-' || TO_CHAR(ties) END INTO vOutstr FROM teams WHERE teamID = iTeam AND year = iYear; dbms_output.put_line(vOutstr); END prc_get_team_statistics;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_team_statistics; CREATE PROCEDURE prc_get_team_statistics(IN iType string, IN iTeam string, IN iYear integer) AS VAR vOutstr string; vOutstr = CASE iType WHEN 'Rank' THEN (SELECT 'Rank='|| cast(Rank as string) FROM teams WHERE teamID = iTeam AND year = iYear) WHEN 'Record' THEN (SELECT 'Record='|| cast(wins as string) ||'-'|| cast(losses as string) ||'-'|| cast(ties as string) FROM teams WHERE teamID = iTeam AND year = iYear) END; THROW vOutstr; END_PROCEDURE;"
  },
  {
    "number": 1006,
    "task": "Create a NuoDB SQL Stored Procedure to return all players based on the team for a particular year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure to return all players based on the team for a particular year.",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_players_for_year(year_in IN NUMBER, team_in IN VARCHAR2) AS CURSOR c IS SELECT playerID, firstName, lastName, position, Height, Weight, firstNHL, lastNHL, birthCountry, birthCity FROM players JOIN scoring ON players.playerID = scoring.playerID JOIN teams ON teams.teamID = scoring.teamID WHERE year = year_in AND teamID = team_in; rec c%ROWTYPE; BEGIN OPEN c; LOOP FETCH c INTO rec; EXIT WHEN c%NOTFOUND; dbms_output.put_line('Player ID: ' || rec.playerID || ', First Name: ' || rec.firstName || ', Last Name: ' || rec.lastName || ', Position: ' || rec.position || ', Height: ' || rec.Height || ', Weight: ' || rec.Weight || ', First NHL: ' || rec.firstNHL || ', Last NHL: ' || rec.lastNHL || ', Birth Country: ' || rec.birthCountry || ', Birth City: ' || rec.birthCity); END LOOP; CLOSE c; END prc_get_players_for_year;",
    "output": "CREATE PROCEDURE prc_get_players_for_year (IN year_in Integer, IN team_in String) RETURNS tbl_players(playerID String, firstName String, lastName String, position String, Height Integer, Weight Integer, firstNHL Integer, lastNHL Integer, birthCountry String, birthCity String) AS VAR player_year Integer; VAR team_id String; player_year = year_in; team_id = team_in; FOR SELECT playerID, firstName, lastName, position, Height, Weight, firstNHL, lastNHL, birthCountry, birthCity FROM players JOIN scoring ON players.playerID = scoring.playerID JOIN teams ON teams.teamID = scoring.teamID WHERE year = player_year AND teamID = team_id; INSERT INTO tbl_players VALUES (playerID, firstName, lastName, position, Height, Weight, firstNHL, lastNHL, birthCountry, birthCity); IF (player_year != firstNHL OR player_year != lastNHL) CONTINUE; END_IF; END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1007,
    "task": "How can you create a NuoDB stored procedure that uses conditional statements to execute different commands based on a passed parameter iType?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you create a NuoDB stored procedure that uses conditional statements to execute different commands based on a passed parameter iType?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_info(iType IN VARCHAR2, iPlayer IN VARCHAR2) AS outstr VARCHAR2(100); BEGIN IF (iType = 'Height_Weight') THEN SELECT 'Height/Weight=' || Height || '/' || Weight INTO outstr FROM PLAYERS WHERE PLAYERID = iPlayer; ELSE SELECT 'Years Played from ' || firstnhl || ' to ' || lastnhl INTO outstr FROM PLAYERS WHERE PLAYERID = iPlayer; END IF; dbms_output.put_line(outstr); END prc_get_player_info;",
    "output": "CREATE PROCEDURE prc_get_player_info (IN iType string, IN iPlayer string) AS var outstr string; IF (iType = 'Height_Weight') outstr=(SELECT 'Height/Weight='|| Height ||'/'||Weight FROM PLAYERS WHERE PLAYERID = iPlayer); ELSE outstr=(SELECT 'Years Played from '||firstnhl||' to '||lastnhl FROM PLAYERS WHERE PLAYERID = iPlayer); END_IF; RETURN outstr; END_PROCEDURE;"
  },
  {
    "number": 1008,
    "task": "Can you write a NuoDB SQL Stored Procedure to get the statistics of a player based on iType parameter using CASE statement?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Can you write a NuoDB SQL Stored Procedure to get the statistics of a player based on iType parameter using CASE statement?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_stat(iType IN VARCHAR2, iPlayer IN VARCHAR2) AS outstr VARCHAR2(100); BEGIN SELECT CASE iType WHEN 'Stats' THEN 'Height/Weight=' || Height || '/' || Weight ELSE 'Years Played from ' || firstnhl || ' to ' || lastnhl END INTO outstr FROM PLAYERS WHERE PLAYERID = iPlayer; dbms_output.put_line(outstr); END prc_get_player_stat;",
    "output": "CREATE PROCEDURE prc_get_player_stat (IN iType string, IN iPlayer string) AS var outstr string; outstr= CASE iType WHEN 'Stats' THEN (SELECT 'Height/Weight='|| Height ||'/'||Weight FROM PLAYERS WHERE PLAYERID = iPlayer) ELSE (SELECT 'Years Played from '||firstnhl||' to '||lastnhl FROM PLAYERS WHERE PLAYERID = iPlayer) END; RETURN outstr; END_PROCEDURE;"
  },
  {
    "number": 1009,
    "task": "How to create a Stored Procedure that selects the team details for a given 'TeamID' and 'Year' in the Hockey database?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a Stored Procedure that selects the team details for a given 'TeamID' and 'Year' in the Hockey database?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_team_details(iYear IN NUMBER, iTeam IN VARCHAR2) AS outstr VARCHAR2(100); BEGIN SELECT 'Year=' || year || ' Team Name=' || Name || ' Conference ID=' || ConferenceID || ' DivisionID=' || DivisionID || ' Rank=' || Rank INTO outstr FROM TEAMS WHERE YEAR = iYear AND TEAMID = iTeam; dbms_output.put_line(outstr); END prc_get_team_details;",
    "output": "CREATE PROCEDURE prc_get_team_details (IN iYear integer, IN iTeam string) AS VAR outstr string; outstr=(SELECT 'Year='|| year ||' Team Name='||Name||' Conference ID='||ConferenceID||' DivisionID='||DivisionID||' Rank='||Rank FROM TEAMS WHERE YEAR = iYear AND TEAMID = iTeam); THROW outstr; END_PROCEDURE;"
  },
  {
    "number": 1010,
    "task": "How to create a Stored Procedure in NuoDB SQL to update the 'teams' table and set 'rank' to 1 for the team with most 'wins' for a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a Stored Procedure in NuoDB SQL to update the 'teams' table and set 'rank' to 1 for the team with most 'wins' for a given year?",
    "input": "CREATE OR REPLACE PROCEDURE sp_update_best_team_rank(year_in IN NUMBER) AS best_team VARCHAR2(10); BEGIN SELECT teamid INTO best_team FROM (SELECT teamid FROM teams WHERE year = year_in ORDER BY wins DESC) WHERE ROWNUM = 1; UPDATE teams SET rank = 1 WHERE teamid = best_team AND year=year_in; END sp_update_best_team_rank;",
    "output": "CREATE PROCEDURE sp_update_best_team_rank(IN year_in INT) AS VAR best_team STRING; best_team = (SELECT teamid FROM teams WHERE year = year_in ORDER BY wins DESC LIMIT 1); UPDATE teams SET rank = 1 WHERE teamid = best_team AND year=year_in; END_PROCEDURE;"
  },
  {
    "number": 1011,
    "task": "How to create a NuoDB SQL stored procedure that lists all players that have scored more than a specified number of goals in a season?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL stored procedure that lists all players that have scored more than a specified number of goals in a season?",
    "input": "CREATE OR REPLACE PROCEDURE sp_list_top_scorers(goals_in IN NUMBER) AS CURSOR c IS SELECT playerID, year, goals FROM scoring WHERE goals > goals_in; rec c%ROWTYPE; BEGIN OPEN c; LOOP FETCH c INTO rec; EXIT WHEN c%NOTFOUND; dbms_output.put_line('Player ID: ' || rec.playerID || ', Year: ' || rec.year || ', Goals: ' || rec.goals); END LOOP; CLOSE c; END sp_list_top_scorers;",
    "output": "CREATE PROCEDURE sp_list_top_scorers(IN goals_in INT) RETURNS tmp_result(player_id String, year INT, goals INT) AS FOR SELECT playerID, year, goals FROM scoring WHERE goals > goals_in; INSERT INTO tmp_result VALUES (playerID, year, goals); END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1012,
    "task": "How to create a NuoDB SQL stored procedure that returns the average weight and height of players for a specific team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL stored procedure that returns the average weight and height of players for a specific team?",
    "input": "CREATE OR REPLACE PROCEDURE sp_avg_size(team_in IN VARCHAR2) AS avg_weight NUMBER; avg_height NUMBER; BEGIN SELECT AVG(weight) INTO avg_weight FROM players WHERE playerID IN (SELECT playerID FROM scoring WHERE teamID = team_in); SELECT AVG(height) INTO avg_height FROM players WHERE playerID IN (SELECT playerID FROM scoring WHERE teamID = team_in); dbms_output.put_line('Average Weight: ' || avg_weight || ', Average Height: ' || avg_height); END sp_avg_size;",
    "output": "CREATE PROCEDURE sp_avg_size(IN team_in STRING) RETURNS tmp_result(avg_weight INT, avg_height INT) AS VAR avg_weight INT, avg_height INT; avg_weight = (SELECT AVG(weight) FROM players WHERE playerID IN (SELECT playerID FROM scoring WHERE teamID = team_in)); avg_height = (SELECT AVG(height) FROM players WHERE playerID IN (SELECT playerID FROM scoring WHERE teamID = team_in)); INSERT INTO tmp_result VALUES(avg_weight, avg_height); END_PROCEDURE;"
  },
  {
    "number": 1013,
    "task": "Generate a stored procedure to insert a player into the Hockey table, using information provided as parameters. Only proceed with the insertion if the player's team exists in the Team table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a stored procedure to insert a player into the Hockey table, using information provided as parameters. Only proceed with the insertion if the player's team exists in the Team table.",
    "input": "CREATE OR REPLACE PROCEDURE insert_new_hockey_player(player_id_in IN NUMBER, player_number_in IN NUMBER, player_name_in IN VARCHAR2, player_position_in IN VARCHAR2, player_team_in IN VARCHAR2) AS team_exists NUMBER; BEGIN SELECT COUNT(*) INTO team_exists FROM teams WHERE name = player_team_in; IF(team_exists > 0) THEN INSERT INTO Hockey (Id, Number, Name, Position, Team) VALUES (player_id_in, player_number_in, player_name_in, player_position_in, player_team_in); END IF; END insert_new_hockey_player;",
    "output": "CREATE PROCEDURE insert_new_hockey_player (IN player_id_in BIGINT, IN player_number_in Integer, IN player_name_in String, IN player_position_in String, IN player_team_in String) AS VAR team_exists Boolean; team_exists = (SELECT COUNT(*) FROM teams WHERE name = player_team_in) > 0; IF(team_exists) INSERT INTO Hockey (Id, Number, Name, Position, Team) VALUES (player_id_in, player_number_in, player_name_in, player_position_in, player_team_in); END_IF; END_PROCEDURE;"
  },
  {
    "number": 1014,
    "task": "Create a stored procedure that updates Player weight in the players table if the player exists, otherwise insert the new player with the given weight.  Do not use THROW.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that updates Player weight in the players table if the player exists, otherwise insert the new player with the given weight.  Do not use THROW.",
    "input": "CREATE OR REPLACE PROCEDURE update_or_insert_player_weight(player_id_in IN VARCHAR2, new_weight_in IN NUMBER) AS player_exists NUMBER; BEGIN SELECT COUNT(*) INTO player_exists FROM players WHERE playerID = player_id_in; IF(player_exists > 0) THEN UPDATE players SET weight = new_weight_in WHERE playerID = player_id_in; ELSE INSERT INTO players (playerID, weight) VALUES (player_id_in, new_weight_in); END IF; END update_or_insert_player_weight;",
    "output": "CREATE PROCEDURE update_or_insert_player_weight(IN player_id_in string, IN new_weight_in integer) AS VAR player_exists Boolean; player_exists = (SELECT COUNT(*) FROM players WHERE playerID = player_id_in) > 0; IF(player_exists) UPDATE players SET weight = new_weight_in WHERE playerID = player_id_in; ELSE INSERT INTO players (playerID, weight) VALUES (player_id_in, new_weight_in); END_IF; END_PROCEDURE;"
  },
  {
    "number": 1015,
    "task": "Generate a procedure that accepts teamID as input and returns the player who has scored the most goals in a year for that team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a procedure that accepts teamID as input and returns the player who has scored the most goals in a year for that team.",
    "input": "CREATE OR REPLACE PROCEDURE max_goal_player(teamID_in IN VARCHAR2) AS max_goals NUMBER; max_player VARCHAR2(10); BEGIN SELECT MAX(goals) INTO max_goals FROM scoring WHERE teamID = teamID_in; SELECT playerID INTO max_player FROM scoring WHERE teamID = teamID_in AND goals = max_goals; dbms_output.put_line('Player: ' || max_player || ', Goals: ' || max_goals); END max_goal_player;",
    "output": "CREATE PROCEDURE max_goal_player (IN teamID_in string) RETURNS tbl_max_goal_player(Name string, Goals integer) AS VAR max_goals integer; VAR max_player string; max_goals = (SELECT MAX(goals) FROM scoring WHERE teamID = teamID_in); max_player = (SELECT playerID FROM scoring WHERE teamID = teamID_in AND goals = max_goals); INSERT INTO tbl_max_goal_player VALUES (max_player, max_goals); END_PROCEDURE;"
  },
  {
    "number": 1016,
    "task": "Create a procedure that accepts playerID as input and outputs the total number of wins the player's team had in their career.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure that accepts playerID as input and outputs the total number of wins the player's team had in their career.",
    "input": "CREATE OR REPLACE PROCEDURE player_career_wins(playerID_in IN VARCHAR2) AS win_count NUMBER; CURSOR c IS SELECT DISTINCT year, teamID FROM scoring WHERE playerID = playerID_in; rec c%ROWTYPE; BEGIN OPEN c; LOOP FETCH c INTO rec; EXIT WHEN c%NOTFOUND; SELECT SUM(wins) INTO win_count FROM teams WHERE year = rec.year AND teamID = rec.teamID; dbms_output.put_line('Total Wins: ' || win_count); END LOOP; CLOSE c; END player_career_wins;",
    "output": "CREATE PROCEDURE player_career_wins (IN playerID_in string) RETURNS tbl_career_wins(Total_Wins integer) AS VAR win_count integer; FOR SELECT DISTINCT year, teamID FROM scoring WHERE playerID = playerID_in; win_count = (SELECT SUM(wins) FROM teams WHERE year = year AND teamID = teamID); INSERT INTO tbl_career_wins VALUES (win_count); END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1017,
    "task": "Write a NuoDB SQL Stored Procedure to find all the teams a player has been part of using player's ID as input",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure to find all the teams a player has been part of using player's ID as input",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_teams(player_id_in IN VARCHAR2) AS first_year NUMBER; last_year NUMBER; CURSOR c IS SELECT year, teamid, stint FROM SCORING WHERE playerid = player_id_in ORDER BY year, teamid, stint; rec c%ROWTYPE; BEGIN SELECT FIRSTNHL, LASTNHL INTO first_year, last_year FROM PLAYERS where PLAYERID = player_id_in; OPEN c; LOOP FETCH c INTO rec; EXIT WHEN c%NOTFOUND OR rec.year > last_year; dbms_output.put_line('Year: ' || rec.year || ', Team ID: ' || rec.teamid || ', Stint: ' || rec.stint); END LOOP; CLOSE c; END prc_get_player_teams;",
    "output": "CREATE PROCEDURE prc_get_player_teams (IN player_id_in string) RETURNS temp_table (Year integer, Teamid string, stint integer) AS VAR first_year integer, last_year integer; first_year, last_year = (SELECT FIRSTNHL, LASTNHL FROM PLAYERS where PLAYERID = player_id_in); WHILE (first_year <= last_year) INSERT into temp_table select year, teamid, stint from SCORING where playerid = player_id_in and YEAR = first_year ORDER BY year, teamid, stint; first_year = first_year+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1018,
    "task": "How to create a stored procedure to fetch all players whose weight is above a certain threshold?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to fetch all players whose weight is above a certain threshold?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_heavy_players(weight_threshold IN NUMBER) AS CURSOR c IS SELECT Name FROM PLAYERS WHERE WEIGHT > weight_threshold; rec c%ROWTYPE; BEGIN OPEN c; LOOP FETCH c INTO rec; EXIT WHEN c%NOTFOUND; dbms_output.put_line('Player Name: ' || rec.Name); END LOOP; CLOSE c; END prc_get_heavy_players;",
    "output": "CREATE PROCEDURE prc_get_heavy_players (IN weight_threshold integer)  RETURNS tbl_heavy_players(Name string)  AS VAR playerName string; FOR SELECT Name FROM PLAYERS WHERE WEIGHT > weight_threshold; playerName = NAME;  INSERT into tbl_heavy_players VALUES (playerName); END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1019,
    "task": "How to create a stored procedure that returns the count of players in each team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that returns the count of players in each team?",
    "input": "CREATE OR REPLACE PROCEDURE prc_team_player_count AS CURSOR c IS SELECT Team, count(*) FROM Hockey GROUP BY Team; rec c%ROWTYPE; BEGIN OPEN c; LOOP FETCH c INTO rec; EXIT WHEN c%NOTFOUND; dbms_output.put_line('Team: ' || rec.Team || ', Player Count: ' || rec.count); END LOOP; CLOSE c; END prc_team_player_count;",
    "output": "CREATE PROCEDURE prc_team_player_count() RETURNS tbl_team_count(Team string, PlayerCount Integer) AS VAR teamName string; VAR playerCount integer; FOR SELECT Team, count(*) FROM Hockey GROUP BY Team; teamName = Team; playerCount = count; INSERT into tbl_team_count VALUES (teamName, playerCount); END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1020,
    "task": "How to create a stored procedure that provides player info based on input parameters using an IF condition in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that provides player info based on input parameters using an IF condition in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player(iType IN VARCHAR2, iPlayer IN VARCHAR2) AS outstr VARCHAR2(100); BEGIN IF (iType = 'Stats') THEN SELECT 'Hgt/Wgt='|| height ||'/'||weight INTO outstr FROM players WHERE PLAYERID = iPlayer; ELSE SELECT 'Years Played from '||firstnhl||' to '||lastnhl INTO outstr FROM players WHERE PLAYERID = iPlayer; END IF; dbms_output.put_line(outstr); END prc_get_player;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player; CREATE PROCEDURE prc_get_player (IN iType string, IN iPlayer string) AS var outstr string; IF (iType = 'Stats') outstr=(SELECT 'Hgt/Wgt='|| height ||'/'||weight FROM players WHERE PLAYERID = iPlayer); ELSE outstr=(SELECT 'Years Played from '||firstnhl||' to '||lastnhl FROM players WHERE PLAYERID = iPlayer); END_IF; RETURN outstr; END_PROCEDURE;"
  },
  {
    "number": 1021,
    "task": "How to create a stored procedure that provides player info based on input parameters using a CASE condition in NuoDB SQL?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that provides player info based on input parameters using a CASE condition in NuoDB SQL?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player(iType IN VARCHAR2, iPlayer IN VARCHAR2, outstr OUT VARCHAR2) IS BEGIN SELECT CASE iType WHEN 'Stats' THEN 'Hgt/Wgt='|| height ||'/'||weight ELSE 'Years Played from '||firstnhl||' to '||lastnhl END INTO outstr FROM players WHERE PLAYERID = iPlayer; END prc_get_player;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player; CREATE PROCEDURE prc_get_player (IN iType string, IN iPlayer string) AS var outstr string; outstr= CASE iType WHEN 'Stats' THEN (SELECT 'Hgt/Wgt='|| height ||'/'||weight FROM players WHERE PLAYERID = iPlayer) ELSE (SELECT 'Years Played from '||firstnhl||' to '||lastnhl FROM players WHERE PLAYERID = iPlayer) END;  RETURN outstr; END_PROCEDURE;"
  },
  {
    "number": 1022,
    "task": "Create a NuoDB Stored Procedure to get all teams a player has played for over the years.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB Stored Procedure to get all teams a player has played for over the years.",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_teams(playerId_in IN VARCHAR2) IS TYPE team_tab IS TABLE OF SCORING%ROWTYPE INDEX BY PLS_INTEGER; vfirstnhl INTEGER; vlastnhl INTEGER; BEGIN SELECT FIRSTNHL,LASTNHL INTO vfirstnhl, vlastnhl FROM players WHERE PLAYERID = playerId_in; FOR i IN vfirstnhl..vlastnhl LOOP FOR rec IN (SELECT year, teamid, stint FROM SCORING WHERE playerid = playerId_in ORDER BY year, teamid, stint) LOOP team_tab(i) := rec; END LOOP; END LOOP; END prc_get_player_teams;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_teams; CREATE PROCEDURE prc_get_player_teams (IN playerId_in string) RETURNS team_tab(Year Integer, Teamid String, Stint Integer) AS VAR vfirstnhl integer, vlastnhl integer; vfirstnhl,vlastnhl = (SELECT FIRSTNHL,LASTNHL FROM players where PLAYERID = playerId_in); WHILE (vfirstnhl <= vlastnhl) INSERT into team_tab select year, teamid, stint from SCORING where playerid = playerId_in ORDER BY year, teamid, stint; vfirstnhl=vfirstnhl+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1023,
    "task": "How to create a Stored Procedure in NuoDB, which accepts a player's name as an input, and returns the number of goals and assists they have achieved?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a Stored Procedure in NuoDB, which accepts a player's name as an input, and returns the number of goals and assists they have achieved?",
    "input": "CREATE OR REPLACE PROCEDURE prc_player_goals_assists(player_name_in IN VARCHAR2) IS TYPE goal_assist_table IS TABLE OF SCORING%ROWTYPE INDEX BY PLS_INTEGER; vplayer VARCHAR2(10); BEGIN SELECT playerID INTO vplayer FROM PLAYERS WHERE firstName || ' ' || lastName = player_name_in; FOR rec IN (SELECT SUM(goals), SUM(assists) FROM SCORING WHERE playerid = vplayer) LOOP goal_assist_table(1) := rec; END LOOP; END prc_player_goals_assists;",
    "output": "DROP PROCEDURE IF EXISTS prc_player_goals_assists; CREATE PROCEDURE prc_player_goals_assists (IN player_name_in string) RETURNS goal_assist_table(Goals integer, Assists integer) AS VAR vplayer string; vplayer=(SELECT playerID FROM PLAYERS WHERE firstName || ' ' || lastName = player_name_in); INSERT into goal_assist_table select SUM(goals), SUM(assists) from SCORING where playerid = vplayer; END_PROCEDURE;"
  },
  {
    "number": 1024,
    "task": "How to create a Stored Procedure in NuoDB, which accepts a team's ID as an input, and returns the number of games it won?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a Stored Procedure in NuoDB, which accepts a team's ID as an input, and returns the number of games it won?",
    "input": "CREATE OR REPLACE PROCEDURE prc_team_wins(team_id_in IN VARCHAR2) IS TYPE temp_table IS TABLE OF INTEGER INDEX BY PLS_INTEGER; vteam VARCHAR2(3); BEGIN SELECT teamID INTO vteam FROM TEAMS WHERE teamID = team_id_in; SELECT SUM(wins) INTO temp_table(1) FROM TEAMS WHERE teamID=vteam; END prc_team_wins;",
    "output": "DROP PROCEDURE IF EXISTS prc_team_wins; CREATE PROCEDURE prc_team_wins (IN team_id_in string) RETURNS temp_table(TeamWins integer) AS VAR vteam string; vteam = (SELECT teamID FROM TEAMS WHERE teamID = team_id_in); INSERT into temp_table select SUM(wins) from TEAMS where teamID=vteam; END_PROCEDURE;"
  },
  {
    "number": 1025,
    "task": "Create a stored procedure that updates the team name in the hockey table to 'Crowd' for only those rows that have position='Fan'",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that updates the team name in the hockey table to 'Crowd' for only those rows that have position='Fan'",
    "input": "CREATE OR REPLACE PROCEDURE proc_update_team IS BEGIN UPDATE hockey SET team='Crowd' WHERE position = 'Fan'; END proc_update_team;",
    "output": "DROP PROCEDURE IF EXISTS proc_update_team; CREATE PROCEDURE proc_update_team AS VAR l_team String; VAR l_name String; VAR l_number Integer; VAR l_position String; FOR SELECT number, name, position, team FROM hockey; l_team = team; l_name = name; l_number = number; l_position = position; IF ( l_position != 'Fan' ) CONTINUE; END_IF; UPDATE hockey SET team='Crowd' WHERE number = l_number; END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1026,
    "task": "Create a stored procedure that retrieves player statistics like height, weight or years played based on provided information type",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that retrieves player statistics like height, weight or years played based on provided information type",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player(iType IN VARCHAR2, iPlayer IN VARCHAR2, outstr OUT VARCHAR2) IS BEGIN SELECT CASE iType WHEN 'Stats' THEN 'Hgt/Wgt='|| Height ||'/'||Weight ELSE 'Years Played from '||firstnhl||' to '||lastnhl END INTO outstr FROM PLAYERS WHERE PLAYERID = iPlayer; END prc_get_player;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player; CREATE PROCEDURE prc_get_player (IN iType string, IN iPlayer string) AS var outstr string; outstr= CASE iType WHEN 'Stats' THEN (SELECT 'Hgt/Wgt='|| Height ||'/'||Weight FROM PLAYERS WHERE PLAYERID = iPlayer) ELSE (SELECT 'Years Played from '||firstnhl||' to '||lastnhl FROM PLAYERS WHERE PLAYERID = iPlayer) END; THROW outstr; END_PROCEDURE;"
  },
  {
    "number": 1027,
    "task": "How to create a stored procedure to find the winning team with the greatest number of games won in a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to find the winning team with the greatest number of games won in a given year?",
    "input": "CREATE OR REPLACE PROCEDURE prc_max_winning_team(year_in IN VARCHAR2, v_team OUT VARCHAR2, v_max_wins OUT NUMBER) IS BEGIN SELECT teamID, MAX(wins) INTO v_team, v_max_wins FROM teams WHERE year = year_in GROUP BY teamID ORDER BY MAX(wins) DESC FETCH FIRST ROW ONLY; END prc_max_winning_team;",
    "output": "DROP PROCEDURE IF EXISTS prc_max_winning_team; CREATE PROCEDURE prc_max_winning_team (IN year_in String) RETURNS tbl_max_winner(Team STRING, MaxWins INTEGER) AS VAR v_team string; VAR v_max_wins integer; v_team, v_max_wins = (SELECT teamID, MAX(wins) FROM teams WHERE year = year_in GROUP BY teamID ORDER BY MAX(wins) DESC LIMIT 1); INSERT INTO tbl_max_winner VALUES (v_team, v_max_wins); END_PROCEDURE;"
  },
  {
    "number": 1028,
    "task": "How to get the count of players born each year between the years 1970 and 1973?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to get the count of players born each year between the years 1970 and 1973?",
    "input": "CREATE OR REPLACE PROCEDURE prc_players_by_year(begyr IN NUMBER, endyr IN NUMBER) IS TYPE temptab IS TABLE OF players%ROWTYPE INDEX BY PLS_INTEGER; BEGIN FOR i IN begyr..endyr LOOP FOR rec IN (SELECT birthyear, count(*) FROM players WHERE birthyear=i GROUP BY birthyear) LOOP temptab(i) := rec; END LOOP; END LOOP; END prc_players_by_year;",
    "output": "DROP PROCEDURE IF EXISTS prc_players_by_year; CREATE PROCEDURE prc_players_by_year(begyr INTEGER, endyr INTEGER) RETURNS temptab (year INTEGER, player_ct INTEGER) AS IF ( (begyr < 1) OR (endyr > YEAR(current_date)) ) THROW 'Error 10: Invalid Year'; END_IF; WHILE ( begyr <= endyr ) INSERT INTO temptab SELECT birthyear,count(*) FROM players WHERE birthyear=begyr GROUP BY birthyear; begyr=begyr+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1029,
    "task": "How to record the team names and winning years into a seperate table 'team_wins' ?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to record the team names and winning years into a seperate table 'team_wins' ?",
    "input": "CREATE TABLE team_wins (team_name VARCHAR2(100), win_year NUMBER); CREATE OR REPLACE PROCEDURE get_winning_teams IS BEGIN INSERT INTO team_wins SELECT year, name FROM hockey.teams WHERE playoff = 'F'; END get_winning_teams; CREATE OR REPLACE PROCEDURE display_winners IS BEGIN get_winning_teams; END display_winners;",
    "output": "DROP PROCEDURE IF EXISTS display_winners; DROP PROCEDURE IF EXISTS get_winning_teams; DROP TABLE IF EXISTS team_wins; CREATE TABLE team_wins (team_name STRING, win_year  NUMBER); CREATE PROCEDURE get_winning_teams RETURNS winning_teams (year INTEGER, name STRING) AS INSERT INTO winning_teams SELECT year, name FROM hockey.teams WHERE playoff = 'F'; END_PROCEDURE; CREATE PROCEDURE display_winners AS VAR total INTEGER = 0; FOR EXECUTE get_winning_teams; INSERT INTO team_wins VALUES (NAME, YEAR); END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1030,
    "task": "How to create a NuoDB stored procedure that retrieves the playerid and the years they played for a given player",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB stored procedure that retrieves the playerid and the years they played for a given player",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_years(iPlayer IN VARCHAR2, vfirstnhl OUT NUMBER, vlastnhl OUT NUMBER) IS BEGIN SELECT FIRSTNHL,LASTNHL INTO vfirstnhl, vlastnhl FROM PLAYERS WHERE PLAYERID = iPlayer; END prc_get_player_years;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_years; CREATE PROCEDURE prc_get_player_years (IN iPlayer string) RETURNS tbl_years(Year_Start integer, Year_End integer) AS VAR vfirstnhl integer, vlastnhl integer; vfirstnhl,vlastnhl = (SELECT FIRSTNHL,LASTNHL FROM PLAYERS where PLAYERID = iPlayer); INSERT INTO tbl_years VALUES (vfirstnhl, vlastnhl); END_PROCEDURE;"
  },
  {
    "number": 1031,
    "task": "How to create a NuoDB stored procedure that returns all the teamIDs a player has played for in all their stints",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB stored procedure that returns all the teamIDs a player has played for in all their stints",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_teams (iPlayer IN VARCHAR2, tbl_teams OUT SYS_REFCURSOR) IS BEGIN OPEN tbl_teams FOR SELECT teamID FROM SCORING WHERE playerID = iPlayer; END prc_get_player_teams;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_teams; CREATE PROCEDURE prc_get_player_teams (IN iPlayer string) RETURNS tbl_teams(TeamID string) AS VAR v_teamID string; FOR SELECT teamID FROM SCORING WHERE playerID=iPlayer; v_teamID = teamID; INSERT INTO tbl_teams VALUES (v_teamID); END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1032,
    "task": "How to create a NuoDB stored procedure that updates a player's team based on their position",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB stored procedure that updates a player's team based on their position",
    "input": "CREATE OR REPLACE PROCEDURE proc_update_team IS l_playerID players.playerID%TYPE; l_position players.position%TYPE; BEGIN FOR i IN (SELECT playerID, position FROM players) LOOP l_playerID := i.playerID; l_position := i.position; IF ( l_position = 'Goalie' ) THEN UPDATE players SET team = 'NewTeam' WHERE playerID = l_playerID; END IF; END LOOP; END proc_update_team;",
    "output": "DROP PROCEDURE IF EXISTS proc_update_team; CREATE PROCEDURE proc_update_team AS VAR l_playerID string; VAR l_position string; FOR SELECT playerName, position FROM players; l_playerID = playerID; l_position = position; IF ( l_position = 'Goalie' ) UPDATE players SET team = 'NewTeam' WHERE playerID = l_player_ID; END_IF; END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1033,
    "task": "Write a stored procedure to get height, weight or years played of a player based on type provided as parameter using IF condition",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to get height, weight or years played of a player based on type provided as parameter using IF condition",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player (iType_in IN VARCHAR2, iPlayer_in IN VARCHAR2, outstr OUT VARCHAR2) AS BEGIN IF iType_in = 'Stats' THEN SELECT 'Hgt/Wgt='|| Height ||'/'||Weight INTO outstr FROM PLAYERS WHERE PLAYERID = iPlayer_in; ELSE SELECT 'Years Played from '||firstnhl||' to '||lastnhl INTO outstr FROM PLAYERS WHERE PLAYERID = iPlayer_in; END IF; END prc_get_player;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player; CREATE PROCEDURE prc_get_player (IN iType_in string, IN iPlayer_in string) AS var outstr string; IF (iType_in = 'Stats') outstr=(SELECT 'Hgt/Wgt='|| Height ||'/'||Weight FROM PLAYERS WHERE PLAYERID = iPlayer_in); ELSE outstr=(SELECT 'Years Played from '||firstnhl||' to '||lastnhl FROM PLAYERS WHERE PLAYERID = iPlayer_in); END_IF; RETURN outstr; END_PROCEDURE;"
  },
  {
    "number": 1034,
    "task": "Write a stored procedure to list all teams of a player throughout their career using WHILE loop",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a stored procedure to list all teams of a player throughout their career using WHILE loop",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_teams (iPlayer_in IN VARCHAR2, tbl_team OUT SYS_REFCURSOR) IS vfirstnhl players.firstNHL%TYPE; vlastnhl players.lastNHL%TYPE; BEGIN SELECT firstNHL, lastNHL INTO vfirstnhl, vlastnhl FROM PLAYERS WHERE PLAYERID = iPlayer_in; WHILE vfirstnhl <= vlastnhl LOOP OPEN tbl_team FOR SELECT year, teamid, stint FROM SCORING WHERE playerid = iPlayer_in AND year = vfirstnhl ORDER BY year, teamid, stint; vfirstnhl := vfirstnhl + 1; END LOOP; END prc_get_player_teams;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_teams; CREATE PROCEDURE prc_get_player_teams (IN iPlayer_in string)RETURNS tbl_team(Year integer, Teamid string, stint integer) AS VAR vfirstnhl integer, vlastnhl integer; vfirstnhl,vlastnhl = (SELECT FIRSTNHL,LASTNHL FROM PLAYERS where PLAYERID = iPlayer_in); WHILE (vfirstnhl <= vlastnhl) INSERT into tbl_team select year,teamid,stint from SCORING where playerid = iPlayer_in and YEAR = vfirstnhl ORDER BY year,teamid,stint; vfirstnhl=vfirstnhl+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1035,
    "task": "Create a stored procedure that accepts a player ID and returns height, weight or years played based on input type.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure that accepts a player ID and returns height, weight or years played based on input type.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerInfo (type_in IN VARCHAR2, id_in IN VARCHAR2, result OUT VARCHAR2) IS BEGIN IF type_in = 'Stats' THEN SELECT 'Height/Weight='|| height ||'/'||weight INTO result FROM players WHERE playerID = id_in; ELSE SELECT 'Years Played from '||firstNHL||' to '||lastNHL INTO result FROM players WHERE playerID = id_in; END IF; END getPlayerInfo;",
    "output": "CREATE PROCEDURE getPlayerInfo (IN type_in string, IN id_in string) AS var result string; IF (type_in = 'Stats') result=(SELECT 'Height/Weight='|| height ||'/'||weight FROM players WHERE playerID = id_in); ELSE result=(SELECT 'Years Played from '||firstNHL||' to '||lastNHL FROM players WHERE playerID = id_in); END_IF; RETURN result; END_PROCEDURE;"
  },
  {
    "number": 1036,
    "task": "Create a stored procedure to return all the teams a player played for in their career.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to return all the teams a player played for in their career.",
    "input": "CREATE OR REPLACE PROCEDURE getPlayerTeams (id_in IN VARCHAR2, teams_tab OUT SYS_REFCURSOR) IS firstYear players.firstNHL%TYPE; lastYear players.lastNHL%TYPE; BEGIN SELECT firstNHL, lastNHL INTO firstYear, lastYear FROM players WHERE playerID = id_in; WHILE firstYear <= lastYear LOOP OPEN teams_tab FOR SELECT year, teamid, stint FROM scoring WHERE playerid = id_in AND year = firstYear ORDER BY year, teamid, stint; firstYear := firstYear + 1; END LOOP; END getPlayerTeams;",
    "output": "CREATE PROCEDURE getPlayerTeams (IN id_in string) RETURNS teams_tab(Year integer, Teamid string, stint integer) AS VAR firstYear integer, lastYear integer; firstYear,lastYear = (SELECT firstNHL,lastNHL FROM players WHERE playerID = id_in); WHILE (firstYear <= lastYear) INSERT into teams_tab select year,teamid,stint from scoring where playerid = id_in and year = firstYear ORDER BY year,teamid,stint; firstYear=firstYear+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1037,
    "task": "Create a stored procedure to update 'Fan' position to 'Crowd' in the 'tst_hockey' table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure to update 'Fan' position to 'Crowd' in the 'tst_hockey' table.",
    "input": "CREATE OR REPLACE PROCEDURE updateFanPosition IS BEGIN FOR i IN (SELECT number FROM hockey WHERE position = 'Fan') LOOP UPDATE tst_hockey SET tstteam = 'Crowd' WHERE tstnumber = i.number; END LOOP; END updateFanPosition;",
    "output": "CREATE PROCEDURE updateFanPosition AS FOR SELECT number, name, position, team FROM hockey; IF (position != 'Fan') CONTINUE; END_IF; UPDATE tsthockey SET tstteam='Crowd' WHERE tstnumber = number; END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1038,
    "task": "How to create a NuoDB SQL Stored Procedure to loop through a range of years to return player teams?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL Stored Procedure to loop through a range of years to return player teams?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_teams (iPlayer IN VARCHAR2) IS TYPE tbl_team IS TABLE OF (Year PLS_INTEGER, Teamid VARCHAR2(255), stint PLS_INTEGER); vfirstnhl PLS_INTEGER; vlastnhl PLS_INTEGER; BEGIN SELECT FIRSTNHL, LASTNHL INTO vfirstnhl, vlastnhl FROM PLAYERS where PLAYERID = iPlayer; WHILE vfirstnhl <= vlastnhl LOOP INSERT into tbl_team select year, teamid, stint from SCORING where playerid = iPlayer and YEAR = vfirstnhl ORDER BY year,teamid,stint; vfirstnhl:=vfirstnhl+1; END LOOP; END prc_get_player_teams;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_teams; CREATE PROCEDURE prc_get_player_teams (IN iPlayer string) RETURNS tbl_team(Year integer, Teamid string, stint integer) AS VAR vfirstnhl integer, vlastnhl integer; vfirstnhl, vlastnhl = (SELECT FIRSTNHL, LASTNHL FROM PLAYERS where PLAYERID = iPlayer); WHILE (vfirstnhl <= vlastnhl) INSERT into tbl_team select year, teamid, stint from SCORING where playerid = iPlayer and YEAR = vfirstnhl ORDER BY year,teamid,stint; vfirstnhl=vfirstnhl+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1039,
    "task": "How to create a stored procedure in NuoDB to get player statistics based on the type of 'Stats' or 'Years' using CASE statement ?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure in NuoDB to get player statistics based on the type of 'Stats' or 'Years' using CASE statement ?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_case (iType_in IN VARCHAR2, iPlayer_in IN VARCHAR2) IS outstr VARCHAR2(255); BEGIN SELECT CASE iType_in WHEN 'Stats' THEN 'Height/Weight='|| Height ||'/'||Weight WHEN 'Years' THEN 'Years Played from '||firstNHL||' to '||lastNHL END INTO outstr FROM PLAYERS WHERE PLAYERID = iPlayer_in; END prc_get_player_case;",
    "output": "CREATE PROCEDURE prc_get_player_case (IN iType_in string, IN iPlayer_in string) AS var outstr string; outstr= CASE iType_in WHEN 'Stats' THEN (SELECT 'Height/Weight='|| Height ||'/'||Weight FROM PLAYERS WHERE PLAYERID = iPlayer_in) ELSE (SELECT 'Years Played from '||firstNHL||' to '||lastNHL FROM PLAYERS WHERE PLAYERID = iPlayer_in) END;END_PROCEDURE;"
  },
  {
    "number": 1040,
    "task": "How to create a stored procedure in NuoDB that retrieves player's height and weight or the years they have played, based on the input type?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure in NuoDB that retrieves player's height and weight or the years they have played, based on the input type?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player (iType IN VARCHAR2, iPlayer IN VARCHAR2) IS outstr VARCHAR2(255); BEGIN SELECT CASE iType WHEN 'Stats' THEN 'Hgt/Wgt='|| Height ||'/'||Weight ELSE 'Years Played from '||firstnhl||' to '||lastnhl END INTO outstr FROM PLAYERS WHERE PLAYERID = iPlayer; END prc_get_player;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player; CREATE PROCEDURE prc_get_player (IN iType string, IN iPlayer string) AS var outstr string; outstr= CASE iType WHEN 'Stats' THEN (SELECT 'Hgt/Wgt='|| Height ||'/'||Weight FROM PLAYERS WHERE PLAYERID = iPlayer) ELSE (SELECT 'Years Played from '||firstnhl||' to '||lastnhl FROM PLAYERS WHERE PLAYERID = iPlayer) END; THROW outstr; END_PROCEDURE;"
  },
  {
    "number": 1041,
    "task": "How to create a stored procedure to get the list of teams that a player has played for in all years of their career?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure to get the list of teams that a player has played for in all years of their career?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_teams (iPlayer IN VARCHAR2) IS TYPE tbl_team IS TABLE OF (Year PLS_INTEGER, Teamid VARCHAR2(255), stint PLS_INTEGER); vfirstnhl PLS_INTEGER; vlastnhl PLS_INTEGER; BEGIN SELECT FIRSTNHL, LASTNHL INTO vfirstnhl, vlastnhl FROM PLAYERS where PLAYERID = iPlayer; WHILE vfirstnhl <= vlastnhl LOOP INSERT into tbl_team select year,teamid,stint from SCORING where playerid = iPlayer and YEAR = vfirstnhl ORDER BY year,teamid,stint; vfirstnhl:=vfirstnhl+1; END LOOP; END prc_get_player_teams;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_teams; CREATE PROCEDURE prc_get_player_teams (IN iPlayer string) RETURNS tbl_team(Year integer, Teamid string, stint integer) AS VAR vfirstnhl integer, vlastnhl integer; vfirstnhl,vlastnhl = (SELECT FIRSTNHL,LASTNHL FROM PLAYERS where PLAYERID = iPlayer); WHILE (vfirstnhl <= vlastnhl) INSERT into tbl_team select year,teamid,stint from SCORING where playerid = iPlayer and YEAR = vfirstnhl ORDER BY year,teamid,stint; vfirstnhl=vfirstnhl+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1042,
    "task": "Create a stored procedure named 'prc_players_age' that takes a year as an input parameter and returns all players that were born in that year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure named 'prc_players_age' that takes a year as an input parameter and returns all players that were born in that year.",
    "input": "CREATE OR REPLACE PROCEDURE prc_players_age (year_in IN PLS_INTEGER) IS TYPE tbl_player IS TABLE OF (playerID VARCHAR2(255), firstName VARCHAR2(255), lastName VARCHAR2(255), birthYear PLS_INTEGER); BEGIN FOR player_rec IN (SELECT playerID, firstName, lastName, birthYear FROM players WHERE birthYear = year_in) LOOP tbl_player(player_rec.playerID, player_rec.firstName, player_rec.lastName, player_rec.birthYear); END LOOP; END prc_players_age;",
    "output": "CREATE PROCEDURE prc_players_age (IN year_in Integer) RETURNS tbl_player (playerID String, firstName String, lastName String, birthYear Integer) AS VAR playerID_str String, firstName_str String, lastName_str String, birthYear_int Integer; FOR SELECT playerID, firstName, lastName, birthYear FROM players WHERE birthYear = year_in; playerID_str = playerID; firstName_str = firstName; lastName_str = lastName; birthYear_int = birthYear; INSERT INTO tbl_player VALUES (playerID_str, firstName_str, lastName_str, birthYear_int); END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1043,
    "task": "Create a stored procedure named 'prc_team_records' that takes as input parameters a team id and a year, and returns their win, loss, and ties for that year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a stored procedure named 'prc_team_records' that takes as input parameters a team id and a year, and returns their win, loss, and ties for that year.",
    "input": "CREATE OR REPLACE PROCEDURE prc_team_records (team_id_in IN VARCHAR2, year_in IN PLS_INTEGER) IS TYPE tbl_team_records IS TABLE OF (wins PLS_INTEGER, losses PLS_INTEGER, ties PLS_INTEGER); BEGIN FOR team_rec IN (SELECT wins, losses, ties FROM teams WHERE teamID = team_id_in AND year = year_in) LOOP tbl_team_records(team_rec.wins, team_rec.losses, team_rec.ties); END LOOP; END prc_team_records;",
    "output": "CREATE PROCEDURE prc_team_records (IN team_id_in String, IN year_in Integer) RETURNS tbl_team_records (wins Integer, losses Integer, ties Integer) AS VAR wins_int Integer, losses_int Integer, ties_int Integer; FOR SELECT wins, losses, ties FROM teams WHERE teamID = team_id_in AND year = year_in; wins_int = wins; losses_int = losses; ties_int = ties; INSERT INTO tbl_team_records VALUES (wins_int, losses_int, ties_int); END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1044,
    "task": "Generate a procedure that retrieves the weight, height and games played of a player based on a player's ID and the type of statistic requested.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a procedure that retrieves the weight, height and games played of a player based on a player's ID and the type of statistic requested.",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_stats (iStat_type IN VARCHAR2, iPlayer IN VARCHAR2) IS final_stat VARCHAR2(255); BEGIN SELECT CASE iStat_type WHEN 'Physique' THEN 'Height/Weight='||Height||'/'||Weight WHEN 'Games' THEN 'Games Played = '||gamesPlayed ELSE 'Invalid Stat Type' END INTO final_stat FROM Players WHERE PLAYERID = iPlayer; END prc_get_player_stats;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_stats; CREATE PROCEDURE prc_get_player_stats (IN iStat_type string, IN iPlayer string) AS VAR final_stat string; final_stat= CASE iStat_type WHEN 'Physique' THEN (SELECT 'Height/Weight='||Height||'/'||Weight FROM Players WHERE PLAYERID = iPlayer) WHEN 'Games' THEN (SELECT 'Games Played = '||gamesPlayed FROM SCORING WHERE PLAYERID = iPlayer) ELSE 'Invalid Stat Type' END; THROW final_stat; END_PROCEDURE;"
  },
  {
    "number": 1045,
    "task": "Generate a procedure that inserts a new player into the players table, and logs any occurring errors into a trace table.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a procedure that inserts a new player into the players table, and logs any occurring errors into a trace table.",
    "input": "CREATE OR REPLACE PROCEDURE prc_insert_player (playerID_in IN VARCHAR2, firstName_in IN VARCHAR2, lastName_in IN VARCHAR2, height_in IN NUMBER, weight_in IN NUMBER) IS BEGIN INSERT INTO players (playerID, firstName, lastName, height, weight) VALUES (playerID_in, firstName_in, lastName_in, height_in, weight_in); EXCEPTION WHEN OTHERS THEN INSERT INTO trace (log, playerID) VALUES (SQLERRM, playerID_in); END prc_insert_player;",
    "output": "DROP PROCEDURE IF EXISTS prc_insert_player; CREATE PROCEDURE prc_insert_player (IN playerID_in string, IN firstName_in string, IN lastName_in string, IN height_in integer, IN weight_in integer) RETURNS trace (log string, playerID string) AS TRY INSERT INTO players (playerID, firstName, lastName, height, weight) VALUES (playerID_in, firstName_in, lastName_in, height_in, weight_in); CATCH(error) INSERT INTO trace VALUES (error, playerID_in); RETURN; END_TRY; THROW 'Player record valid for insert'; END_PROCEDURE;"
  },
  {
    "number": 1046,
    "task": "Write a NuoDB SQL Stored Procedure that inserts new data into the 'teams' table and returns an error message if a unique constraint is violated.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that inserts new data into the 'teams' table and returns an error message if a unique constraint is violated.",
    "input": "CREATE OR REPLACE PROCEDURE insert_team_data (iTeamid IN VARCHAR2, iYear IN NUMBER, iRank IN NUMBER) IS BEGIN INSERT INTO teams (teamID , year, rank) VALUES (iTeamid, iYear, iRank); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN INSERT INTO trace (log) VALUES ('Unique constraint violated'); END insert_team_data;",
    "output": "CREATE PROCEDURE insert_team_data(IN iTeamid string, IN iYear integer, IN iRank integer) RETURNS trace (log string) AS TRY INSERT INTO teams (teamID , year, rank) VALUES (iTeamid, iYear, iRank); CATCH(error) INSERT INTO trace VALUES (error); RETURN ; END_TRY; END_PROCEDURE;"
  },
  {
    "number": 1047,
    "task": "Create a procedure that returns the teams a player in the scoring table has played for over the years.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a procedure that returns the teams a player in the scoring table has played for over the years.",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_teams (iPlayer_in IN VARCHAR2) AS vfirstnhl NUMBER; vlastnhl NUMBER; BEGIN SELECT FIRSTNHL, LASTNHL INTO vfirstnhl, vlastnhl FROM PLAYERS where PLAYERID = iPlayer_in; FOR r IN vfirstnhl..vlastnhl LOOP INSERT into tbl_team SELECT year, teamid, stint FROM SCORING WHERE playerid = iPlayer_in AND YEAR = r; END LOOP; COMMIT; END prc_get_player_teams;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_teams; CREATE PROCEDURE prc_get_player_teams (iPlayer_in string) RETURNS tbl_team(Year integer, Teamid string, stint integer) AS VAR vfirstnhl integer, vlastnhl integer; vfirstnhl, vlastnhl = (SELECT FIRSTNHL, LASTNHL FROM PLAYERS where PLAYERID = iPlayer_in); WHILE (vfirstnhl <= vlastnhl) INSERT into tbl_team select year, teamid, stint from SCORING where playerid = iPlayer_in and YEAR = vfirstnhl ORDER BY year, teamid, stint; vfirstnhl = vfirstnhl + 1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1048,
    "task": "How to create stored procedure that returns a list of players together with their teams played during their career in NHL based on input player name? The procedure should return the results set sorted by player name, year and team.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create stored procedure that returns a list of players together with their teams played during their career in NHL based on input player name? The procedure should return the results set sorted by player name, year and team.",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_teams (iPlayer IN VARCHAR2) AS vfirstnhl NUMBER; vlastnhl NUMBER; BEGIN SELECT FIRSTNHL, LASTNHl INTO vfirstnhl, vlastnhl FROM PLAYERS where PLAYERID = iPlayer; FOR r IN vfirstnhl..vlastnhl LOOP INSERT into tbl_team SELECT year,teamid,stint FROM SCORING where playerid = iPlayer and YEAR = r ORDER BY year,teamid,stint; END LOOP; COMMIT; END prc_get_player_teams;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_teams; CREATE PROCEDURE prc_get_player_teams (IN iPlayer string) RETURNS tbl_team(Year integer, Teamid string, stint integer) AS VAR vfirstnhl integer, vlastnhl integer; vfirstnhl,vlastnhl = (SELECT FIRSTNHL,LASTNHl FROM PLAYERS where PLAYERID = iPlayer); WHILE (vfirstnhl <= vlastnhl) INSERT into tbl_team select year,teamid,stint from SCORING where playerid = iPlayer and YEAR = vfirstnhl ORDER BY year,teamid,stint; vfirstnhl=vfirstnhl+1; END_WHILE;END_PROCEDURE;"
  },
  {
    "number": 1049,
    "task": "Create a NuoDB SQL Stored Procedure that calculates the total games played by a specific player in a specific season.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that calculates the total games played by a specific player in a specific season.",
    "input": "CREATE OR REPLACE FUNCTION total_games_played_season(player_in IN VARCHAR2, season_in IN NUMBER) RETURN NUMBER IS game_count NUMBER; BEGIN SELECT SUM(gamesPlayed) INTO game_count FROM scoring WHERE playerID = player_in AND year = season_in; RETURN game_count; END total_games_played_season;",
    "output": "CREATE PROCEDURE total_games_played_season(IN player_in string, IN season_in integer) AS var game_count integer; game_count = (SELECT SUM(gamesPlayed) FROM scoring WHERE playerID = player_in AND year = season_in); RETURN game_count; END_PROCEDURE;"
  },
  {
    "number": 1050,
    "task": "Generate a stored procedure that will return the team with the most wins in a specific year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a stored procedure that will return the team with the most wins in a specific year.",
    "input": "CREATE OR REPLACE PROCEDURE team_with_most_wins(year_in INTEGER, team_wins OUT SYS_REFCURSOR) IS BEGIN OPEN team_wins FOR SELECT teamID, MAX(wins) OVER (ORDER BY wins DESC) AS max_wins FROM teams WHERE year=year_in; END team_with_most_wins;",
    "output": "CREATE PROCEDURE team_with_most_wins(IN year_in INTEGER) RETURNS team_wins (teamID String, cnt_wins INTEGER) AS var max_wins INTEGER; var team_ID string; max_wins=(SELECT MAX(wins) FROM teams WHERE year=year_in); team_ID=(SELECT teamID FROM teams WHERE wins=max_wins AND year=year_in); INSERT INTO team_wins VALUES (team_ID, max_wins); END_PROCEDURE;"
  },
  {
    "number": 1051,
    "task": "Write a NuoDB SQL Stored Procedure that will return the total number of players from a specific city.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored Procedure that will return the total number of players from a specific city.",
    "input": "CREATE OR REPLACE FUNCTION player_count_city(city_in VARCHAR2) RETURN INTEGER IS player_count INTEGER; BEGIN SELECT COUNT(*) INTO player_count FROM players WHERE birthCity = city_in; RETURN player_count; END player_count_city;",
    "output": "CREATE PROCEDURE player_count_city(IN city_in string) AS var player_count integer; player_count=(SELECT COUNT(*) FROM players WHERE birthCity = city_in); RETURN player_count; END_PROCEDURE;"
  },
  {
    "number": 1052,
    "task": "Write a NuoDB SQL stored procedure that returns the weight and height stats of a player if 'Stats' is passed as an input else it returns the years played by the player. ",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL stored procedure that returns the weight and height stats of a player if 'Stats' is passed as an input else it returns the years played by the player. ",
    "input": "CREATE OR REPLACE FUNCTION prc_get_player(iType VARCHAR2, iPlayer VARCHAR2) RETURN VARCHAR2 IS outstr VARCHAR2(200); BEGIN IF (iType = 'Stats') THEN SELECT 'Hgt/Wgt='|| Height ||'/'||Weight INTO outstr FROM PLAYERS WHERE PLAYERID = iPlayer; ELSE SELECT 'Years Played from '||firstnhl||' to '||lastnhl INTO outstr FROM PLAYERS WHERE PLAYERID = iPlayer; END IF; RETURN outstr; END prc_get_player;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player; CREATE PROCEDURE prc_get_player (IN iType string, IN iPlayer string) AS var outstr string; IF (iType = 'Stats') outstr=(SELECT 'Hgt/Wgt='|| Height ||'/'||Weight FROM PLAYERS WHERE PLAYERID = iPlayer); ELSE outstr=(SELECT 'Years Played from '||firstnhl||' to '||lastnhl FROM PLAYERS WHERE PLAYERID = iPlayer); END_IF; RETURN outstr; END_PROCEDURE;"
  },
  {
    "number": 1053,
    "task": "Create a NuoDB SQL Stored Procedure that returns player's height and weight when iType is 'Stats' and returns player's years of playing when iType is 'Years' using CASE statement.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that returns player's height and weight when iType is 'Stats' and returns player's years of playing when iType is 'Years' using CASE statement.",
    "input": "CREATE OR REPLACE FUNCTION prc_get_player(iType VARCHAR2, iPlayer VARCHAR2) RETURN VARCHAR2 IS outstr VARCHAR2(200); BEGIN SELECT CASE iType WHEN 'Stats' THEN 'Hgt/Wgt='|| Height ||'/'||Weight ELSE 'Years Played from '||firstnhl||' to '||lastnhl END INTO outstr FROM PLAYERS WHERE PLAYERID = iPlayer; RETURN outstr; END prc_get_player;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player; CREATE PROCEDURE prc_get_player (IN iType string, IN iPlayer string) AS var outstr string; outstr= CASE iType WHEN 'Stats' THEN (SELECT 'Hgt/Wgt='|| Height ||'/'||Weight FROM PLAYERS WHERE PLAYERID = iPlayer) ELSE (SELECT 'Years Played from '||firstnhl||' to '||lastnhl FROM PLAYERS WHERE PLAYERID = iPlayer) END; RETURN outstr; END_PROCEDURE;"
  },
  {
    "number": 1054,
    "task": "How can I write a stored procedure in NuoDB SQL that returns all winning teams for a given year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can I write a stored procedure in NuoDB SQL that returns all winning teams for a given year?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_winning_teams(i_year INTEGER, tbl_winning_teams OUT SYS_REFCURSOR) IS BEGIN OPEN tbl_winning_teams FOR SELECT teamid, name FROM teams WHERE playoff = 'F' AND year = i_year; END prc_get_winning_teams;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_winning_teams; CREATE PROCEDURE prc_get_winning_teams(IN i_year integer) RETURNS tbl_winning_teams(Teamid string, Name string) AS VAR v_year integer; v_year = i_year; INSERT INTO tbl_winning_teams SELECT teamid, name FROM teams WHERE playoff = 'F' AND year = v_year; END_PROCEDURE;"
  },
  {
    "number": 1055,
    "task": "Create a NuoDB stored procedure that fetches the player's teams for each year of his career.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB stored procedure that fetches the player's teams for each year of his career.",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_teams(iPlayer_in VARCHAR2, tbl_team OUT SYS_REFCURSOR) IS vfirstnhl INTEGER; vlastnhl INTEGER; BEGIN SELECT FIRSTNHL,LASTNHL INTO vfirstnhl, vlastnhl FROM PLAYERS where PLAYERID = iPlayer_in; OPEN tbl_team FOR SELECT year,teamid,stint FROM SCORING where playerid = iPlayer_in AND YEAR BETWEEN vfirstnhl AND vlastnhl ORDER BY year,teamid,stint; END prc_get_player_teams;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_teams; CREATE PROCEDURE prc_get_player_teams (IN iPlayer_in string) RETURNS tbl_team(Year integer, Teamid string, stint integer) AS VAR vfirstnhl integer, vlastnhl integer; vfirstnhl,vlastnhl = (SELECT FIRSTNHL,LASTNHL FROM PLAYERS where PLAYERID = iPlayer_in); WHILE (vfirstnhl <= vlastnhl) INSERT into tbl_team select year,teamid,stint from SCORING where playerid = iPlayer_in and YEAR = vfirstnhl ORDER BY year,teamid,stint; vfirstnhl=vfirstnhl+1; END_WHILE;END_PROCEDURE;"
  },
  {
    "number": 1056,
    "task": "Write a Stored Procedure to return a list of all players' names with their height and weight in a specified team in a specified year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure to return a list of all players' names with their height and weight in a specified team in a specified year.",
    "input": "CREATE OR REPLACE PROCEDURE get_players_HW_in_team_year(i_team IN VARCHAR2, i_year IN NUMBER) IS CURSOR c IS SELECT p.firstName||' '||p.lastName AS Name, p.height AS Height, p.weight AS Weight FROM players p JOIN scoring s ON p.playerid = s.playerid WHERE s.teamid = i_team AND s.year = i_year; BEGIN FOR r IN c LOOP INSERT INTO player_HW_table VALUES (r.Name, r.Height, r.Weight); END LOOP; COMMIT; END;",
    "output": "CREATE PROCEDURE get_players_HW_in_team_year(IN i_team string, IN i_year integer) RETURNS player_HW_table(Name string, Height integer, Weight integer) AS VAR p_PlayerID string; FOR SELECT playerid FROM scoring WHERE teamid = i_team AND year = i_year; p_PlayerID = playerid; INSERT INTO player_HW_table SELECT firstName||' '||lastName, height, weight FROM players WHERE playerid = p_PlayerID; END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1057,
    "task": "Write a Stored Procedure to update players' positions with a specific position whose year of firstNHL is before a specified year.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a Stored Procedure to update players' positions with a specific position whose year of firstNHL is before a specified year.",
    "input": "CREATE OR REPLACE PROCEDURE update_position_before_year(i_position IN VARCHAR2, i_year IN NUMBER) IS BEGIN UPDATE players SET position = i_position WHERE firstNHL < i_year; COMMIT; END;",
    "output": "CREATE PROCEDURE update_position_before_year(IN i_position string, IN i_year integer) AS FOR SELECT playerid FROM players WHERE firstNHL < i_year; UPDATE players SET position = i_position WHERE playerid = playerid; END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1058,
    "task": "How can I create a stored procedure to select player based on playerID and return their height and weight or years played?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can I create a stored procedure to select player based on playerID and return their height and weight or years played?",
    "input": "CREATE OR REPLACE PROCEDURE p_get_player_data(playerID_in IN VARCHAR2, dataType_in IN VARCHAR2) IS outData VARCHAR2(100); BEGIN IF (dataType_in = 'Stats') THEN SELECT 'Height/Weight='|| Height ||'/'||Weight INTO outData FROM players WHERE PLAYERID = playerID_in; ELSE SELECT 'Years Played from '||firstNHL||' to '||lastNHL INTO outData FROM players WHERE PLAYERID = playerID_in; END IF; INSERT INTO result VALUES (outData); COMMIT; END;",
    "output": "DROP PROCEDURE IF EXISTS p_get_player_DATA; CREATE PROCEDURE p_get_player_data (IN playerID_in string, IN dataType_in string) AS VAR outData string; IF (dataType_in = 'Stats') outData= (SELECT 'Height/Weight='|| Height ||'/'||Weight FROM players WHERE PLAYERID = playerID_in); ELSE outData= (SELECT 'Years Played from '||firstNHL||' to '||lastNHL FROM players WHERE PLAYERID = playerID_in); END_IF; CREATE TABLE result (result string); INSERT INTO result VALUES (outData); END_PROCEDURE;"
  },
  {
    "number": 1059,
    "task": "How to create a stored procedure that takes as input a player's ID, and returns a table with all the teams that player worked with over the years?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a stored procedure that takes as input a player's ID, and returns a table with all the teams that player worked with over the years?",
    "input": "CREATE OR REPLACE PROCEDURE p_get_player_teams(playerID_in IN VARCHAR2) IS firstNHLYear NUMBER; lastNHLYear NUMBER; BEGIN SELECT firstNHL,lastNHL INTO firstNHLYear,lastNHLYear FROM PLAYERS where PLAYERID = playerID_in; FOR year IN firstNHLYear..lastNHLYear LOOP INSERT into tbl_team SELECT year,teamID,stint FROM SCORING WHERE playerID = playerID_in AND YEAR = year ORDER BY year,teamID,stint; END LOOP; COMMIT; END;",
    "output": "DROP PROCEDURE IF EXISTS p_get_player_TEAM; CREATE PROCEDURE p_get_player_teams (IN playerID_in string) RETURNS tbl_team(Year integer, TeamID string, stint integer) AS VAR firstNHLYear integer, lastNHLYear integer; firstNHLYear,lastNHLYear = (SELECT firstNHL,lastNHL FROM PLAYERS where PLAYERID = playerID_in); WHILE (firstNHLYear <= lastNHLYear) INSERT into tbl_team select year,teamID,stint from SCORING where playerID = playerID_in and YEAR = firstNHLYear ORDER BY year,teamID,stint; firstNHLYear=firstNHLYear+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1060,
    "task": "Generate a NuoDB SQL Stored Procedure that will list the players based on input of either 'height' or 'weight' or 'both'. If 'height' is supplied, it should display players where 'height > provided value'. If it's 'weight', display players where 'weight > provided value'. For 'both', list players where both conditions are met.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a NuoDB SQL Stored Procedure that will list the players based on input of either 'height' or 'weight' or 'both'. If 'height' is supplied, it should display players where 'height > provided value'. If it's 'weight', display players where 'weight > provided value'. For 'both', list players where both conditions are met.",
    "input": "CREATE OR REPLACE PROCEDURE prc_list_players(iChoice IN VARCHAR2, iValue IN NUMBER) IS outstr VARCHAR2(4000); BEGIN SELECT PLAYERID||', '||firstName||' '||lastName INTO outstr FROM PLAYERS WHERE (iChoice = 'height' AND height > iValue) OR (iChoice = 'weight' AND weight > iValue) OR (height > iValue AND weight > iValue); DBMS_OUTPUT.PUT_LINE(outstr); END;",
    "output": "CREATE PROCEDURE prc_list_players (IN iChoice string, IN iValue integer) AS var outstr string; outstr= CASE iChoice WHEN 'height' THEN (SELECT PLAYERID||', '||firstName||' '||lastName FROM PLAYERS WHERE height > iValue) WHEN 'weight' THEN (SELECT PLAYERID||', '||firstName||' '||lastName FROM PLAYERS WHERE weight > iValue) ELSE (SELECT PLAYERID||', '||firstName||' '||lastName FROM PLAYERS WHERE height > iValue AND weight > iValue) END; THROW outstr; END_PROCEDURE;"
  },
  {
    "number": 1061,
    "task": "Create a NuoDB SQL Stored Procedure that takes a player's birth year as an input and loops through all matching players, returning their playerID, first and last names",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Create a NuoDB SQL Stored Procedure that takes a player's birth year as an input and loops through all matching players, returning their playerID, first and last names",
    "input": "CREATE OR REPLACE PROCEDURE prc_player_byear(iBirthYear IN NUMBER) IS BEGIN FOR r IN (SELECT PLAYERID, firstName, lastName FROM PLAYERS WHERE birthYear = iBirthYear) LOOP INSERT INTO temp_table VALUES (r.playerId, r.firstName, r.lastName); END LOOP; COMMIT; END;",
    "output": "CREATE PROCEDURE prc_player_byear (IN iBirthYear integer) RETURNS temp_table(playerid string, firstName string, lastName string) AS FOR SELECT PLAYERID, firstName, lastName FROM PLAYERS WHERE birthYear = iBirthYear; INSERT INTO temp_table VALUES (playerId, firstName, lastName); END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1062,
    "task": "Write a NuoDB SQL Stored procedure to get player's statistics by taking player type and player identifier as input parameters. If player type is 'Stats', it should return player's height and weight and if player type is any other value, it should return years the player has played.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored procedure to get player's statistics by taking player type and player identifier as input parameters. If player type is 'Stats', it should return player's height and weight and if player type is any other value, it should return years the player has played.",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_stats(iType_in IN VARCHAR2, iPlayer_in IN VARCHAR2) IS outstr VARCHAR2(100); BEGIN IF (iType_in = 'Stats') THEN SELECT 'Height/Weight='|| Height ||'/'||Weight INTO outstr FROM players WHERE PLAYERID = iPlayer_in; ELSE SELECT 'Years Played from '||firstNHL||' to '||lastNHL INTO outstr FROM players WHERE PLAYERID = iPlayer_in; END IF; DBMS_OUTPUT.PUT_LINE(outstr); END;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_stats; CREATE PROCEDURE prc_get_player_stats (IN iType_in string, IN iPlayer_in string) AS VAR outstr string; IF (iType_in = 'Stats') outstr=(SELECT 'Height/Weight='|| Height ||'/'||Weight FROM players WHERE PLAYERID = iPlayer_in); ELSE outstr=(SELECT 'Years Played from '||firstNHL||' to '||lastNHL FROM players WHERE PLAYERID = iPlayer_in); END_IF; RETURN outstr; END_PROCEDURE;"
  },
  {
    "number": 1063,
    "task": "Write a NuoDB SQL Stored procedure to get player's statistics by taking player type and player identifier as input parameters using CASE expression. If player type is 'Stats', it should return player's height and weight and if player type is any other value, it should return years the player has played.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Write a NuoDB SQL Stored procedure to get player's statistics by taking player type and player identifier as input parameters using CASE expression. If player type is 'Stats', it should return player's height and weight and if player type is any other value, it should return years the player has played.",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_stats(iType_in IN VARCHAR2, iPlayer_in IN VARCHAR2) IS outstr VARCHAR2(100); BEGIN SELECT CASE iType_in WHEN 'Stats' THEN 'Height/Weight='|| Height ||'/'||Weight ELSE 'Years Played from '||firstNHL||' to '||lastNHL END INTO outstr FROM players WHERE PLAYERID = iPlayer_in; DBMS_OUTPUT.PUT_LINE(outstr); END;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_stats; CREATE PROCEDURE prc_get_player_stats (IN iType_in string, IN iPlayer_in string) AS VAR outstr string; outstr= CASE iType_in WHEN 'Stats' THEN (SELECT 'Height/Weight='|| Height ||'/'||Weight FROM players WHERE PLAYERID = iPlayer_in) ELSE (SELECT 'Years Played from '||firstNHL||' to '||lastNHL FROM players WHERE PLAYERID = iPlayer_in) END;END_PROCEDURE;"
  },
  {
    "number": 1064,
    "task": "Generate a NuoDB SQL stored procedure that will return a temporary table with the player's height and weight or years played based on the type defined.",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - Generate a NuoDB SQL stored procedure that will return a temporary table with the player's height and weight or years played based on the type defined.",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_stats(iType_in IN VARCHAR2, iPlayer_in IN VARCHAR2) IS stat VARCHAR2(100); BEGIN IF (iType_in = 'Stats') THEN SELECT 'Hgt/Wgt='|| Height ||'/'||Weight INTO stat FROM players WHERE PLAYERID = iPlayer_in; ELSE SELECT 'Years Played from '||firstNHL||' to '||lastNHL INTO stat FROM players WHERE PLAYERID = iPlayer_in; END IF; DBMS_OUTPUT.PUT_LINE(stat); END;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_stats; CREATE PROCEDURE prc_get_player_stats (IN iType_in string, IN iPlayer_in string) AS VAR stat string; IF (iType_in = 'Stats') stat = (SELECT 'Hgt/Wgt='|| Height ||'/'||Weight FROM players WHERE PLAYERID = iPlayer_in); ELSE stat = (SELECT 'Years Played from '||firstNHL||' to '||lastNHL FROM players WHERE PLAYERID = iPlayer_in); END_IF; RETURN stat; END_PROCEDURE;"
  },
  {
    "number": 1065,
    "task": "How to create a NuoDB SQL Stored Procedure that takes a team ID and year as parameters and returns the respective team's number of wins, losses, and ties in that year?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL Stored Procedure that takes a team ID and year as parameters and returns the respective team's number of wins, losses, and ties in that year?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_team_record(iYear_in IN NUMBER, iTeam_in IN VARCHAR2) IS outstr VARCHAR2(100); BEGIN SELECT 'Wins=' || wins || ', Losses=' || losses || ', Ties=' || ties INTO outstr FROM TEAMS WHERE YEAR = iYear_in AND teamID = iTeam_in; DBMS_OUTPUT.PUT_LINE(outstr); END;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_team_record;CREATE PROCEDURE prc_get_team_record (IN iYear_in integer, IN iTeam_in string) AS    var outstr string;    outstr=(SELECT 'Wins=' || wins || ', Losses=' || losses || ', Ties=' || ties              FROM TEAMS              WHERE YEAR = iYear_in AND teamID = iTeam_in);    THROW outstr;END_PROCEDURE;"
  },
  {
    "number": 1066,
    "task": "How to create a NuoDB SQL Stored Procedure that takes a player's ID as an input and returns his/her teams played for each NHL year in his/her career?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL Stored Procedure that takes a player's ID as an input and returns his/her teams played for each NHL year in his/her career?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_career(iPlayer_in IN VARCHAR2) IS vfirstnhl NUMBER; vlastnhl NUMBER; tbl_team SYS_REFCURSOR; BEGIN SELECT FIRSTNHL,LASTNHL INTO vfirstnhl, vlastnhl FROM PLAYERS WHERE PLAYERID = iPlayer_in; OPEN tbl_team FOR SELECT year,teamid,stint FROM SCORING WHERE playerid = iPlayer_in AND YEAR BETWEEN vfirstnhl AND vlastnhl ORDER BY year,teamid,stint; DBMS_SQL.RETURN_RESULT(tbl_team); END;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_career;CREATE PROCEDURE prc_get_player_career (IN iPlayer_in string)RETURNS tbl_team(Year integer, Teamid string, stint integer) AS    VAR vfirstnhl integer, vlastnhl integer;    vfirstnhl,vlastnhl = (SELECT FIRSTNHL,LASTNHL FROM PLAYERS where PLAYERID = iPlayer_in);    WHILE (vfirstnhl <= vlastnhl)        INSERT into tbl_team select year,teamid,stint from SCORING                                 where playerid = iPlayer_in                                  and YEAR = vfirstnhl ORDER BY year,teamid,stint;        vfirstnhl=vfirstnhl+1;    END_WHILE;END_PROCEDURE;"
  },
  {
    "number": 1067,
    "task": "How to write a stored procedure in NuoDB SQL that takes a year and a teamid as input, and returns specific stats for that year and team?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a stored procedure in NuoDB SQL that takes a year and a teamid as input, and returns specific stats for that year and team?",
    "input": "CREATE OR REPLACE PROCEDURE get_stats(in_year IN INTEGER, in_teamid IN VARCHAR2, out_stat1 OUT VARCHAR2, out_stat2 OUT VARCHAR2, out_stat3 OUT VARCHAR2) IS BEGIN SELECT conferenceid, divisionid, rank INTO out_stat1, out_stat2, out_stat3 FROM hockey.teams WHERE year = in_year AND teamid = in_teamid; END;",
    "output": "CREATE PROCEDURE get_stats(IN  in_year   INTEGER, IN  in_teamid STRING, OUT out_stat1 STRING, OUT out_stat2 STRING, OUT out_stat3 STRING) AS out_stat1,out_stat2,out_stat3 = CASE in_year WHEN in_year THEN (SELECT conferenceid, divisionid, rank FROM hockey.teams WHERE year = in_year AND teamid = in_teamid) END; END_PROCEDURE;"
  },
  {
    "number": 1068,
    "task": "How can I return records from two tables 'scores' and 'teams' using stored procedure in NuoDB SQL based on the condition provided?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can I return records from two tables 'scores' and 'teams' using stored procedure in NuoDB SQL based on the condition provided?",
    "input": "CREATE OR REPLACE PROCEDURE prc_player_teams(iPlayer IN VARCHAR2) IS tbl_team SYS_REFCURSOR; vfirstnhl NUMBER; vlastnhl NUMBER; BEGIN SELECT FIRSTNHL,LASTNHL INTO vfirstnhl, vlastnhl FROM PLAYERS WHERE PLAYERID = iPlayer; OPEN tbl_team FOR SELECT year,teamid,stint FROM SCORING WHERE playerid = iPlayer AND YEAR BETWEEN vfirstnhl AND vlastnhl ORDER BY year,teamid,stint; DBMS_SQL.RETURN_RESULT(tbl_team); END;",
    "output": "CREATE PROCEDURE prc_player_teams (IN iPlayer string) RETURNS tbl_team(Year integer, Teamid string, stint integer) AS VAR vfirstnhl integer, vlastnhl integer; vfirstnhl,vlastnhl = (SELECT FIRSTNHL,LASTNHL FROM PLAYERS where PLAYERID = iPlayer); WHILE (vfirstnhl <= vlastnhl) INSERT into tbl_team select year,teamid,stint from SCORING where playerid = iPlayer and YEAR = vfirstnhl ORDER BY year,teamid,stint; vfirstnhl=vfirstnhl+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1069,
    "task": "How can you write a NuoDB Stored Procedure in SQL to get group-by count of players born in specific years?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you write a NuoDB Stored Procedure in SQL to get group-by count of players born in specific years?",
    "input": "CREATE OR REPLACE PROCEDURE prc_players_by_year(begyr IN INTEGER, endyr IN INTEGER) IS temptab SYS_REFCURSOR; BEGIN IF ( (begyr < 1) OR (endyr > EXTRACT(YEAR FROM SYSDATE)) ) THEN RAISE_APPLICATION_ERROR(-20001, 'Error 10: Invalid Year'); END IF; OPEN temptab FOR SELECT birthyear,count(*) FROM players WHERE birthyear BETWEEN begyr AND endyr GROUP BY birthyear; DBMS_SQL.RETURN_RESULT(temptab); END;",
    "output": "DROP PROCEDURE IF EXISTS prc_players_by_year; CREATE PROCEDURE prc_players_by_year(begyr INTEGER, endyr INTEGER) RETURNS temptab (year INTEGER, player_ct INTEGER) AS IF ( (begyr < 1) OR (endyr > YEAR(current_date)) ) THROW 'Error 10: Invalid Year'; END_IF; WHILE ( begyr <= endyr ) INSERT INTO temptab SELECT birthyear,count(*) FROM players WHERE birthyear=begyr GROUP BY birthyear; begyr=begyr+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1070,
    "task": "How can you update a table for rows satisfying a specific condition in a loop in NuoDB?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How can you update a table for rows satisfying a specific condition in a loop in NuoDB?",
    "input": "CREATE OR REPLACE PROCEDURE proc_continue_usage AS l_team hockey.team%TYPE; l_name hockey.name%TYPE; l_number hockey.number%TYPE; l_position hockey.position%TYPE; CURSOR c1 IS SELECT number, name, position, team FROM hockey; BEGIN FOR r IN c1 LOOP l_team := r.team; l_name := r.name; l_number := r.number; l_position := r.position; INSERT INTO tst_hockey VALUES (l_number, l_name, l_position,l_team); IF ( l_position != 'Fan' ) THEN CONTINUE; END IF; UPDATE tsthockey SET tstteam='Crowd' WHERE tstnumber = l_number; END LOOP; END;",
    "output": "CREATE PROCEDURE proc_continue_usage AS VAR l_team STRING; VAR l_name sTRING; VAR l_number INTEGER; VAR l_position STRING; FOR SELECT number, name, position,team FROM hockey; l_team = team; l_name = name; l_number = number; l_position = position; INSERT INTO tst_hockey VALUES (l_number, l_name, l_position,l_team); IF ( l_position != 'Fan' ) CONTINUE; END_IF; UPDATE tsthockey SET tstteam='Crowd' WHERE tstnumber = l_number; END_FOR; END_PROCEDURE;"
  },
  {
    "number": 1071,
    "task": "How to create a NuoDB SQL Stored Procedure that takes in a player ID and returns a player's height & weight OR their duration of years played based on a string input?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL Stored Procedure that takes in a player ID and returns a player's height & weight OR their duration of years played based on a string input?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_info(iType_in IN VARCHAR2, iPlayer_in IN VARCHAR2) IS outstr VARCHAR2(4000); BEGIN outstr:= CASE iType_in WHEN 'Stats' THEN (SELECT 'Hgt/Wgt='|| Height ||'/'||Weight FROM PLAYERS WHERE PLAYERID = iPlayer_in) ELSE (SELECT 'Years Played from '||firstnhl||' to '||lastnhl FROM PLAYERS WHERE PLAYERID = iPlayer_in) END; INSERT INTO tbl_player_info VALUES (outstr); END;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_info; CREATE PROCEDURE prc_get_player_info (IN iType_in string, IN iPlayer_in string) RETURNS tbl_player_info(log string) AS var outstr string; outstr= CASE iType_in WHEN 'Stats' THEN (SELECT 'Hgt/Wgt='|| Height ||'/'||Weight FROM PLAYERS WHERE PLAYERID = iPlayer_in) ELSE (SELECT 'Years Played from '||firstnhl||' to '||lastnhl FROM PLAYERS WHERE PLAYERID = iPlayer_in) END; INSERT INTO tbl_player_info VALUES (outstr); END_PROCEDURE;"
  },
  {
    "number": 1072,
    "task": "How to create a NuoDB SQL Stored Procedure that builds a list of teams a player was a member of, throughout his career, based on player ID input?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create a NuoDB SQL Stored Procedure that builds a list of teams a player was a member of, throughout his career, based on player ID input?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_teams(iPlayer_in IN VARCHAR2) IS tbl_team SYS_REFCURSOR; v_firstnhl NUMBER; v_lastnhl NUMBER; BEGIN SELECT FIRSTNHL,LASTNHL INTO v_firstnhl, v_lastnhl FROM PLAYERS WHERE PLAYERID = iPlayer_in; OPEN tbl_team FOR SELECT year, teamid, stint FROM SCORING WHERE playerid = iPlayer_in AND YEAR BETWEEN v_firstnhl AND v_lastnhl ORDER BY year, teamid, stint; DBMS_SQL.RETURN_RESULT(tbl_team); END;",
    "output": "DROP PROCEDURE IF EXISTS prc_get_player_teams; CREATE PROCEDURE prc_get_player_teams(IN iPlayer_in string) RETURNS tbl_team(year integer, teamid string, stint integer) AS VAR v_firstnhl integer, v_lastnhl integer; v_firstnhl, v_lastnhl = (SELECT FIRSTNHL,LASTNHL FROM PLAYERS WHERE PLAYERID = iPlayer_in); WHILE (v_firstnhl <= v_lastnhl) INSERT into tbl_team select year, teamid, stint from SCORING where playerid = iPlayer_in and YEAR = v_firstnhl ORDER BY year, teamid, stint; v_firstnhl = v_firstnhl + 1; END_WHILE;END_PROCEDURE;"
  },
  {
    "number": 1073,
    "task": "How to write a NuoDB Stored Procedure to return the team and year for a given players all the games?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to write a NuoDB Stored Procedure to return the team and year for a given players all the games?",
    "input": "CREATE OR REPLACE PROCEDURE prc_get_player_games(iPlayer IN VARCHAR2) IS tbl_games SYS_REFCURSOR; vfirstnhl NUMBER; vlastnhl NUMBER; BEGIN SELECT FIRSTNHL,LASTNHL INTO vfirstnhl, vlastnhl FROM PLAYERS WHERE PLAYERID = iPlayer; OPEN tbl_games FOR SELECT teamid, year FROM SCORING WHERE playerid = iPlayer AND YEAR BETWEEN vfirstnhl AND vlastnhl ORDER BY year, teamid; DBMS_SQL.RETURN_RESULT(tbl_games); END;",
    "output": "CREATE PROCEDURE prc_get_player_games (IN iPlayer string) RETURNS tbl_games(Team string, Year integer) AS VAR vfirstnhl integer, vlastnhl integer; vfirstnhl,vlastnhl = (SELECT FIRSTNHL,LASTNHL FROM PLAYERS where PLAYERID = iPlayer); WHILE (vfirstnhl <= vlastnhl) INSERT into tbl_games select teamid,year from SCORING where playerid = iPlayer and YEAR = vfirstnhl ORDER BY year,teamid; vfirstnhl=vfirstnhl+1; END_WHILE; END_PROCEDURE;"
  },
  {
    "number": 1074,
    "task": "How to create NuoDB Stored Procedure that returns a list of modified fan records?",
    "instruction": "Convert the following Oracle PL/SQL function into a NuoDB SQL Stored Procedure. Follow the following task to guide the conversion - How to create NuoDB Stored Procedure that returns a list of modified fan records?",
    "input": "CREATE OR REPLACE PROCEDURE proc_modify_fans AS l_team hockey.team%TYPE; l_name hockey.name%TYPE; l_number hockey.number%TYPE; l_position hockey.position%TYPE; CURSOR c1 IS SELECT number, name, position,team FROM hockey; BEGIN FOR r IN c1 LOOP l_team := r.team; l_name := r.name; l_number := r.number; l_position := r.position; IF ( l_position != 'Fan' ) THEN CONTINUE; END IF; UPDATE hockey SET team='Crowd' WHERE number = l_number; END LOOP; END;",
    "output": "CREATE PROCEDURE proc_modify_fans AS VAR l_team STRING; VAR l_name STRING; VAR l_number INTEGER; VAR l_position STRING; FOR SELECT number, name, position,team FROM hockey; l_team = team; l_name = name; l_number = number; l_position = position; IF ( l_position != 'Fan' ) CONTINUE; END_IF; UPDATE hockey SET team='Crowd' WHERE number = l_number; END_FOR; END_PROCEDURE;"
  }
]
